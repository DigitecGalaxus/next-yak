{"documentCount":63,"nextId":63,"documentIds":{"0":"docs/pages/examples.md#examples","1":"docs/pages/faq.md#faq","2":"docs/pages/faq.md#is-next-yak-production-ready","3":"docs/pages/faq.md#can-i-use-next-yak-with-other-frameworks-than-nextjs","4":"docs/pages/faq.md#can-i-mixcombine-next-yak-with-other-css-in-js-libraries","5":"docs/pages/faq.md#can-i-reference-a-component-in-another-component","6":"docs/pages/faq.md#why-does-next-yak-always-generate-css-variables-when-the-values-are-static-references-that-are-known-at-build-time","7":"docs/pages/faq.md#can-i-use-next-yak-with-typescript","8":"docs/pages/faq.md#can-i-contribute-to-next-yak","9":"docs/pages/features.md#features","10":"docs/pages/features.md#table-of-contents","11":"docs/pages/features.md#static-css","12":"docs/pages/features.md#dynamic-styles","13":"docs/pages/features.md#compatible-with-utility-first-css-frameworks-eg-tailwind","14":"docs/pages/features.md#animations","15":"docs/pages/features.md#mixins","16":"docs/pages/features.md#automatic-css-variables","17":"docs/pages/features.md#theming","18":"docs/pages/features.md#css-prop","19":"docs/pages/features.md#typescript","20":"docs/pages/getting-started.md#next-yak","21":"docs/pages/getting-started.md#installation","22":"docs/pages/getting-started.md#install-the-package","23":"docs/pages/getting-started.md#enable-next-yak","24":"docs/pages/getting-started.md#start-using-next-yak","25":"docs/pages/how-does-it-work.md#how-does-it-work","26":"docs/pages/how-does-it-work.md#the-basics","27":"docs/pages/how-does-it-work.md#the-compile-time-part","28":"docs/pages/how-does-it-work.md#the-first-loader-tsloadercjs","29":"docs/pages/how-does-it-work.md#add-style-import","30":"docs/pages/how-does-it-work.md#transform-tagged-template-literals","31":"docs/pages/how-does-it-work.md#the-second-loader-cssloadercjs","32":"docs/pages/how-does-it-work.md#remove-imports","33":"docs/pages/how-does-it-work.md#transform-static-styles","34":"docs/pages/how-does-it-work.md#transform-dynamic-styles","35":"docs/pages/how-does-it-work.md#the-runtime-part","36":"docs/pages/how-does-it-work.md#context","37":"docs/pages/migration-from-styled-components.md#migration-from-styled-components","38":"docs/pages/migration-from-styled-components.md#familiar-api","39":"docs/pages/migration-from-styled-components.md#styled","40":"docs/pages/migration-from-styled-components.md#css","41":"docs/pages/migration-from-styled-components.md#css-prop","42":"docs/pages/migration-from-styled-components.md#keyframes","43":"docs/pages/migration-from-styled-components.md#attrs","44":"docs/pages/migration-from-styled-components.md#references-to-other-components","45":"docs/pages/migration-from-styled-components.md#mixins","46":"docs/pages/migration-from-styled-components.md#migration","47":"docs/pages/migration-from-styled-components.md#change-import","48":"docs/pages/migration-from-styled-components.md#add-yak-files","49":"docs/pages/migration-from-styled-components.md#replace-styled-components-with-next-yak","50":"docs/pages/migration-from-styled-components.md#missing-features","51":"docs/pages/migration-from-styled-components.md#conclusion","52":"docs/pages/roadmap.md#roadmap","53":"docs/pages/roadmap.md#production-ready-10","54":"docs/pages/why-next-yak.md#motivation","55":"docs/pages/why-next-yak.md#our-journey","56":"docs/pages/why-next-yak.md#when-should-you-use-next-yak","57":"docs/pages/why-next-yak.md#if-youre-familiar-with-styled-components","58":"docs/pages/why-next-yak.md#in-general","59":"docs/pages/why-next-yak.md#colocation","60":"docs/pages/why-next-yak.md#familiarity","61":"docs/pages/why-next-yak.md#compatibility","62":"docs/pages/why-next-yak.md#composability"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[1,1,1],"1":[1,1,1],"2":[6,1,18],"3":[11,1,25],"4":[13,1,27],"5":[8,1,47],"6":[20,1,35],"7":[8,1,10],"8":[7,1,19],"9":[1,1,16],"10":[3,1,19],"11":[2,1,65],"12":[2,1,184],"13":[10,1,138],"14":[1,1,57],"15":[1,1,76],"16":[3,1,143],"17":[1,1,187],"18":[2,1,70],"19":[1,3,47],"20":[2,1,33],"21":[1,2,1],"22":[3,3,14],"23":[3,3,22],"24":[4,3,54],"25":[5,1,27],"26":[2,5,29],"27":[4,5,33],"28":[3,8,41],"29":[3,10,92],"30":[4,10,113],"31":[3,8,41],"32":[2,10,24],"33":[3,10,43],"34":[3,10,79],"35":[3,5,42],"36":[1,5,176],"37":[4,1,20],"38":[2,4,1],"39":[1,6,49],"40":[1,6,80],"41":[2,7,69],"42":[1,6,52],"43":[1,6,43],"44":[4,6,52],"45":[1,6,44],"46":[1,4,1],"47":[2,4,19],"48":[3,4,118],"49":[6,4,123],"50":[2,4,19],"51":[1,4,60],"52":[1,1,24],"53":[4,1,31],"54":[1,1,100],"55":[2,1,161],"56":[6,1,1],"57":[8,7,158],"58":[2,7,8],"59":[1,9,102],"60":[1,9,34],"61":[1,9,129],"62":[1,9,26]},"averageFieldLength":[3.34920634920635,3.9365079365079363,56.714285714285715],"storedFields":{"0":{"href":"/examples#examples","html":"</header>\n","isPage":true,"text":"\n","title":"Examples","titles":[]},"1":{"href":"/faq#faq","html":"</header>\n","isPage":true,"text":"\n","title":"FAQ","titles":[]},"2":{"href":"/faq#is-next-yak-production-ready","html":"\n<p><code>next-yak</code> is still experimental but we are working hard to release a stable 1.0 version</p>\n","isPage":false,"text":"\nnext-yak is still experimental but we are working hard to release a stable 1.0 version\n","title":"Is next-yak production ready?","titles":["FAQ"]},"3":{"href":"/faq#can-i-use-next-yak-with-other-frameworks-than-nextjs","html":"\n<p>Not by now - feel free to ask for adding support for your framework in our github issue tracker and we will give it a thought.</p>\n","isPage":false,"text":"\nNot by now - feel free to ask for adding support for your framework in our github issue tracker and we will give it a thought.\n","title":"Can I use next-yak with other frameworks than next.js?","titles":["FAQ"]},"4":{"href":"/faq#can-i-mixcombine-next-yak-with-other-css-in-js-libraries","html":"\n<p>Yes, you can use next-yak with other CSS-in-JS libraries. You can use it with styled-components, emotion, or any other library that\nadds css classes to your components.</p>\n","isPage":false,"text":"\nYes, you can use next-yak with other CSS-in-JS libraries. You can use it with styled-components, emotion, or any other library that\nadds css classes to your components.\n","title":"Can I mix/combine next-yak with other CSS-in-JS libraries?","titles":["FAQ"]},"5":{"href":"/faq#can-i-reference-a-component-in-another-component","html":"\n<p>Yes, you can reference it in the tagged template literal.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Nav</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">nav</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">Button</span><span style=\"color:#96D0FF\">} {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\tcolor: white;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<aside data-callout=\"info\"><p>This doesn&#x27;t work for components outside of the current file, as next-yak only considers one file at a time.</p></aside>\n","isPage":false,"text":"\nYes, you can reference it in the tagged template literal.\nimport { styled } from &#x27;next-yak&#x27;;\n \nconst Button = styled.button`\n\tbackground: #BF4F74;\n`;\n \nconst Nav = styled.nav`\n\tbackground: #BF4F74;\n\t${Button} {\n\t\tcolor: white;\n\t}\n`;\nThis doesn&#x27;t work for components outside of the current file, as next-yak only considers one file at a time.\n","title":"Can I reference a component in another component?","titles":["FAQ"]},"6":{"href":"/faq#why-does-next-yak-always-generate-css-variables-when-the-values-are-static-references-that-are-known-at-build-time","html":"\n<p>It&#x27;s very hard to determine if a value is static or dynamic. We decided to always generate CSS variables to be on the safe side\nand add errors if we detect that a value is static but a CSS variable is used.</p>\n","isPage":false,"text":"\nIt&#x27;s very hard to determine if a value is static or dynamic. We decided to always generate CSS variables to be on the safe side\nand add errors if we detect that a value is static but a CSS variable is used.\n","title":"Why does next-yak always generate CSS variables when the values are static references that are known at build time?","titles":["FAQ"]},"7":{"href":"/faq#can-i-use-next-yak-with-typescript","html":"\n<p>Yes, of course. <code>next-yak</code> is fully type safe.</p>\n","isPage":false,"text":"\nYes, of course. next-yak is fully type safe.\n","title":"Can I use next-yak with TypeScript?","titles":["FAQ"]},"8":{"href":"/faq#can-i-contribute-to-next-yak","html":"\n<p>Yes, of course. We are happy about every contribution. Just write an issue or a pull request <a href=\"https://github.com/jantimon/next-yak\">here</a></p>","isPage":false,"text":"\nYes, of course. We are happy about every contribution. Just write an issue or a pull request here","title":"Can I contribute to next-yak?","titles":["FAQ"]},"9":{"href":"/features#features","html":"</header>\n<p>next-yak is a featured packed static CSS-in-JS framework with a minimal runtime aspect.</p>\n","isPage":true,"text":"\nnext-yak is a featured packed static CSS-in-JS framework with a minimal runtime aspect.\n","title":"Features","titles":[]},"10":{"href":"/features#table-of-contents","html":"\n<ol>\n<li><a href=\"#static-css\">Static CSS</a></li>\n<li><a href=\"#dynamic-styles\">Dynamic styles</a></li>\n<li><a href=\"#compatible-with-utility-first-css-frameworks-eg-tailwind\">Compatible with utility-first CSS frameworks (e.g. Tailwind)</a></li>\n<li><a href=\"#animations\">Animations</a></li>\n<li><a href=\"#mixins\">Mixins</a></li>\n<li><a href=\"#automatic-css-variables\">Automatic CSS variables</a></li>\n<li><a href=\"#theming\">Theming</a></li>\n<li><a href=\"#css-prop\">CSS Prop</a></li>\n</ol>\n","isPage":false,"text":"\n\nStatic CSS\nDynamic styles\nCompatible with utility-first CSS frameworks (e.g. Tailwind)\nAnimations\nMixins\nAutomatic CSS variables\nTheming\nCSS Prop\n\n","title":"Table of contents","titles":["Features"]},"11":{"href":"/features#static-css","html":"\n<p>At the heart of next-yak lies the extraction of static CSS.\nYou can write your styles as you normally would with styled-components.\nDuring build time, these styles are extracted, and your component is assigned a class that encapsulates these styles.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Headline</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">h1</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-weight: bold;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: rgba(253, 29, 29, 1);</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#DCBDFB\"> Component</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> () </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  return</span><span style=\"color:#ADBAC7\"> &lt;</span><span style=\"color:#8DDB8C\">Headline</span><span style=\"color:#ADBAC7\">&gt;Hello there!&lt;/</span><span style=\"color:#8DDB8C\">Headline</span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<details><summary>See transformed output</summary><div class=\"code-group\"><div data-title=\"input\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Headline</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">h1</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-weight: bold;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: rgba(253, 29, 29, 1);</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"output javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Headline</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">h1</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;.Headline&#x27;</span><span style=\"color:#ADBAC7\">);</span></span></code></pre></figure></div><div data-title=\"output CSS\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\"><code data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">.Headline</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  font-size</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">2</span><span style=\"color:#F47067\">rem</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  font-weight</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">bold</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  color</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">rgba</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">253</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#6CB6FF\">29</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#6CB6FF\">29</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div></div></details>\n","isPage":false,"text":"\nAt the heart of next-yak lies the extraction of static CSS.\nYou can write your styles as you normally would with styled-components.\nDuring build time, these styles are extracted, and your component is assigned a class that encapsulates these styles.\nimport { styled } from &#x27;next-yak&#x27;;\n \nconst Headline = styled.h1`\n  font-size: 2rem;\n  font-weight: bold;\n  color: rgba(253, 29, 29, 1);\n`;\n \nconst Component = () =&gt; {\n  return &lt;Headline&gt;Hello there!&lt;/Headline&gt;\n}\nSee transformed outputconst Headline = styled.h1`\n  font-size: 2rem;\n  font-weight: bold;\n  color: rgba(253, 29, 29, 1);\n`;const Headline = styled.h1(&#x27;.Headline&#x27;);.Headline {\n  font-size: 2rem;\n  font-weight: bold;\n  color: rgba(253, 29, 29, 1);\n}\n","title":"Static CSS","titles":["Features"]},"12":{"href":"/features#dynamic-styles","html":"\n<p>The static functionality itself is already very useful, but the bread and butter is an easy way to\ncreate dynamic styles. Styled-components popularized the approach of using props to drive dynamic CSS parts.\nWith next-yak, you can use the exact same familiar API.</p>\n<div class=\"code-group\"><div data-title=\"javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { css, styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Paragraph</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">p</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  background: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;#BF4F74&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;white&quot;};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> </span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">      color: white; </span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    `</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> </span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">      color: #BF4F74</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    `};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-weight: bold;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#DCBDFB\"> Component</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> () </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  return</span><span style=\"color:#ADBAC7\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    &lt;&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      &lt;</span><span style=\"color:#8DDB8C\">Paragraph</span><span style=\"color:#6CB6FF\"> $primary</span><span style=\"color:#ADBAC7\">&gt;Hello there primary!&lt;/</span><span style=\"color:#8DDB8C\">Paragraph</span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      &lt;</span><span style=\"color:#8DDB8C\">Paragraph</span><span style=\"color:#ADBAC7\">&gt;Hello there non-primary!&lt;/</span><span style=\"color:#8DDB8C\">Paragraph</span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    &lt;/&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  );</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div><div data-title=\"typescript\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"twoslash lsp\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">css</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">)</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">StaticCSSProp</span><span> </span><span style=\"color:#ADBAC7\">(+</span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">overload</span><span style=\"color:#ADBAC7\">)</span></span><div class=\"twoslash-popup-jsdoc\"><p>css() runtime factory of css``</p>\n<p>/!\\ next-yak transpiles css<code> and styled</code></p>\n<p>This changes the typings of the css<code> and styled</code> functions. During development the user of next-yak wants to work with the typings BEFORE compilation.</p>\n<p>Therefore this is only an internal function only and it must be cast to any before exported to the user.</p></div></div></div><span class=\"twoslash-target\">css</span></span></span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\"> }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">Paragraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">Paragraph</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">p</span><span style=\"color:#ADBAC7\">: StyledLiteral</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.DetailedHTMLProps</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">, HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">p</span></span></span><span style=\"color:#ADBAC7\">&lt;{</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">primary</span></span></span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span> </span><span style=\"color:#ADBAC7\">}&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">background: ${</span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">primary</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;#BF4F74&quot;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">:</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;white&quot;};</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">${</span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">primary</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> </span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">css</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">)</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">StaticCSSProp</span><span> </span><span style=\"color:#ADBAC7\">(+</span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">overload</span><span style=\"color:#ADBAC7\">)</span></span><div class=\"twoslash-popup-jsdoc\"><p>css() runtime factory of css``</p>\n<p>/!\\ next-yak transpiles css<code> and styled</code></p>\n<p>This changes the typings of the css<code> and styled</code> functions. During development the user of next-yak wants to work with the typings BEFORE compilation.</p>\n<p>Therefore this is only an internal function only and it must be cast to any before exported to the user.</p></div></div></div><span class=\"twoslash-target\">css</span></span></span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>      </span><span style=\"color:#96D0FF\">color: white;</span><span> </span></span>\n<span data-line=\"\"><span>    </span><span style=\"color:#96D0FF\">`</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">:</span><span style=\"color:#96D0FF\"> </span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">css</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">)</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">StaticCSSProp</span><span> </span><span style=\"color:#ADBAC7\">(+</span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">overload</span><span style=\"color:#ADBAC7\">)</span></span><div class=\"twoslash-popup-jsdoc\"><p>css() runtime factory of css``</p>\n<p>/!\\ next-yak transpiles css<code> and styled</code></p>\n<p>This changes the typings of the css<code> and styled</code> functions. During development the user of next-yak wants to work with the typings BEFORE compilation.</p>\n<p>Therefore this is only an internal function only and it must be cast to any before exported to the user.</p></div></div></div><span class=\"twoslash-target\">css</span></span></span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>      </span><span style=\"color:#96D0FF\">color: #BF4F74</span></span>\n<span data-line=\"\"><span>    </span><span style=\"color:#96D0FF\">`};</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">font-size: 2rem;</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">font-weight: bold;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">Component</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Element</span></span></div></div><span class=\"twoslash-target\">Component</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">return</span><span> </span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span>    </span><span style=\"color:#ADBAC7\">&lt;&gt;</span></span>\n<span data-line=\"\"><span>      </span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#8DDB8C\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">Paragraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">Paragraph</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">primary</span></span></span><span style=\"color:#ADBAC7\">&gt;Hello there primary!&lt;/</span><span style=\"color:#8DDB8C\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">Paragraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">Paragraph</span></span></span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span>      </span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#8DDB8C\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">Paragraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">Paragraph</span></span></span><span style=\"color:#ADBAC7\">&gt;Hello there non-primary!&lt;/</span><span style=\"color:#8DDB8C\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">Paragraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">Paragraph</span></span></span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span>    </span><span style=\"color:#ADBAC7\">&lt;/&gt;</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div></div>\n<p>The CSS templates create their own class which is referenced during runtime when the function returns them.\nThe other function which returns strings directly without setting new CSS properties, will be changed to\na CSS variable, which is set on the element itself directly based on the functions return value.</p>\n<details><summary>See transformed output</summary><div class=\"code-group\"><div data-title=\"input\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Paragraph</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">p</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  background: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;#BF4F74&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;white&quot;};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> </span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">      color: white; </span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    `</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> </span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">      color: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    `}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-weight: bold;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"output javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Paragraph</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">p</span><span style=\"color:#ADBAC7\">( </span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  &#x27;.Paragraph&#x27;</span><span style=\"color:#ADBAC7\">, </span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props.$primary </span><span style=\"color:#F47067\">?</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;.propsprimary_0&#x27;</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">:</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;.not_propsprimary_1&#x27;</span><span style=\"color:#ADBAC7\">), </span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    style: { </span><span style=\"color:#96D0FF\">&#x27;--var1&#x27;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#F69D50\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props.$primary </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> &quot;#BF4F74&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;white&quot;</span><span style=\"color:#ADBAC7\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">);</span></span></code></pre></figure></div><div data-title=\"output CSS\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\"><code data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">.Paragraph</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  background</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">var</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">--var1</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  &amp;:where(.propsprimary_0) {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">    color</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">white</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  &amp;</span><span style=\"color:#6CB6FF\">:where</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">.not_propsprimary_1</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">    color</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">#BF4F74</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  font-size</span><span style=\"color:#ADBAC7\">: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  font-weight</span><span style=\"color:#ADBAC7\">: bold;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div></div></details>\n","isPage":false,"text":"\nThe static functionality itself is already very useful, but the bread and butter is an easy way to\ncreate dynamic styles. Styled-components popularized the approach of using props to drive dynamic CSS parts.\nWith next-yak, you can use the exact same familiar API.\nimport { css, styled } from &#x27;next-yak&#x27;;\n \nconst Paragraph = styled.p`\n  background: ${props =&gt; props.$primary ? &quot;#BF4F74&quot; : &quot;white&quot;};\n  ${props =&gt; props.$primary ? \n    css`\n      color: white; \n    ` : \n    css`\n      color: #BF4F74\n    `};\n  font-size: 2rem;\n  font-weight: bold;\n`;\n \nconst Component = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Paragraph $primary&gt;Hello there primary!&lt;/Paragraph&gt;\n      &lt;Paragraph&gt;Hello there non-primary!&lt;/Paragraph&gt;\n    &lt;/&gt;\n  );\n}import { function css(styles: TemplateStringsArray): StaticCSSProp (+1 overload)css() runtime factory of css``\n/!\\ next-yak transpiles css and styled\nThis changes the typings of the css and styled functions. During development the user of next-yak wants to work with the typings BEFORE compilation.\nTherefore this is only an internal function only and it must be cast to any before exported to the user.css, const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled } from &#x27;next-yak&#x27;;\n \nconst const Paragraph: React.FunctionComponent&lt;{\n  $primary?: boolean | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}Paragraph = const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled.p: StyledLiteral&lt;React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLParagraphElement&gt;, HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}p&lt;{ $primary?: boolean | undefined$$primary?: boolean | undefinedprimary?: boolean }&gt;`\n  background: ${props: React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt; &amp; {\n  $primary?: boolean | undefined;\n} &amp; {\n  ...;\n}props =&gt; props: React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt; &amp; {\n  $primary?: boolean | undefined;\n} &amp; {\n  ...;\n}props.$primary?: boolean | undefined$$primary?: boolean | undefinedprimary ? &quot;#BF4F74&quot; : &quot;white&quot;};\n  ${props: React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt; &amp; {\n  $primary?: boolean | undefined;\n} &amp; {\n  ...;\n}props =&gt; props: React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt; &amp; {\n  $primary?: boolean | undefined;\n} &amp; {\n  ...;\n}props.$primary?: boolean | undefined$$primary?: boolean | undefinedprimary ? \n    function css(styles: TemplateStringsArray): StaticCSSProp (+1 overload)css() runtime factory of css``\n/!\\ next-yak transpiles css and styled\nThis changes the typings of the css and styled functions. During development the user of next-yak wants to work with the typings BEFORE compilation.\nTherefore this is only an internal function only and it must be cast to any before exported to the user.css`\n      color: white; \n    ` : \n    function css(styles: TemplateStringsArray): StaticCSSProp (+1 overload)css() runtime factory of css``\n/!\\ next-yak transpiles css and styled\nThis changes the typings of the css and styled functions. During development the user of next-yak wants to work with the typings BEFORE compilation.\nTherefore this is only an internal function only and it must be cast to any before exported to the user.css`\n      color: #BF4F74\n    `};\n  font-size: 2rem;\n  font-weight: bold;\n`;\n \nconst const Component: () =&gt; React.JSX.ElementComponent = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;const Paragraph: React.FunctionComponent&lt;{\n  $primary?: boolean | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}Paragraph $primary?: boolean | undefined$$primary?: boolean | undefinedprimary&gt;Hello there primary!&lt;/const Paragraph: React.FunctionComponent&lt;{\n  $primary?: boolean | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}Paragraph&gt;\n      &lt;const Paragraph: React.FunctionComponent&lt;{\n  $primary?: boolean | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}Paragraph&gt;Hello there non-primary!&lt;/const Paragraph: React.FunctionComponent&lt;{\n  $primary?: boolean | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}Paragraph&gt;\n    &lt;/&gt;\n  );\n}\nThe CSS templates create their own class which is referenced during runtime when the function returns them.\nThe other function which returns strings directly without setting new CSS properties, will be changed to\na CSS variable, which is set on the element itself directly based on the functions return value.\nSee transformed outputconst Paragraph = styled.p`\n  background: ${props =&gt; props.$primary ? &quot;#BF4F74&quot; : &quot;white&quot;};\n  ${props =&gt; props.$primary ? \n    css`\n      color: white; \n    ` : \n    css`\n      color: #BF4F74;\n    `}\n  font-size: 2rem;\n  font-weight: bold;\n`;const Paragraph = styled.p( \n  &#x27;.Paragraph&#x27;, \n  props =&gt; props.$primary ? css(&#x27;.propsprimary_0&#x27;) : css(&#x27;.not_propsprimary_1&#x27;), \n  {\n    style: { &#x27;--var1&#x27;: props =&gt; props.$primary ? &quot;#BF4F74&quot; : &quot;white&quot; }\n  }\n);.Paragraph {\n  background: var(--var1);\n \n  &amp;:where(.propsprimary_0) {\n    color: white;\n  }\n \n  &amp;:where(.not_propsprimary_1) {\n    color: #BF4F74;\n  }\n \n  font-size: 2rem;\n  font-weight: bold;\n}\n","title":"Dynamic styles","titles":["Features"]},"13":{"href":"/features#compatible-with-utility-first-css-frameworks-eg-tailwind","html":"\n<p>next-yak is fully compatible with utility-first CSS frameworks like Tailwind. Just use the <code>atoms</code> function to\nreference classes from these frameworks.</p>\n<div class=\"code-group\"><div data-title=\"javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled, atoms } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Header</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">nav</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  ${</span><span style=\"color:#96D0FF\">({</span><span style=\"color:#6CB6FF\">$variant</span><span style=\"color:#96D0FF\">}) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> $variant</span><span style=\"color:#F47067\"> ===</span><span style=\"color:#96D0FF\"> &quot;primary&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    ?</span><span style=\"color:#DCBDFB\"> atoms</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#96D0FF\">&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;</span><span style=\"color:#96D0FF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    :</span><span style=\"color:#DCBDFB\"> atoms</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#96D0FF\">&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;</span><span style=\"color:#96D0FF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span></code></pre></figure></div><div data-title=\"typescript\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"twoslash lsp\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">atoms</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">atoms</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">className</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>Allows to use atomic CSS classes in a styled or css block</p></div></div></div><span class=\"twoslash-target\">atoms</span></span></span><span style=\"color:#ADBAC7\"> }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">Header</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">Header</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">nav</span><span style=\"color:#ADBAC7\">: StyledLiteral</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.DetailedHTMLProps</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">, HTMLElement</span><span style=\"color:#F47067\">&gt;&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">attrs</span><span style=\"color:#ADBAC7\">: &lt;</span><span style=\"color:#F69D50\">TAttrsIn_77</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{},</span><span> </span><span style=\"color:#F69D50\">TAttrsOut_77</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">AttrsMerged</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">AttrsMerged</span><span style=\"color:#ADBAC7\">&lt;...&gt;&gt;(</span><span style=\"color:#F69D50\">attrs</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">Attrs</span><span style=\"color:#ADBAC7\">&lt;...&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">StyledLiteral</span><span style=\"color:#F47067\">&lt;...&gt;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">nav</span></span></span><span style=\"color:#ADBAC7\">&lt;{</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;primary&#x27;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;secondary&#x27;</span><span> </span><span style=\"color:#ADBAC7\">}&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">${</span><span style=\"color:#96D0FF\">({</span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#96D0FF\">})</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">===</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">atoms</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">atoms</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">[])</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">className</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>Allows to use atomic CSS classes in a styled or css block</p></div></div></div><span class=\"twoslash-target\">atoms</span></span></span><span style=\"color:#96D0FF\">(</span><span style=\"color:#96D0FF\">&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;</span><span style=\"color:#96D0FF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    </span><span style=\"color:#F47067\">:</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">atoms</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">atoms</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">[])</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">className</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>Allows to use atomic CSS classes in a styled or css block</p></div></div></div><span class=\"twoslash-target\">atoms</span></span></span><span style=\"color:#96D0FF\">(</span><span style=\"color:#96D0FF\">&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;</span><span style=\"color:#96D0FF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  </span><span style=\"color:#96D0FF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span></code></pre></figure></div></div>\n<details><summary>See transformed output</summary><div class=\"code-group\"><div data-title=\"input\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Header</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">nav</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  ${</span><span style=\"color:#96D0FF\">({</span><span style=\"color:#6CB6FF\">$variant</span><span style=\"color:#96D0FF\">}) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> $variant</span><span style=\"color:#F47067\"> ===</span><span style=\"color:#96D0FF\"> &quot;primary&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    ?</span><span style=\"color:#DCBDFB\"> atoms</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#96D0FF\">&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;</span><span style=\"color:#96D0FF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    :</span><span style=\"color:#DCBDFB\"> atoms</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#96D0FF\">&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;</span><span style=\"color:#96D0FF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span></code></pre></figure></div><div data-title=\"output javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Header</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">nav</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;.Header&#x27;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  ({</span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">}) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> $variant </span><span style=\"color:#F47067\">===</span><span style=\"color:#96D0FF\"> &quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    ?</span><span style=\"color:#DCBDFB\"> atoms</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;</span><span style=\"color:#ADBAC7\">) </span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    :</span><span style=\"color:#DCBDFB\"> atoms</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;</span><span style=\"color:#ADBAC7\">))</span></span></code></pre></figure></div></div></details>\n","isPage":false,"text":"\nnext-yak is fully compatible with utility-first CSS frameworks like Tailwind. Just use the atoms function to\nreference classes from these frameworks.\nimport { styled, atoms } from &#x27;next-yak&#x27;;\n \nconst Header = styled.nav`\n  ${({$variant}) =&gt; $variant === &quot;primary&quot;\n    ? atoms(&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;)\n    : atoms(&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;)\n  }\n`import { const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled, const atoms: (...atoms: string[]) =&gt; () =&gt; {\n  className: string;\n}Allows to use atomic CSS classes in a styled or css blockatoms } from &#x27;next-yak&#x27;;\n \nconst const Header: React.FunctionComponent&lt;{\n  $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined;\n} &amp; React.ClassAttributes&lt;HTMLElement&gt; &amp; React.HTMLAttributes&lt;HTMLElement&gt;&gt; &amp; {\n  ...;\n}Header = const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled.nav: StyledLiteral&lt;React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLElement&gt;, HTMLElement&gt;&gt; &amp; {\n  attrs: &lt;TAttrsIn_77 extends object = {}, TAttrsOut_77 extends AttrsMerged&lt;...&gt; = AttrsMerged&lt;...&gt;&gt;(attrs: Attrs&lt;...&gt;) =&gt; StyledLiteral&lt;...&gt;;\n}nav&lt;{ $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant?: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant?: &#x27;primary&#x27; | &#x27;secondary&#x27; }&gt;`\n  ${({$variant: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant}) =&gt; $variant: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant === &quot;primary&quot;\n    ? function atoms(...atoms: string[]): () =&gt; {\n  className: string;\n}Allows to use atomic CSS classes in a styled or css blockatoms(&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;)\n    : function atoms(...atoms: string[]): () =&gt; {\n  className: string;\n}Allows to use atomic CSS classes in a styled or css blockatoms(&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;)\n  }\n`\nSee transformed outputconst Header = styled.nav`\n  ${({$variant}) =&gt; $variant === &quot;primary&quot;\n    ? atoms(&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;)\n    : atoms(&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;)\n  }\n`const Header = styled.nav(&#x27;.Header&#x27;,\n  ({$variant}) =&gt; $variant === &quot;primary&quot; \n    ? atoms(&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;) \n    : atoms(&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;))\n","title":"Compatible with utility-first CSS frameworks (e.g. Tailwind)","titles":["Features"]},"14":{"href":"/features#animations","html":"\n<p>In order to create CSS animations, you can use the <code>keyframes</code> API and specify the keyframes for the animation\nyou want to create. This can be used in your animation declarations within the same file.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { keyframes, styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> fadeIn</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> keyframes</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  0% {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    opacity: 0;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  100% {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    opacity: 1;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> FadeInButton</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  animation: 1s ${</span><span style=\"color:#ADBAC7\">fadeIn</span><span style=\"color:#96D0FF\">} ease-out;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span></code></pre></figure>\n<details><summary>See transformed output</summary><div class=\"code-group\"><div data-title=\"input\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> fadeIn</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> keyframes</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  0% {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    opacity: 0;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  100% {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    opacity: 1;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> FadeInButton</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  animation: 1s ${</span><span style=\"color:#ADBAC7\">fadeIn</span><span style=\"color:#96D0FF\">} ease-out;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span></code></pre></figure></div><div data-title=\"output javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> fadeIn</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> keyframes</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;fadeIn&#x27;</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> FadeInButton</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;.FadeInButton&#x27;</span><span style=\"color:#ADBAC7\">, {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  style: { </span><span style=\"color:#96D0FF\">&quot;--yakVar1&quot;</span><span style=\"color:#ADBAC7\">: fadeIn }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span></span></code></pre></figure></div><div data-title=\"output CSS\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\"><code data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">@keyframes</span><span style=\"color:#F69D50\"> fadeIn</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  0%</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">    opacity</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  100%</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">    opacity</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">.FadeInButton</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  animation</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#F47067\">s</span><span style=\"color:#6CB6FF\"> var</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">--yakVar1</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#6CB6FF\">ease-out</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div></div></details>\n","isPage":false,"text":"\nIn order to create CSS animations, you can use the keyframes API and specify the keyframes for the animation\nyou want to create. This can be used in your animation declarations within the same file.\nimport { keyframes, styled } from &#x27;next-yak&#x27;;\n \nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n`\n \nconst FadeInButton = styled.button`\n  animation: 1s ${fadeIn} ease-out;\n`\nSee transformed outputconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n`\n \nconst FadeInButton = styled.button`\n  animation: 1s ${fadeIn} ease-out;\n`const fadeIn = keyframes(&#x27;fadeIn&#x27;)\n \nconst FadeInButton = styled.button(&#x27;.FadeInButton&#x27;, {\n  style: { &quot;--yakVar1&quot;: fadeIn }\n})@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n \n.FadeInButton {\n  animation: 1s var(--yakVar1) ease-out;\n}\n","title":"Animations","titles":["Features"]},"15":{"href":"/features#mixins","html":"\n<p>Mixins are declarations of the <code>css</code> utility function. You can declare a variable which holds the css declaration and\nuse it inside your <code>styled</code> declarations.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { css, styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> mixin</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: green;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> MyComp</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  background-color: yellow;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  ${</span><span style=\"color:#ADBAC7\">mixin</span><span style=\"color:#96D0FF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<p>You can also make it dynamic, where the props are passed to the mixin.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { css, styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> mixin</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: ${</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#96D0FF\">) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$green</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &#x27;green&#x27;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &#x27;blue&#x27;};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> MyComp</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  background-color: yellow;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  ${</span><span style=\"color:#ADBAC7\">mixin</span><span style=\"color:#96D0FF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<p>During build time the CSS literal is converted to a class name (or multiple class names) and can be referenced by other CSS styles.</p>\n<details><summary>See transformed output</summary><div class=\"code-group\"><div data-title=\"input\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> mixin</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: ${</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#96D0FF\">) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$green</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &#x27;green&#x27;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &#x27;blue&#x27;};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> MyComp</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  background-color: yellow;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  ${</span><span style=\"color:#ADBAC7\">mixin</span><span style=\"color:#96D0FF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"output javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> mixin</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;mixin_0&#x27;</span><span style=\"color:#ADBAC7\">, {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  style: {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    &quot;--yakVar1&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#F69D50\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props.$green </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> &#x27;green&#x27;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &#x27;blue&#x27;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">});</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> MyComp</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;MyComp&#x27;</span><span style=\"color:#ADBAC7\">, mixin);</span></span></code></pre></figure></div><div data-title=\"output CSS\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\"><code data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">.mixin_0</span><span style=\"color:#ADBAC7\"> { </span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  color</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">var</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">--yakVar1</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">.MyComp</span><span style=\"color:#ADBAC7\"> { </span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  background-color</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">yellow</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div></div></details>\n","isPage":false,"text":"\nMixins are declarations of the css utility function. You can declare a variable which holds the css declaration and\nuse it inside your styled declarations.\nimport { css, styled } from &#x27;next-yak&#x27;;\n \nconst mixin = css`\n  color: green;\n`;\n \nconst MyComp = styled.div`\n  background-color: yellow;\n  ${mixin}\n`;\nYou can also make it dynamic, where the props are passed to the mixin.\nimport { css, styled } from &#x27;next-yak&#x27;;\n \nconst mixin = css`\n  color: ${(props) =&gt; props.$green ? &#x27;green&#x27; : &#x27;blue&#x27;};\n`;\n \nconst MyComp = styled.div`\n  background-color: yellow;\n  ${mixin}\n`;\nDuring build time the CSS literal is converted to a class name (or multiple class names) and can be referenced by other CSS styles.\nSee transformed outputconst mixin = css`\n  color: ${(props) =&gt; props.$green ? &#x27;green&#x27; : &#x27;blue&#x27;};\n`;\n \nconst MyComp = styled.div`\n  background-color: yellow;\n  ${mixin}\n`;const mixin = css(&#x27;mixin_0&#x27;, {\n  style: {\n    &quot;--yakVar1&quot;: props =&gt; props.$green ? &#x27;green&#x27; : &#x27;blue&#x27;\n  },\n});\n \nconst MyComp = styled.div(&#x27;MyComp&#x27;, mixin);.mixin_0 { \n  color: var(--yakVar1);\n}\n \n.MyComp { \n  background-color: yellow;\n}\n","title":"Mixins","titles":["Features"]},"16":{"href":"/features#automatic-css-variables","html":"\n<p>You may noticed that we sometimes used css`` and sometimes just a literal string. If the property name is already\npresent and you want to have dynamic values of that property, you can just use literal strings. These get transformed into CSS variables during build time.</p>\n<div class=\"code-group\"><div data-title=\"javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Box</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-size: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\"> ===</span><span style=\"color:#96D0FF\"> &quot;primary&quot;</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;2rem&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;1rem&quot;</span><span style=\"color:#96D0FF\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$color</span><span style=\"color:#96D0FF\">};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  display: flex;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span></code></pre></figure></div><div data-title=\"typescript\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"twoslash lsp\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\"> }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">Box</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$color</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLDivElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLDivElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">Box</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">div</span><span style=\"color:#ADBAC7\">: StyledLiteral</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.DetailedHTMLProps</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLDivElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">, HTMLDivElement</span><span style=\"color:#F47067\">&gt;&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">attrs</span><span style=\"color:#ADBAC7\">: &lt;</span><span style=\"color:#F69D50\">TAttrsIn_39</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{},</span><span> </span><span style=\"color:#F69D50\">TAttrsOut_39</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">AttrsMerged</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">AttrsMerged</span><span style=\"color:#ADBAC7\">&lt;...&gt;&gt;(</span><span style=\"color:#F69D50\">attrs</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">Attrs</span><span style=\"color:#ADBAC7\">&lt;...&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">StyledLiteral</span><span style=\"color:#F47067\">&lt;...&gt;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">div</span></span></span><span style=\"color:#ADBAC7\">&lt;{</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$color</span><span style=\"color:#ADBAC7\">: string</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$color</span><span style=\"color:#ADBAC7\">: string</span></span></div></div><span class=\"twoslash-target\">color</span></span></span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span> </span><span style=\"color:#ADBAC7\">}&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">font-size: ${</span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLDivElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLDivElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$color</span><span style=\"color:#ADBAC7\">: string;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#ADBAC7\">: YakTheme;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLDivElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLDivElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$color</span><span style=\"color:#ADBAC7\">: string;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#ADBAC7\">: YakTheme;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">===</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;2rem&quot;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">:</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;1rem&quot;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">};</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">color: ${</span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLDivElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLDivElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$color</span><span style=\"color:#ADBAC7\">: string;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#ADBAC7\">: YakTheme;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLDivElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLDivElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$color</span><span style=\"color:#ADBAC7\">: string;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#ADBAC7\">: YakTheme;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$color</span><span style=\"color:#ADBAC7\">: string</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$color</span><span style=\"color:#ADBAC7\">: string</span></span></div></div><span class=\"twoslash-target\">color</span></span></span><span style=\"color:#96D0FF\">};</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">display: flex;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span></code></pre></figure></div></div>\n<p>The value of the CSS variable is set via the style property of the component, ensuring no interference with potential CSS variable names that share the same name.</p>\n<details><summary>See transformed output</summary><div class=\"code-group\"><div data-title=\"input\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Box</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-size: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\"> ===</span><span style=\"color:#96D0FF\"> &quot;primary&quot;</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;2rem&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;1rem&quot;</span><span style=\"color:#96D0FF\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$color</span><span style=\"color:#96D0FF\">};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  display: flex;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span></code></pre></figure></div><div data-title=\"output javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Box</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;.Box&#x27;</span><span style=\"color:#ADBAC7\">, {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  style: { </span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    &#x27;--var1&#x27;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#F69D50\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props.$variant </span><span style=\"color:#F47067\">===</span><span style=\"color:#96D0FF\"> &quot;primary&quot;</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;2rem&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;1rem&quot;</span><span style=\"color:#ADBAC7\">, </span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    &#x27;--var2&#x27;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#F69D50\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props.$color </span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span></span></code></pre></figure></div><div data-title=\"output CSS\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\"><code data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">.Box</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  font-size</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">var</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">--var1</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  color</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">var</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">--var2</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  display</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">flex</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div></div></details>\n","isPage":false,"text":"\nYou may noticed that we sometimes used css`` and sometimes just a literal string. If the property name is already\npresent and you want to have dynamic values of that property, you can just use literal strings. These get transformed into CSS variables during build time.\nimport { styled } from &#x27;next-yak&#x27;;\n \nconst Box = styled.div`\n  font-size: ${props =&gt; props.$variant === &quot;primary&quot; ? &quot;2rem&quot; : &quot;1rem&quot; };\n  color: ${props =&gt; props.$color};\n  display: flex;\n`import { const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled } from &#x27;next-yak&#x27;;\n \nconst const Box: React.FunctionComponent&lt;{\n  $variant: &quot;primary&quot; | &quot;secondary&quot;;\n  $color: string;\n} &amp; React.ClassAttributes&lt;HTMLDivElement&gt; &amp; React.HTMLAttributes&lt;HTMLDivElement&gt;&gt; &amp; {\n  ...;\n}Box = const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled.div: StyledLiteral&lt;React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement&gt;, HTMLDivElement&gt;&gt; &amp; {\n  attrs: &lt;TAttrsIn_39 extends object = {}, TAttrsOut_39 extends AttrsMerged&lt;...&gt; = AttrsMerged&lt;...&gt;&gt;(attrs: Attrs&lt;...&gt;) =&gt; StyledLiteral&lt;...&gt;;\n}div&lt;{ $variant: &quot;primary&quot; | &quot;secondary&quot;$$variant: &quot;primary&quot; | &quot;secondary&quot;variant: &quot;primary&quot; | &quot;secondary&quot;, $color: string$$color: stringcolor: string }&gt;`\n  font-size: ${props: React.ClassAttributes&lt;HTMLDivElement&gt; &amp; React.HTMLAttributes&lt;HTMLDivElement&gt; &amp; {\n  $variant: &quot;primary&quot; | &quot;secondary&quot;;\n  $color: string;\n} &amp; {\n  theme: YakTheme;\n}props =&gt; props: React.ClassAttributes&lt;HTMLDivElement&gt; &amp; React.HTMLAttributes&lt;HTMLDivElement&gt; &amp; {\n  $variant: &quot;primary&quot; | &quot;secondary&quot;;\n  $color: string;\n} &amp; {\n  theme: YakTheme;\n}props.$variant: &quot;primary&quot; | &quot;secondary&quot;$$variant: &quot;primary&quot; | &quot;secondary&quot;variant === &quot;primary&quot; ? &quot;2rem&quot; : &quot;1rem&quot; };\n  color: ${props: React.ClassAttributes&lt;HTMLDivElement&gt; &amp; React.HTMLAttributes&lt;HTMLDivElement&gt; &amp; {\n  $variant: &quot;primary&quot; | &quot;secondary&quot;;\n  $color: string;\n} &amp; {\n  theme: YakTheme;\n}props =&gt; props: React.ClassAttributes&lt;HTMLDivElement&gt; &amp; React.HTMLAttributes&lt;HTMLDivElement&gt; &amp; {\n  $variant: &quot;primary&quot; | &quot;secondary&quot;;\n  $color: string;\n} &amp; {\n  theme: YakTheme;\n}props.$color: string$$color: stringcolor};\n  display: flex;\n`\nThe value of the CSS variable is set via the style property of the component, ensuring no interference with potential CSS variable names that share the same name.\nSee transformed outputconst Box = styled.div`\n  font-size: ${props =&gt; props.$variant === &quot;primary&quot; ? &quot;2rem&quot; : &quot;1rem&quot; };\n  color: ${props =&gt; props.$color};\n  display: flex;\n`const Box = styled.div(&#x27;.Box&#x27;, {\n  style: { \n    &#x27;--var1&#x27;: props =&gt; props.$variant === &quot;primary&quot; ? &quot;2rem&quot; : &quot;1rem&quot;, \n    &#x27;--var2&#x27;: props =&gt; props.$color \n  }\n}).Box {\n  font-size: var(--var1);\n  color: var(--var2);\n  display: flex;\n}\n","title":"Automatic CSS variables","titles":["Features"]},"17":{"href":"/features#theming","html":"\n<p>As your application grows, theming becomes increasingly important as a shortcut to pass the same values to components.\nNext-yak integrates it in a hassle free manner that works for both Server Components and Client Components without\na difference in usage for you. Wrap your root with the ThemeProvider and add a <code>yak.context.ts</code> file to your root directory\nand you&#x27;re ready to go.</p>\n<figure data-rehype-pretty-code-figure=\"\"><figcaption data-rehype-pretty-code-title=\"\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\">yak.context.ts</figcaption><pre class=\"twoslash lsp\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">cookies</span></span></div></div><span class=\"twoslash-target\">cookies</span></span></span><span style=\"color:#ADBAC7\"> }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;next/headers&#x27;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">cache</span></span></div></div><span class=\"twoslash-target\">cache</span></span></span><span style=\"color:#ADBAC7\"> }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;react&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">hasHighContrast</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">any</span></span></div></div><span class=\"twoslash-target\">hasHighContrast</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">cache</span></span></div></div><span class=\"twoslash-target\">cache</span></span></span><span style=\"color:#ADBAC7\">(()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    </span><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">cookieStore</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">any</span></span></div></div><span class=\"twoslash-target\">cookieStore</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">cookies</span></span></div></div><span class=\"twoslash-target\">cookies</span></span></span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    </span><span style=\"color:#F47067\">return</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">cookieStore</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">any</span></span></div></div><span class=\"twoslash-target\">cookieStore</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">any</span></span></div></div><span class=\"twoslash-target\">get</span></span></span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;highContrast&quot;</span><span style=\"color:#ADBAC7\">)?.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">any</span></span></div></div><span class=\"twoslash-target\">value</span></span></span><span> </span><span style=\"color:#F47067\">===</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;true&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">});</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">getYakThemeContext</span><span style=\"color:#ADBAC7\">()</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">highContrast</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">any</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">getYakThemeContext</span></span></span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    </span><span style=\"color:#F47067\">return</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        </span><span style=\"color:#768390\">// here we provide a hightContrast to all components</span></span>\n<span data-line=\"\"><span>        </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">highContrast</span><span style=\"color:#ADBAC7\">: any</span></span></div></div><span class=\"twoslash-target\">highContrast</span></span></span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">hasHighContrast</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">any</span></span></div></div><span class=\"twoslash-target\">hasHighContrast</span></span></span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span>    </span><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">declare</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">module</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;next-yak&quot;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    </span><span style=\"color:#F47067\">export</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">interface</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">type</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">ReturnType</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span> </span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">args</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">any</span><span style=\"color:#ADBAC7\">)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">any</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span> </span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">args</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">any</span><span style=\"color:#ADBAC7\">)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">infer</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">R</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">?</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">R</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">any</span></span><div class=\"twoslash-popup-jsdoc\"><p>Obtain the return type of a function type</p></div></div></div><span class=\"twoslash-target\">ReturnType</span></span></span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F47067\">typeof</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">getYakThemeContext</span><span style=\"color:#ADBAC7\">()</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">highContrast</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">any</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">getYakThemeContext</span></span></span><span style=\"color:#ADBAC7\">&gt; { }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Once this context file is in place, you can access the theme props on every component.</p>\n<div class=\"code-group\"><div data-title=\"some-component.jsx\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled, css } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  display: block;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  ${</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#96D0FF\">) </span><span style=\"color:#F47067\">=&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">theme</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">highContrast</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">      ?</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">          color: #000;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        `</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">      :</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">          color: #009688;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        `}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"some-component.tsx\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"twoslash lsp\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">/</span><span style=\"color:#768390\">/@allowUmdGlobalAccess</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ cookies }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;next/headers&#x27;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ cache }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;react&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">hasHighContrast</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">cache</span><span style=\"color:#ADBAC7\">(()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    </span><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">cookieStore</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">cookies</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    </span><span style=\"color:#F47067\">return</span><span> </span><span style=\"color:#ADBAC7\">cookieStore.</span><span style=\"color:#DCBDFB\">get</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;highContrast&quot;</span><span style=\"color:#ADBAC7\">)?.value</span><span> </span><span style=\"color:#F47067\">===</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;true&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">});</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">getYakThemeContext</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    </span><span style=\"color:#F47067\">return</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        </span><span style=\"color:#768390\">// here we provide a hightContrast to all components</span></span>\n<span data-line=\"\"><span>        </span><span style=\"color:#ADBAC7\">highContrast:</span><span> </span><span style=\"color:#DCBDFB\">hasHighContrast</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span>    </span><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">declare</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">module</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;next-yak&quot;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    </span><span style=\"color:#F47067\">export</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">interface</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">ReturnType</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F47067\">typeof</span><span> </span><span style=\"color:#ADBAC7\">getYakThemeContext&gt; { }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// ---cut---</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ styled, css }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">Button</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">display: block;</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">${</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#96D0FF\">)</span><span> </span><span style=\"color:#F47067\">=&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    </span><span style=\"color:#ADBAC7\">props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">theme</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">highContrast</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">      </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#DCBDFB\">css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>          </span><span style=\"color:#96D0FF\">color: #000;</span></span>\n<span data-line=\"\"><span>        </span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">      </span><span style=\"color:#F47067\">:</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#DCBDFB\">css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>          </span><span style=\"color:#96D0FF\">color: #009688;</span></span>\n<span data-line=\"\"><span>        </span><span style=\"color:#96D0FF\">`}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\"><span class=\"twoslash-error\">`</span></span><span style=\"color:#ADBAC7\">;</span></span><div class=\"twoslash-meta-line twoslash-error-line\">## Errors were thrown in the sample, but not included in an error tag\n\nThese errors were not marked as being expected: 2307 7016. \nExpected: // @errors: 2307 7016\n\nCompiler Errors:\n\nindex.tsx\n  [2307] 48 - Cannot find module &#x27;next/headers&#x27; or its corresponding type declarations.\n  [7016] 85 - Could not find a declaration file for module &#x27;react&#x27;. &#x27;/home/runner/work/next-yak/next-yak/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js&#x27; implicitly has an &#x27;any&#x27; type.\n  If the &#x27;react&#x27; package actually exposes this module, consider sending a pull request to amend &#x27;https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react&#x27;</div></code></pre></figure></div></div>\n","isPage":false,"text":"\nAs your application grows, theming becomes increasingly important as a shortcut to pass the same values to components.\nNext-yak integrates it in a hassle free manner that works for both Server Components and Client Components without\na difference in usage for you. Wrap your root with the ThemeProvider and add a yak.context.ts file to your root directory\nand you&#x27;re ready to go.\nyak.context.tsimport { import cookiescookies } from &#x27;next/headers&#x27;\nimport { import cachecache } from &quot;react&quot;;\nconst const hasHighContrast: anyhasHighContrast = import cachecache(() =&gt; {\n    const const cookieStore: anycookieStore = import cookiescookies()\n    return const cookieStore: anycookieStore.anyget(&quot;highContrast&quot;)?.anyvalue === &quot;true&quot;\n});\n \nexport function function getYakThemeContext(): {\n  highContrast: any;\n}getYakThemeContext() {\n    return {\n        // here we provide a hightContrast to all components\n        highContrast: anyhighContrast: const hasHighContrast: anyhasHighContrast()\n    }\n}\n \ndeclare module &quot;next-yak&quot; {\n    export interface YakTheme extends type ReturnType&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: any) =&gt; infer R ? R : anyObtain the return type of a function typeReturnType&lt;typeof function getYakThemeContext(): {\n  highContrast: any;\n}getYakThemeContext&gt; { }\n}\nOnce this context file is in place, you can access the theme props on every component.\nimport { styled, css } from &#x27;next-yak&#x27;;\n \nconst Button = styled.button`\n  display: block;\n  ${(props) =&gt;\n    props.theme.highContrast\n      ? css`\n          color: #000;\n        `\n      : css`\n          color: #009688;\n        `}\n`;//@allowUmdGlobalAccess\nimport { cookies } from &#x27;next/headers&#x27;\nimport { cache } from &quot;react&quot;;\nconst hasHighContrast = cache(() =&gt; {\n    const cookieStore = cookies()\n    return cookieStore.get(&quot;highContrast&quot;)?.value === &quot;true&quot;\n});\n \nexport function getYakThemeContext() {\n    return {\n        // here we provide a hightContrast to all components\n        highContrast: hasHighContrast()\n    }\n}\n \ndeclare module &quot;next-yak&quot; {\n    export interface YakTheme extends ReturnType&lt;typeof getYakThemeContext&gt; { }\n}\n \n// ---cut---\nimport { styled, css } from &#x27;next-yak&#x27;;\n \nconst Button = styled.button`\n  display: block;\n  ${(props) =&gt;\n    props.theme.highContrast\n      ? css`\n          color: #000;\n        `\n      : css`\n          color: #009688;\n        `}\n`;## Errors were thrown in the sample, but not included in an error tag\n\nThese errors were not marked as being expected: 2307 7016. \nExpected: // @errors: 2307 7016\n\nCompiler Errors:\n\nindex.tsx\n  [2307] 48 - Cannot find module &#x27;next/headers&#x27; or its corresponding type declarations.\n  [7016] 85 - Could not find a declaration file for module &#x27;react&#x27;. &#x27;/home/runner/work/next-yak/next-yak/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js&#x27; implicitly has an &#x27;any&#x27; type.\n  If the &#x27;react&#x27; package actually exposes this module, consider sending a pull request to amend &#x27;https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react&#x27;\n","title":"Theming","titles":["Features"]},"18":{"href":"/features#css-prop","html":"\n<p>We support out of the box the <code>css</code> prop which is a shorthand for adding styles to an element. Similiar to inline-styles\nit allows you to write local styles for certain elements on your page. Differently than inline-styles, it allows you to use\nselectors that target wrapped elements.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { css } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#DCBDFB\"> Component</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> () </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  return</span><span style=\"color:#ADBAC7\"> &lt;</span><span style=\"color:#8DDB8C\">div</span><span style=\"color:#6CB6FF\"> css</span><span style=\"color:#F47067\">={</span><span style=\"color:#ADBAC7\">{ color: </span><span style=\"color:#96D0FF\">&#x27;red&#x27;</span><span style=\"color:#ADBAC7\"> }</span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&gt;Hello there!&lt;/</span><span style=\"color:#8DDB8C\">div</span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>It&#x27;s meant for simple styling requirements, where you don&#x27;t have to think about a name for a specialized component.</p>\n","isPage":false,"text":"\nWe support out of the box the css prop which is a shorthand for adding styles to an element. Similiar to inline-styles\nit allows you to write local styles for certain elements on your page. Differently than inline-styles, it allows you to use\nselectors that target wrapped elements.\nimport { css } from &#x27;next-yak&#x27;;\n \nconst Component = () =&gt; {\n  return &lt;div css={{ color: &#x27;red&#x27; }}&gt;Hello there!&lt;/div&gt;\n}\nIt&#x27;s meant for simple styling requirements, where you don&#x27;t have to think about a name for a specialized component.\n","title":"CSS Prop","titles":["Features"]},"19":{"href":"/features#typescript","html":"\n<p>To use it with the correct types just add the following line to the top of the file</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-focused has-highlighted\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span class=\"focused highlighted\" data-line=\"\"><span style=\"color:#768390\">/** </span><span style=\"color:#F47067\">@jsxImportSource</span><span style=\"color:#768390\"> next-yak */</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { css } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#DCBDFB\"> Component</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> () </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  return</span><span style=\"color:#ADBAC7\"> &lt;</span><span style=\"color:#8DDB8C\">div</span><span style=\"color:#6CB6FF\"> css</span><span style=\"color:#F47067\">={</span><span style=\"color:#ADBAC7\">{ color: </span><span style=\"color:#96D0FF\">&#x27;red&#x27;</span><span style=\"color:#ADBAC7\"> }</span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&gt;Hello there!&lt;/</span><span style=\"color:#8DDB8C\">div</span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Or just add this to your <code>tsconfig.json</code> and all your css props will have the correct types.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;compilerOptions&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;jsxImportSource&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;next-yak&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>","isPage":false,"text":"\nTo use it with the correct types just add the following line to the top of the file\n/** @jsxImportSource next-yak */\n \nimport { css } from &#x27;next-yak&#x27;;\n \nconst Component = () =&gt; {\n  return &lt;div css={{ color: &#x27;red&#x27; }}&gt;Hello there!&lt;/div&gt;\n}\nOr just add this to your tsconfig.json and all your css props will have the correct types.\n{\n  &quot;compilerOptions&quot;: {\n    &quot;jsxImportSource&quot;: &quot;next-yak&quot;\n  }\n}","title":"TypeScript","titles":["Features","CSS Prop"]},"20":{"href":"/getting-started#next-yak","html":"</header>\n<p><strong>next-yak</strong> is a CSS-in-JS solution tailored for <a href=\"https://nextjs.org/\">Next.js</a> that seamlessly combines\nthe expressive power of styled-components syntax with efficient build-time extraction of CSS using\nNext.js&#x27;s built-in CSS configuration.</p>\n","isPage":true,"text":"\nnext-yak is a CSS-in-JS solution tailored for Next.js that seamlessly combines\nthe expressive power of styled-components syntax with efficient build-time extraction of CSS using\nNext.js&#x27;s built-in CSS configuration.\n","title":"next-yak","titles":[]},"21":{"href":"/getting-started#installation","html":"\n<div data-vocs-steps=\"true\"><div data-depth=\"3\">","isPage":false,"text":"\n","title":"Installation","titles":["next-yak"]},"22":{"href":"/getting-started#install-the-package","html":"<p>Install next-yak dependency using your favorite package manager.</p><div class=\"code-group\"><div data-title=\"npm\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">npm</span><span style=\"color:#96D0FF\"> i next-yak</span></span></code></pre></figure></div><div data-title=\"pnpm\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">pnpm</span><span style=\"color:#96D0FF\"> i next-yak</span></span></code></pre></figure></div><div data-title=\"yarn\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">yarn</span><span style=\"color:#96D0FF\"> add next-yak</span></span></code></pre></figure></div></div></div><div data-depth=\"3\">","isPage":false,"text":"Install next-yak dependency using your favorite package manager.npm i next-yakpnpm i next-yakyarn add next-yak","title":"Install the package","titles":["next-yak","Installation"]},"23":{"href":"/getting-started#enable-next-yak","html":"<p>Add next-yak to your <code>next.config.mjs</code> or <code>next.config.js</code>:</p><div class=\"code-group\"><div data-title=\"next.config.mjs\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\"><code data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { withYak } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;next-yak/withYak&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> nextConfig</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">  // your next.js config</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> default</span><span style=\"color:#DCBDFB\"> withYak</span><span style=\"color:#F69D50\">(</span><span style=\"color:#ADBAC7\">nextConfig</span><span style=\"color:#F69D50\">)</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"next.config.js\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\"><code data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> { </span><span style=\"color:#6CB6FF\">withYak</span><span style=\"color:#ADBAC7\"> } </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> require</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;next-yak/withYak&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> nextConfig</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">  // your next.js config</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">module</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#6CB6FF\">exports</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> withYak</span><span style=\"color:#ADBAC7\">(nextConfig);</span></span></code></pre></figure></div></div></div><div data-depth=\"3\">","isPage":false,"text":"Add next-yak to your next.config.mjs or next.config.js:import { withYak } from &quot;next-yak/withYak&quot;;\n \nconst nextConfig = {\n  // your next.js config\n};\n \nexport default withYak(nextConfig);const { withYak } = require(&quot;next-yak/withYak&quot;);\n \nconst nextConfig = {\n  // your next.js config\n};\n \nmodule.exports = withYak(nextConfig);","title":"Enable next-yak","titles":["next-yak","Installation"]},"24":{"href":"/getting-started#start-using-next-yak","html":"<p>With the installation and configuration done, you can now use next-yak directly in your components. Here&#x27;s a simple example:</p><figure data-rehype-pretty-code-figure=\"\"><figcaption data-rehype-pretty-code-title=\"\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\">pages/index.tsx</figcaption><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> StyledDiv</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: #333;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  padding: 16px;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  background-color: #f0f0f0;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#DCBDFB\"> HomePage</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  return</span><span style=\"color:#ADBAC7\"> &lt;</span><span style=\"color:#8DDB8C\">StyledDiv</span><span style=\"color:#ADBAC7\">&gt;Hello, next-yak!&lt;/</span><span style=\"color:#8DDB8C\">StyledDiv</span><span style=\"color:#ADBAC7\">&gt;;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> default</span><span style=\"color:#ADBAC7\"> HomePage;</span></span></code></pre></figure><p>You&#x27;re now ready to use next-yak in your Next.js project.</p></div></div>","isPage":false,"text":"With the installation and configuration done, you can now use next-yak directly in your components. Here&#x27;s a simple example:pages/index.tsximport { styled } from &#x27;next-yak&#x27;;\n \nconst StyledDiv = styled.div`\n  color: #333;\n  padding: 16px;\n  background-color: #f0f0f0;\n`;\n \nfunction HomePage() {\n  return &lt;StyledDiv&gt;Hello, next-yak!&lt;/StyledDiv&gt;;\n}\n \nexport default HomePage;You&#x27;re now ready to use next-yak in your Next.js project.","title":"Start using next-yak","titles":["next-yak","Installation"]},"25":{"href":"/how-does-it-work#how-does-it-work","html":"</header>\n<p>This is for the curious minds who want to know how <code>next-yak</code> works under the hood and it&#x27;s not necessary\nto understand it in order to use it.</p>\n","isPage":true,"text":"\nThis is for the curious minds who want to know how next-yak works under the hood and it&#x27;s not necessary\nto understand it in order to use it.\n","title":"How does it work?","titles":[]},"26":{"href":"/how-does-it-work#the-basics","html":"\n<p><code>next-yak</code> has 3 parts:</p>\n<ol>\n<li>The compile time part</li>\n<li>The runtime part</li>\n<li>Optional: Context</li>\n</ol>\n<p>The compile time part is responsible for extracting styles and transforming your code into something that uses\nthe runtime part. The runtime part is responsible for merging styles and props.</p>\n","isPage":false,"text":"\nnext-yak has 3 parts:\n\nThe compile time part\nThe runtime part\nOptional: Context\n\nThe compile time part is responsible for extracting styles and transforming your code into something that uses\nthe runtime part. The runtime part is responsible for merging styles and props.\n","title":"The basics","titles":["How does it work?"]},"27":{"href":"/how-does-it-work#the-compile-time-part","html":"\n<p><code>next-yak</code> uses two webpack loaders to transform your code. The first loader is responsible for transforming the\nusages of the tagged template literals (like <code>styled</code> and <code>css</code>) and the second loader is responsible for transforming\nthe styles into real CSS.</p>\n","isPage":false,"text":"\nnext-yak uses two webpack loaders to transform your code. The first loader is responsible for transforming the\nusages of the tagged template literals (like styled and css) and the second loader is responsible for transforming\nthe styles into real CSS.\n","title":"The compile time part","titles":["How does it work?"]},"28":{"href":"/how-does-it-work#the-first-loader-tsloadercjs","html":"\n<p>The first loader takes in the source code and transforms the tagged template literals into <code>next-yak</code> runtime function\ncalls with the imported styles (from the second loader) as arguments. It also transforms the dynamic parts of the\ntagged template literals into function calls with the properties as argument and adds it as css value to the style object.</p>\n","isPage":false,"text":"\nThe first loader takes in the source code and transforms the tagged template literals into next-yak runtime function\ncalls with the imported styles (from the second loader) as arguments. It also transforms the dynamic parts of the\ntagged template literals into function calls with the properties as argument and adds it as css value to the style object.\n","title":"The first loader","titles":["How does it work?","The compile time part"]},"29":{"href":"/how-does-it-work#add-style-import","html":"\n<p>The first step of the transformation is to add the import statement for the styles. These styles don&#x27;t exist yet, but\nwill be generated by the second loader.</p>\n<figure data-rehype-pretty-code-figure=\"\"><figcaption data-rehype-pretty-code-title=\"\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\">output</figcaption><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> __styleYak </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;./page.yak.module.css!=!./page?./page.yak.module.css&quot;</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<p>This strange looking import string is a poorly documented feature of webpack. It uses the <a href=\"https://webpack.js.org/api/loaders/#inline-matchresource\">Inline matchResource</a> to instrument webpack to use the loaders as if it was a normal <code>.module.css</code> file\nthat points to the current file (<code>./page</code>). In order that this import statement works in next.js, we need to add\na query parameter that ends with <code>.module.css</code>, as this is the way next.js recognizes CSS modules.</p>\n<p>So that means <code>./page.yak.module.css</code> is a virtual file that is generated by the second loader and contains the\nstyles of the current file. <code>./page.yak.module.css!=!./page</code> says that the second loader (matching <code>.yak.module.css</code> files) should\nbe used with the current file as input. Lastly <code>?./page.yak.module.css</code> is the query parameter that tells next.js that this\nis a CSS module and it&#x27;s loaders should be used.</p>\n","isPage":false,"text":"\nThe first step of the transformation is to add the import statement for the styles. These styles don&#x27;t exist yet, but\nwill be generated by the second loader.\noutputimport __styleYak from &quot;./page.yak.module.css!=!./page?./page.yak.module.css&quot;;\nThis strange looking import string is a poorly documented feature of webpack. It uses the Inline matchResource to instrument webpack to use the loaders as if it was a normal .module.css file\nthat points to the current file (./page). In order that this import statement works in next.js, we need to add\na query parameter that ends with .module.css, as this is the way next.js recognizes CSS modules.\nSo that means ./page.yak.module.css is a virtual file that is generated by the second loader and contains the\nstyles of the current file. ./page.yak.module.css!=!./page says that the second loader (matching .yak.module.css files) should\nbe used with the current file as input. Lastly ?./page.yak.module.css is the query parameter that tells next.js that this\nis a CSS module and it&#x27;s loaders should be used.\n","title":"Add style import","titles":["How does it work?","The compile time part","The first loader"]},"30":{"href":"/how-does-it-work#transform-tagged-template-literals","html":"\n<p>As the next step, the tagged template literals are transformed into <code>next-yak</code> runtime function calls. The static\nCSS parts are passed as references to the class names from the &quot;not yet generated&quot; css module file.</p>\n<div class=\"code-group\"><div data-title=\"input\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;next-yak&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-weight: bold;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: blue;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  &amp;:hover {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    color: red;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"output\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-focused\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;next-yak&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> __styleYak </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;./page.yak.module.css!=!./page?./page.yak.module.css&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#ADBAC7\">(__styleYak.Button); </span></span></code></pre></figure></div></div>\n<p>The dynamic parts are preserved and apply the classes or CSS variables at runtime. There are two different types\nof dynamic parts: The first type is the dynamic CSS property value (color in the following example) and the second type is the dynamic CSS property itself (background in the following example).</p>\n<p>The property value is transformed into a CSS variable and set on the element itself directly based on the functions return value.</p>\n<p>The property itself is transformed into a class name that is referenced during runtime when the function returns them.</p>\n<div class=\"code-group\"><div data-title=\"input\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-focused\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled, css } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;next-yak&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfont-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfont-weight: bold;</span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;white&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;blue&quot;};</span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`background: black;`</span><span style=\"color:#F47067\"> :</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`background: white;`}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    &amp;:hover {</span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#96D0FF\">\t\tcolor: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;red&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;blue&quot;};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"output\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-focused\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled, css } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;next-yak&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> __styleYak </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;./page.yak.module.css!=!./page?./page.yak.module.css&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\t__styleYak.Button, </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#F69D50\">\tprops</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props.$primary </span><span style=\"color:#F47067\">?</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#ADBAC7\">(__styleYak.propsprimary_0) </span><span style=\"color:#F47067\">:</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#ADBAC7\">(__styleYak.not_propsprimary_1), </span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\t{</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">      &quot;style&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#96D0FF\">        &quot;--</span><span style=\"color:#F47067\">\\uD83E\\uDDAC</span><span style=\"color:#96D0FF\">18fi82j0&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#F69D50\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props.$primary </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> &quot;white&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;blue&quot;</span><span style=\"color:#ADBAC7\">, </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#96D0FF\">        &quot;--</span><span style=\"color:#F47067\">\\uD83E\\uDDAC</span><span style=\"color:#96D0FF\">18fi82j1&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#F69D50\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props.$primary </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> &quot;red&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;blue&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">});</span></span></code></pre></figure></div></div>\n","isPage":false,"text":"\nAs the next step, the tagged template literals are transformed into next-yak runtime function calls. The static\nCSS parts are passed as references to the class names from the &quot;not yet generated&quot; css module file.\nimport { styled } from &quot;next-yak&quot;;\n \nconst Button = styled.button`\n  font-size: 2rem;\n  font-weight: bold;\n  color: blue;\n  &amp;:hover {\n    color: red;\n  }\n`;import { styled } from &quot;next-yak&quot;;\nimport __styleYak from &quot;./page.yak.module.css!=!./page?./page.yak.module.css&quot;;\n \nconst Button = styled.button(__styleYak.Button); \nThe dynamic parts are preserved and apply the classes or CSS variables at runtime. There are two different types\nof dynamic parts: The first type is the dynamic CSS property value (color in the following example) and the second type is the dynamic CSS property itself (background in the following example).\nThe property value is transformed into a CSS variable and set on the element itself directly based on the functions return value.\nThe property itself is transformed into a class name that is referenced during runtime when the function returns them.\nimport { styled, css } from &quot;next-yak&quot;;\n \nconst Button = styled.button`\n\tfont-size: 2rem;\n\tfont-weight: bold;\n\tcolor: ${props =&gt; props.$primary ? &quot;white&quot; : &quot;blue&quot;};\n\t${props =&gt; props.$primary ? css`background: black;` : css`background: white;`}\n    &amp;:hover {\n\t\tcolor: ${props =&gt; props.$primary ? &quot;red&quot; : &quot;blue&quot;};\n\t}\n`;import { styled, css } from &quot;next-yak&quot;;\nimport __styleYak from &quot;./page.yak.module.css!=!./page?./page.yak.module.css&quot;;\nconst Button = styled.button(\n\t__styleYak.Button, \n\tprops =&gt; props.$primary ? css(__styleYak.propsprimary_0) : css(__styleYak.not_propsprimary_1), \n\t{\n      &quot;style&quot;: {\n        &quot;--\\uD83E\\uDDAC18fi82j0&quot;: props =&gt; props.$primary ? &quot;white&quot; : &quot;blue&quot;, \n        &quot;--\\uD83E\\uDDAC18fi82j1&quot;: props =&gt; props.$primary ? &quot;red&quot; : &quot;blue&quot;\n      }\n});\n","title":"Transform tagged template literals","titles":["How does it work?","The compile time part","The first loader"]},"31":{"href":"/how-does-it-work#the-second-loader-cssloadercjs","html":"\n<p>The second loader runs after the first loader changed the import, takes in the styles and transforms it into real\nCSS inside CSS-Modules. It also generates a class name for each static and dynamic style in order to reference it in the first loader. It translates dynamic property values into CSS variables and adds it to the class selector.</p>\n","isPage":false,"text":"\nThe second loader runs after the first loader changed the import, takes in the styles and transforms it into real\nCSS inside CSS-Modules. It also generates a class name for each static and dynamic style in order to reference it in the first loader. It translates dynamic property values into CSS variables and adds it to the class selector.\n","title":"The second loader","titles":["How does it work?","The compile time part"]},"32":{"href":"/how-does-it-work#remove-imports","html":"\n<p>The first step of the transformation is to remove all import statements as the input is the normal JS file and we need to output a CSS file.</p>\n","isPage":false,"text":"\nThe first step of the transformation is to remove all import statements as the input is the normal JS file and we need to output a CSS file.\n","title":"Remove imports","titles":["How does it work?","The compile time part","The second loader"]},"33":{"href":"/how-does-it-work#transform-static-styles","html":"\n<p>The static styles are transformed into CSS classes. The class names are generated based on the component name and referenced\nin the first loader.</p>\n<div class=\"code-group\"><div data-title=\"input\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;next-yak&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  font-weight: bold;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: blue;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  &amp;:hover {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    color: red;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"output\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\"><code data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">.Button</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  font-size</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">2</span><span style=\"color:#F47067\">rem</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  font-weight</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">bold</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  color</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">blue</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  &amp;:hover {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">    color</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">red</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div></div>\n","isPage":false,"text":"\nThe static styles are transformed into CSS classes. The class names are generated based on the component name and referenced\nin the first loader.\nimport { styled } from &quot;next-yak&quot;;\n \nconst Button = styled.button`\n  font-size: 2rem;\n  font-weight: bold;\n  color: blue;\n  &amp;:hover {\n    color: red;\n  }\n`;.Button {\n  font-size: 2rem;\n  font-weight: bold;\n  color: blue;\n  &amp;:hover {\n    color: red;\n  }\n}\n","title":"Transform static styles","titles":["How does it work?","The compile time part","The second loader"]},"34":{"href":"/how-does-it-work#transform-dynamic-styles","html":"\n<p>The dynamic property styles are transformed into nested <code>:where</code> selectors that don&#x27;t alter the specificity of the selector. The class names are generated based on the condition of the properties and used in the first loader. For dynamic property\nvalues, the value is transformed into a CSS variable.</p>\n<div class=\"code-group\"><div data-title=\"input\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-focused\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled, css } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;next-yak&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfont-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfont-weight: bold;</span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;white&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;blue&quot;};</span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`background: black;`</span><span style=\"color:#F47067\"> :</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`background: white;`}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    &amp;:hover {</span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#96D0FF\">\t\tcolor: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;red&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;blue&quot;};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"output\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-focused\" tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\"><code data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">.Button</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">\tfont-size</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">2</span><span style=\"color:#F47067\">rem</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">\tfont-weight</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">bold</span><span style=\"color:#ADBAC7\">;</span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#6CB6FF\">\tcolor</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">var</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">--🦬18fi82j0</span><span style=\"color:#ADBAC7\">); </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#ADBAC7\">\t&amp;:where(.propsprimary_0) { </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#6CB6FF\">\t\tbackground</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">black</span><span style=\"color:#ADBAC7\">; </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#ADBAC7\">\t} </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#ADBAC7\">\t&amp;</span><span style=\"color:#6CB6FF\">:where</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">.not_propsprimary_1</span><span style=\"color:#ADBAC7\">) { </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#6CB6FF\">\t\tbackground</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">white</span><span style=\"color:#ADBAC7\">; </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#ADBAC7\">\t} </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#ADBAC7\">\t&amp;</span><span style=\"color:#6CB6FF\">:hover</span><span style=\"color:#ADBAC7\"> { </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#6CB6FF\">\t\tcolor</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">var</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">--🦬18fi82j1</span><span style=\"color:#ADBAC7\">); </span></span>\n<span class=\"focused\" data-line=\"\"><span style=\"color:#ADBAC7\">\t} </span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div></div>\n","isPage":false,"text":"\nThe dynamic property styles are transformed into nested :where selectors that don&#x27;t alter the specificity of the selector. The class names are generated based on the condition of the properties and used in the first loader. For dynamic property\nvalues, the value is transformed into a CSS variable.\nimport { styled, css } from &quot;next-yak&quot;;\n \nconst Button = styled.button`\n\tfont-size: 2rem;\n\tfont-weight: bold;\n\tcolor: ${props =&gt; props.$primary ? &quot;white&quot; : &quot;blue&quot;};\n\t${props =&gt; props.$primary ? css`background: black;` : css`background: white;`}\n    &amp;:hover {\n\t\tcolor: ${props =&gt; props.$primary ? &quot;red&quot; : &quot;blue&quot;};\n\t}\n`;.Button {\n\tfont-size: 2rem;\n\tfont-weight: bold;\n\tcolor: var(--🦬18fi82j0); \n\t&amp;:where(.propsprimary_0) { \n\t\tbackground: black; \n\t} \n\t&amp;:where(.not_propsprimary_1) { \n\t\tbackground: white; \n\t} \n\t&amp;:hover { \n\t\tcolor: var(--🦬18fi82j1); \n\t} \n}\n","title":"Transform dynamic styles","titles":["How does it work?","The compile time part","The second loader"]},"35":{"href":"/how-does-it-work#the-runtime-part","html":"\n<p>The runtime part is responsible for merging styles and props. It&#x27;s a simple function that takes in the styles and the props and returns the merged styles.</p>\n<p>See: <a href=\"https://github.com/jantimon/next-yak/blob/main/packages/next-yak/runtime/styled.tsx\">Styled function</a></p>\n<p>A lot of this code is types and comments to indicate why certain things are done. The actual runtime code is very small.</p>\n","isPage":false,"text":"\nThe runtime part is responsible for merging styles and props. It&#x27;s a simple function that takes in the styles and the props and returns the merged styles.\nSee: Styled function\nA lot of this code is types and comments to indicate why certain things are done. The actual runtime code is very small.\n","title":"The runtime part","titles":["How does it work?"]},"36":{"href":"/how-does-it-work#context","html":"\n<p>The yak theme context allows you to configure the theme of your yak application. It works for react-server components\nand normal react components.</p>\n<p>The first part of the puzzle is to export two different modules for the server and the client.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#96D0FF\">&quot;./context&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">\t&quot;react-server&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">\t\t&quot;import&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;./dist/context/index.server.js&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">\t\t&quot;require&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;./dist/context/index.server.cjs&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\t},</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">\t&quot;default&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">\t\t&quot;import&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;./dist/context/index.js&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">\t\t&quot;require&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;./dist/context/index.cjs&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>For the client components, we use the default context from react.</p>\n<figure data-rehype-pretty-code-figure=\"\"><figcaption data-rehype-pretty-code-title=\"\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\">client: index.tsx</figcaption><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#96D0FF\">&quot;use client&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">//</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// This file is the client component (browser &amp; ssr) version of index.server.tsx</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">//</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> React, { ReactNode, createContext, useContext } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;react&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> interface</span><span style=\"color:#F69D50\"> YakTheme</span><span style=\"color:#ADBAC7\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">/**</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> * The yak theme context</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> * </span><span style=\"color:#F47067\">@see</span><span style=\"color:#ADBAC7\"> https://github.com/jantimon/next-yak/blob/main/packages/next-yak/runtime/context/README.md</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> */</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> YakContext</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> createContext</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">&gt;({});</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">/**</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> * Returns the current yak theme context</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> *</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> * </span><span style=\"color:#F47067\">@see</span><span style=\"color:#ADBAC7\"> https://github.com/jantimon/next-yak/blob/main/packages/next-yak/runtime/context/README.md</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> */</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#DCBDFB\"> useTheme</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> ()</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> YakTheme</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#DCBDFB\"> useContext</span><span style=\"color:#ADBAC7\">(YakContext);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">/**</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> * Yak theme context provider</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> *</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> * </span><span style=\"color:#F47067\">@see</span><span style=\"color:#ADBAC7\"> https://github.com/jantimon/next-yak/blob/main/packages/next-yak/runtime/context/README.md</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"> */</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#DCBDFB\"> YakThemeProvider</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  children,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  theme </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> {},</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  children</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ReactNode</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  theme</span><span style=\"color:#F47067\">?:</span><span style=\"color:#F69D50\"> YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> &lt;</span><span style=\"color:#8DDB8C\">YakContext.Provider</span><span style=\"color:#6CB6FF\"> value</span><span style=\"color:#F47067\">={</span><span style=\"color:#ADBAC7\">theme</span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&gt;</span><span style=\"color:#F47067\">{</span><span style=\"color:#ADBAC7\">children</span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&lt;/</span><span style=\"color:#8DDB8C\">YakContext.Provider</span><span style=\"color:#ADBAC7\">&gt;;</span></span></code></pre></figure>\n<p>For the server components, we use a module that exports exactly the same API as the one for client components, but with a different implementation where we use the <code>cache</code> function from react to cache the result of the context.</p>\n<figure data-rehype-pretty-code-figure=\"\"><figcaption data-rehype-pretty-code-title=\"\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\">server: index.server.tsx</figcaption><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">//</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// This file is the react-server component version of index.tsx</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">//</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// @ts-ignore - in the current @types/react &quot;cache&quot; is not typed</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> React, { ReactNode, cache } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;react&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { YakThemeProvider </span><span style=\"color:#F47067\">as</span><span style=\"color:#ADBAC7\"> YakThemeClientProvider } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;./index.js&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// the following import might be changed by</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// the user config in withYak to point to their own</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// context</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { getYakThemeContext } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;next-yak/context/baseContext&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#6CB6FF\"> useTheme</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> cache</span><span style=\"color:#ADBAC7\">(() </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#DCBDFB\"> getYakThemeContext</span><span style=\"color:#ADBAC7\">());</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#DCBDFB\"> YakThemeProvider</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> ({ </span><span style=\"color:#F69D50\">children</span><span style=\"color:#ADBAC7\"> }</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> { </span><span style=\"color:#F69D50\">children</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ReactNode</span><span style=\"color:#ADBAC7\"> }) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  return</span><span style=\"color:#ADBAC7\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    &lt;</span><span style=\"color:#8DDB8C\">YakThemeClientProvider</span><span style=\"color:#6CB6FF\"> theme</span><span style=\"color:#F47067\">={</span><span style=\"color:#DCBDFB\">useTheme</span><span style=\"color:#ADBAC7\">()</span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">      {</span><span style=\"color:#ADBAC7\">children</span><span style=\"color:#F47067\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    &lt;/</span><span style=\"color:#8DDB8C\">YakThemeClientProvider</span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  );</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">};</span></span></code></pre></figure>\n<p>The <code>getYakThemeContext</code> function is imported from the user&#x27;s <code>yak.context.ts</code> file. This file is a regular typescript file that exports a function that returns the theme context. You can use every api that works with server components like <a href=\"https://nextjs.org/docs/app/api-reference/functions/headers\">headers</a> or <a href=\"https://nextjs.org/docs/app/api-reference/functions/cookies\">cookies</a> and use them\nto determine your values for the theme context.</p>\n<figure data-rehype-pretty-code-figure=\"\"><figcaption data-rehype-pretty-code-title=\"\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\">yak.context.ts</figcaption><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { cookies } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next/headers&#x27;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { cache } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;react&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> hasHighContrast</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> cache</span><span style=\"color:#ADBAC7\">(() </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    const</span><span style=\"color:#6CB6FF\"> cookieStore</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> cookies</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    return</span><span style=\"color:#ADBAC7\"> cookieStore.</span><span style=\"color:#DCBDFB\">get</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;highContrast&quot;</span><span style=\"color:#ADBAC7\">)?.value </span><span style=\"color:#F47067\">===</span><span style=\"color:#96D0FF\"> &quot;true&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">});</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> function</span><span style=\"color:#DCBDFB\"> getYakThemeContext</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    return</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        highContrast: </span><span style=\"color:#DCBDFB\">hasHighContrast</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">declare</span><span style=\"color:#F47067\"> module</span><span style=\"color:#96D0FF\"> &quot;next-yak&quot;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    export</span><span style=\"color:#F47067\"> interface</span><span style=\"color:#F69D50\"> YakTheme</span><span style=\"color:#F47067\"> extends</span><span style=\"color:#6CB6FF\"> ReturnType</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F47067\">typeof</span><span style=\"color:#ADBAC7\"> getYakThemeContext&gt; { }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>The second part of the puzzle is that the <code>withYak</code> function changes to what file webpack resolves the context so that\nit points to the individual <code>yak.context.ts</code> file in the root directory.</p>\n<figure data-rehype-pretty-code-figure=\"\"><figcaption data-rehype-pretty-code-title=\"\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">withYak/index.ts</figcaption><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// With the following alias the internal next-yak code </span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// is able to import a context which works for server components</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> yakContext</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> resolveYakContext</span><span style=\"color:#ADBAC7\">(yakOptions.contextPath, webpackConfig.context);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">if</span><span style=\"color:#ADBAC7\"> (yakContext) {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\twebpackConfig.resolve.alias[</span><span style=\"color:#96D0FF\">&#x27;next-yak/context/baseContext&#x27;</span><span style=\"color:#ADBAC7\">] </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> yakContext;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>","isPage":false,"text":"\nThe yak theme context allows you to configure the theme of your yak application. It works for react-server components\nand normal react components.\nThe first part of the puzzle is to export two different modules for the server and the client.\n&quot;./context&quot;: {\n\t&quot;react-server&quot;: {\n\t\t&quot;import&quot;: &quot;./dist/context/index.server.js&quot;,\n\t\t&quot;require&quot;: &quot;./dist/context/index.server.cjs&quot;\n\t},\n\t&quot;default&quot;: {\n\t\t&quot;import&quot;: &quot;./dist/context/index.js&quot;,\n\t\t&quot;require&quot;: &quot;./dist/context/index.cjs&quot;\n\t}\n}\nFor the client components, we use the default context from react.\nclient: index.tsx&quot;use client&quot;;\n//\n// This file is the client component (browser &amp; ssr) version of index.server.tsx\n//\nimport React, { ReactNode, createContext, useContext } from &quot;react&quot;;\n \nexport interface YakTheme {}\n \n/**\n * The yak theme context\n * @see https://github.com/jantimon/next-yak/blob/main/packages/next-yak/runtime/context/README.md\n */\nconst YakContext = createContext&lt;YakTheme&gt;({});\n \n/**\n * Returns the current yak theme context\n *\n * @see https://github.com/jantimon/next-yak/blob/main/packages/next-yak/runtime/context/README.md\n */\nexport const useTheme = (): YakTheme =&gt; useContext(YakContext);\n \n/**\n * Yak theme context provider\n *\n * @see https://github.com/jantimon/next-yak/blob/main/packages/next-yak/runtime/context/README.md\n */\nexport const YakThemeProvider = ({\n  children,\n  theme = {},\n}: {\n  children: ReactNode;\n  theme?: YakTheme;\n}) =&gt; &lt;YakContext.Provider value={theme}&gt;{children}&lt;/YakContext.Provider&gt;;\nFor the server components, we use a module that exports exactly the same API as the one for client components, but with a different implementation where we use the cache function from react to cache the result of the context.\nserver: index.server.tsx//\n// This file is the react-server component version of index.tsx\n//\n \n// @ts-ignore - in the current @types/react &quot;cache&quot; is not typed\nimport React, { ReactNode, cache } from &quot;react&quot;;\nimport { YakThemeProvider as YakThemeClientProvider } from &quot;./index.js&quot;;\n \n// the following import might be changed by\n// the user config in withYak to point to their own\n// context\nimport { getYakThemeContext } from &quot;next-yak/context/baseContext&quot;;\n \nexport const useTheme = cache(() =&gt; getYakThemeContext());\nexport const YakThemeProvider = ({ children }: { children: ReactNode }) =&gt; {\n  return (\n    &lt;YakThemeClientProvider theme={useTheme()}&gt;\n      {children}\n    &lt;/YakThemeClientProvider&gt;\n  );\n};\nThe getYakThemeContext function is imported from the user&#x27;s yak.context.ts file. This file is a regular typescript file that exports a function that returns the theme context. You can use every api that works with server components like headers or cookies and use them\nto determine your values for the theme context.\nyak.context.tsimport { cookies } from &#x27;next/headers&#x27;\nimport { cache } from &quot;react&quot;;\n \nconst hasHighContrast = cache(() =&gt; {\n    const cookieStore = cookies()\n    return cookieStore.get(&quot;highContrast&quot;)?.value === &quot;true&quot;\n});\n \nexport function getYakThemeContext() {\n    return {\n        highContrast: hasHighContrast()\n    }\n}\n \ndeclare module &quot;next-yak&quot; {\n    export interface YakTheme extends ReturnType&lt;typeof getYakThemeContext&gt; { }\n}\nThe second part of the puzzle is that the withYak function changes to what file webpack resolves the context so that\nit points to the individual yak.context.ts file in the root directory.\nwithYak/index.ts// With the following alias the internal next-yak code \n// is able to import a context which works for server components\nconst yakContext = resolveYakContext(yakOptions.contextPath, webpackConfig.context);\nif (yakContext) {\n\twebpackConfig.resolve.alias[&#x27;next-yak/context/baseContext&#x27;] = yakContext;\n}","title":"Context","titles":["How does it work?"]},"37":{"href":"/migration-from-styled-components#migration-from-styled-components","html":"</header>\n<p>We tried to keep the changes you need to know if you&#x27;re already familiar with styled-components\nto a minimum.</p>\n","isPage":true,"text":"\nWe tried to keep the changes you need to know if you&#x27;re already familiar with styled-components\nto a minimum.\n","title":"Migration from styled-components","titles":[]},"38":{"href":"/migration-from-styled-components#familiar-api","html":"\n","isPage":false,"text":"\n","title":"Familiar API","titles":["Migration from styled-components"]},"39":{"href":"/migration-from-styled-components#styled","html":"\n<p>You can use the <code>styled</code> tag as you know for all kind of elements.</p>\n<div class=\"code-group\"><div data-title=\"styled-components\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Nav</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">nav</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"next-yak\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Nav</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">nav</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div></div>\n<p>You can use static or dynamic parts the same way you would use it in styled-components.</p>\n<div class=\"code-group\"><div data-title=\"styled-components\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#ADBAC7\">&lt;{ </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> boolean</span><span style=\"color:#ADBAC7\"> }&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;white&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;#BF4F74&quot;};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"next-yak\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#ADBAC7\">&lt;{ </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> boolean</span><span style=\"color:#ADBAC7\"> }&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;white&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;#BF4F74&quot;};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div></div>\n","isPage":false,"text":"\nYou can use the styled tag as you know for all kind of elements.\nimport styled from &#x27;styled-components&#x27;;\n \nconst Button = styled.button`\n\tbackground: #BF4F74;\n`;\n \nconst Nav = styled.nav`\n\tbackground: #BF4F74;\n`;import { styled } from &#x27;next-yak&#x27;;\n \nconst Button = styled.button`\n\tbackground: #BF4F74;\n`;\n \nconst Nav = styled.nav`\n\tbackground: #BF4F74;\n`;\nYou can use static or dynamic parts the same way you would use it in styled-components.\nimport styled from &#x27;styled-components&#x27;;\n \nconst Button = styled.button&lt;{ $primary: boolean }&gt;`\n\tbackground: #BF4F74;\n\tcolor: ${props =&gt; props.$primary ? &quot;white&quot; : &quot;#BF4F74&quot;};\n`;import { styled } from &#x27;next-yak&#x27;;\n \nconst Button = styled.button&lt;{ $primary: boolean }&gt;`\n\tbackground: #BF4F74;\n\tcolor: ${props =&gt; props.$primary ? &quot;white&quot; : &quot;#BF4F74&quot;};\n`;\n","title":"styled","titles":["Migration from styled-components","Familiar API"]},"40":{"href":"/migration-from-styled-components#css","html":"\n<p>The <code>css</code> tagged template literal in styled-components is used when you want to use a dynamic\nCSS part &quot;outside&quot; of the styled literal. Next-yak works similar but with the difference that you\nshould use it everytime you want to have dynamic properties where the CSS property isn&#x27;t known\nin the outside literal.</p>\n<div class=\"code-group\"><div data-title=\"styled-components\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#ADBAC7\">&lt;{ </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> boolean</span><span style=\"color:#ADBAC7\"> }&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;color: white;&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;color: #BF4F74;&quot;}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"next-yak\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#ADBAC7\">&lt;{ </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> boolean</span><span style=\"color:#ADBAC7\"> }&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`color: white`</span><span style=\"color:#F47067\"> :</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`color: #BF4F74`}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div></div>\n<p>Next-yak transforms <code>css</code> code into a class name that is referenced. So you can think of it as\nan additional css class that gets added/subtracted as needed.</p>\n","isPage":false,"text":"\nThe css tagged template literal in styled-components is used when you want to use a dynamic\nCSS part &quot;outside&quot; of the styled literal. Next-yak works similar but with the difference that you\nshould use it everytime you want to have dynamic properties where the CSS property isn&#x27;t known\nin the outside literal.\nimport styled from &#x27;styled-components&#x27;;\n \nconst Button = styled.button&lt;{ $primary: boolean }&gt;`\n\tbackground: #BF4F74;\n\t${props =&gt; props.$primary ? &quot;color: white;&quot; : &quot;color: #BF4F74;&quot;}\n`;import { styled } from &#x27;next-yak&#x27;;\n \nconst Button = styled.button&lt;{ $primary: boolean }&gt;`\n\tbackground: #BF4F74;\n\t${props =&gt; props.$primary ? css`color: white` : css`color: #BF4F74`}\n`;\nNext-yak transforms css code into a class name that is referenced. So you can think of it as\nan additional css class that gets added/subtracted as needed.\n","title":"css","titles":["Migration from styled-components","Familiar API"]},"41":{"href":"/migration-from-styled-components#css-prop","html":"\n<p>Also the css prop works similar to styled-components. The main difference is that you can&#x27;t use\ndynamic values in the css prop and that you have to use the <code>css</code> tag to define the css.</p>\n<div class=\"code-group\"><div data-title=\"styled-components\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#8DDB8C\">div</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  css</span><span style=\"color:#F47067\">={</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    background: papayawhip;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    color: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">theme</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">colors</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">text</span><span style=\"color:#96D0FF\">};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  `</span><span style=\"color:#F47067\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">/&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#8DDB8C\">Button</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  css</span><span style=\"color:#F47067\">=</span><span style=\"color:#96D0FF\">&quot;padding: 0.5em 1em;&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">/&gt;</span></span></code></pre></figure></div><div data-title=\"next-yak\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { css } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#8DDB8C\">div</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  css</span><span style=\"color:#F47067\">={</span><span style=\"color:#DCBDFB\">css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    background: papayawhip;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    color: &#x27;red&#x27;;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  `</span><span style=\"color:#F47067\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">/&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#8DDB8C\">Button</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  css</span><span style=\"color:#F47067\">={</span><span style=\"color:#DCBDFB\">css</span><span style=\"color:#96D0FF\">`padding: 0.5em 1em;`</span><span style=\"color:#F47067\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">/&gt;</span></span></code></pre></figure></div></div>\n<p>If you use TypeScript, you can just add the following to your <code>tsconfig.json</code> to get type checking for the css prop.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">\t&quot;compilerOptions&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;jsxImportSource&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;next-yak&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nAlso the css prop works similar to styled-components. The main difference is that you can&#x27;t use\ndynamic values in the css prop and that you have to use the css tag to define the css.\n&lt;div\n  css={`\n    background: papayawhip;\n    color: ${props =&gt; props.theme.colors.text};\n  `}\n/&gt;\n&lt;Button\n  css=&quot;padding: 0.5em 1em;&quot;\n/&gt;import { css } from &#x27;next-yak&#x27;;\n \n&lt;div\n  css={css`\n    background: papayawhip;\n    color: &#x27;red&#x27;;\n  `}\n/&gt;\n&lt;Button\n  css={css`padding: 0.5em 1em;`}\n/&gt;\nIf you use TypeScript, you can just add the following to your tsconfig.json to get type checking for the css prop.\n{\n\t&quot;compilerOptions&quot;: {\n      &quot;jsxImportSource&quot;: &quot;next-yak&quot;\n\t}\n}\n","title":"css prop","titles":["Migration from styled-components","Familiar API","css"]},"42":{"href":"/migration-from-styled-components#keyframes","html":"\n<p>The api for keyframes is exactly the same as in styled-components. You can define your keyframes\nand use it in your animations.</p>\n<div class=\"code-group\"><div data-title=\"styled-components\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled, { keyframes } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> rotate</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> keyframes</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfrom {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\ttransform: rotate(0deg);</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tto {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\ttransform: rotate(360deg);</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Rotate</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tdisplay: inline-block;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tanimation: ${</span><span style=\"color:#ADBAC7\">rotate</span><span style=\"color:#96D0FF\">} 2s linear infinite;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tpadding: 2rem 1rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfont-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"next-yak\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled, keyframes } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> rotate</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> keyframes</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfrom {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\ttransform: rotate(0deg);</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tto {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\ttransform: rotate(360deg);</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Rotate</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tdisplay: inline-block;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tanimation: ${</span><span style=\"color:#ADBAC7\">rotate</span><span style=\"color:#96D0FF\">} 2s linear infinite;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tpadding: 2rem 1rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfont-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div></div>\n","isPage":false,"text":"\nThe api for keyframes is exactly the same as in styled-components. You can define your keyframes\nand use it in your animations.\nimport styled, { keyframes } from &#x27;styled-components&#x27;;\n \nconst rotate = keyframes`\n\tfrom {\n\t\ttransform: rotate(0deg);\n\t}\n\tto {\n\t\ttransform: rotate(360deg);\n\t}\n`;\n \nconst Rotate = styled.div`\n\tdisplay: inline-block;\n\tanimation: ${rotate} 2s linear infinite;\n\tpadding: 2rem 1rem;\n\tfont-size: 2rem;\n`;import { styled, keyframes } from &#x27;next-yak&#x27;;\n \nconst rotate = keyframes`\n\tfrom {\n\t\ttransform: rotate(0deg);\n\t}\n\tto {\n\t\ttransform: rotate(360deg);\n\t}\n`;\n \nconst Rotate = styled.div`\n\tdisplay: inline-block;\n\tanimation: ${rotate} 2s linear infinite;\n\tpadding: 2rem 1rem;\n\tfont-size: 2rem;\n`;\n","title":"keyframes","titles":["Migration from styled-components","Familiar API"]},"43":{"href":"/migration-from-styled-components#attrs","html":"\n<p>Next-yak also enables <code>.attrs</code> on your components and has the same behaviour as in styled-components</p>\n<div class=\"code-group\"><div data-title=\"styled-components\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Input</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.input.</span><span style=\"color:#DCBDFB\">attrs</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\ttype: </span><span style=\"color:#96D0FF\">&quot;text&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\tsize: props.size </span><span style=\"color:#F47067\">||</span><span style=\"color:#96D0FF\"> &quot;1em&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}))</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: palevioletred;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfont-size: 1em;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tborder: 2px solid palevioletred;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tborder-radius: 3px;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"next-yak\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Input</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.input.</span><span style=\"color:#DCBDFB\">attrs</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\ttype: </span><span style=\"color:#96D0FF\">&quot;text&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\tsize: props.size </span><span style=\"color:#F47067\">||</span><span style=\"color:#96D0FF\"> &quot;1em&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}))</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: palevioletred;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfont-size: 1em;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tborder: 2px solid palevioletred;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tborder-radius: 3px;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div></div>\n","isPage":false,"text":"\nNext-yak also enables .attrs on your components and has the same behaviour as in styled-components\nimport styled from &#x27;styled-components&#x27;;\n \nconst Input = styled.input.attrs(props =&gt; ({\n\ttype: &quot;text&quot;,\n\tsize: props.size || &quot;1em&quot;\n}))`\n\tcolor: palevioletred;\n\tfont-size: 1em;\n\tborder: 2px solid palevioletred;\n\tborder-radius: 3px;\n`;import { styled } from &#x27;next-yak&#x27;;\n \nconst Input = styled.input.attrs(props =&gt; ({\n\ttype: &quot;text&quot;,\n\tsize: props.size || &quot;1em&quot;\n}))`\n\tcolor: palevioletred;\n\tfont-size: 1em;\n\tborder: 2px solid palevioletred;\n\tborder-radius: 3px;\n`;\n","title":"attrs","titles":["Migration from styled-components","Familiar API"]},"44":{"href":"/migration-from-styled-components#references-to-other-components","html":"\n<p>In order to create a selector that includes another component, you can just reference it in the tagged\ntemplate literal.</p>\n<div class=\"code-group\"><div data-title=\"styled-components\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: blue;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Wrapper</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">Button</span><span style=\"color:#96D0FF\">} {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\tcolor: red;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"next-yak\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: blue;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Wrapper</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">Button</span><span style=\"color:#96D0FF\">} {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\tcolor: red;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div></div>\n<p>During build time the reference is changed to the actual generated class name of the referenced component.</p>\n","isPage":false,"text":"\nIn order to create a selector that includes another component, you can just reference it in the tagged\ntemplate literal.\nimport styled from &#x27;styled-components&#x27;;\n \nconst Button = styled.button`\n\tcolor: blue;\n`;\n \nconst Wrapper = styled.div`\n\t${Button} {\n\t\tcolor: red;\n\t}\n`;import { styled } from &#x27;next-yak&#x27;;\n \nconst Button = styled.button`\n\tcolor: blue;\n`;\n \nconst Wrapper = styled.div`\n\t${Button} {\n\t\tcolor: red;\n\t}\n`;\nDuring build time the reference is changed to the actual generated class name of the referenced component.\n","title":"References to other components","titles":["Migration from styled-components","Familiar API"]},"45":{"href":"/migration-from-styled-components#mixins","html":"\n<p>Mixins allow you to predefine CSS styles and reuse them across components. You can just create mixins the same\nway as you would with styled-components.</p>\n<div class=\"code-group\"><div data-title=\"styled-components\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled, { css } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> mixin</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: green;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> MyComp</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground-color: yellow;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">mixin</span><span style=\"color:#96D0FF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div><div data-title=\"next-yak\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { css, styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> mixin</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: green;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> MyComp</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground-color: yellow;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">mixin</span><span style=\"color:#96D0FF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div></div>\n","isPage":false,"text":"\nMixins allow you to predefine CSS styles and reuse them across components. You can just create mixins the same\nway as you would with styled-components.\nimport styled, { css } from &#x27;styled-components&#x27;;\n \nconst mixin = css`\n\tcolor: green;\n`;\n \nconst MyComp = styled.div`\n\tbackground-color: yellow;\n\t${mixin}\n`;import { css, styled } from &#x27;next-yak&#x27;;\n \nconst mixin = css`\n\tcolor: green;\n`;\n \nconst MyComp = styled.div`\n\tbackground-color: yellow;\n\t${mixin}\n`;\n","title":"Mixins","titles":["Migration from styled-components","Familiar API"]},"46":{"href":"/migration-from-styled-components#migration","html":"\n","isPage":false,"text":"\n","title":"Migration","titles":["Migration from styled-components"]},"47":{"href":"/migration-from-styled-components#change-import","html":"\n<p>Change the import from <code>styled-components</code> to <code>next-yak</code> and change the import of <code>styled</code> from a default import\nto a named import.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-diff\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span class=\"diff remove\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled, { css, keyframes } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span class=\"diff add\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled, css, keyframes } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">; </span></span></code></pre></figure>\n","isPage":false,"text":"\nChange the import from styled-components to next-yak and change the import of styled from a default import\nto a named import.\nimport styled, { css, keyframes } from &#x27;styled-components&#x27;; \nimport { styled, css, keyframes } from &#x27;next-yak&#x27;; \n","title":"Change import","titles":["Migration from styled-components","Migration"]},"48":{"href":"/migration-from-styled-components#add-yak-files","html":"\n<p>Yak files are used to store static values that are extracted during build time. You can create a <code>.yak.ts</code> file\neverywhere in your project and it will be picked up by next-yak.</p>\n<figure data-rehype-pretty-code-figure=\"\"><figcaption data-rehype-pretty-code-title=\"\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">constants.yak.ts</figcaption><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#6CB6FF\"> colors</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\tprimary: </span><span style=\"color:#96D0FF\">&quot;#BF4F74&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\tsecondary: </span><span style=\"color:#96D0FF\">&quot;#F7B801&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#6CB6FF\"> breakpoints</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\tmobile: </span><span style=\"color:#96D0FF\">&quot;@media (max-width: 420px)&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\ttablet: </span><span style=\"color:#96D0FF\">&quot;@media (max-width: 768px)&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\tdesktop: </span><span style=\"color:#96D0FF\">&quot;@media (min-width: 769px)&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">};</span></span></code></pre></figure>\n<p>You can then use these values in your styled components.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { colors, breakpoints } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;./constants.yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: ${</span><span style=\"color:#ADBAC7\">colors</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">primary</span><span style=\"color:#96D0FF\">};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">breakpoints</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">mobile</span><span style=\"color:#96D0FF\">} {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\tfont-size: 1rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">breakpoints</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">tablet</span><span style=\"color:#96D0FF\">} {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\tfont-size: 1.5rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">breakpoints</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">desktop</span><span style=\"color:#96D0FF\">} {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\tfont-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<p>It looks and feels like a mixin from styled-components but it&#x27;s actually a static value that gets injected during build time.\nThis is the reason why you can&#x27;t use dynamic values in yak files, as they have to be known during build time whereas\nmixin values can be dynamic.</p>\n<p>So this doesn&#x27;t work:</p>\n<figure data-rehype-pretty-code-figure=\"\"><figcaption data-rehype-pretty-code-title=\"\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">constants.yak.ts</figcaption><pre class=\"has-highlighted\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#6CB6FF\"> colors</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\tprimary: </span><span style=\"color:#96D0FF\">&quot;#BF4F74&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\tsecondary: </span><span style=\"color:#96D0FF\">&quot;#F7B801&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span class=\"highlighted\" data-line=\"\"><span style=\"color:#DCBDFB\">\tdynamic</span><span style=\"color:#ADBAC7\">: (</span><span style=\"color:#F69D50\">props</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> { </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> boolean</span><span style=\"color:#ADBAC7\"> }) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> props.$primary </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> &quot;#BF4F74&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;white&quot;</span><span style=\"color:#ADBAC7\">, </span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"> </span>\n<span class=\"highlighted\" data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#DCBDFB\"> breakpoints</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">media</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Record</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">&gt;) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> { </span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">\treturn</span><span style=\"color:#ADBAC7\"> media;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">};</span></span></code></pre></figure>\n","isPage":false,"text":"\nYak files are used to store static values that are extracted during build time. You can create a .yak.ts file\neverywhere in your project and it will be picked up by next-yak.\nconstants.yak.tsexport const colors = {\n\tprimary: &quot;#BF4F74&quot;,\n\tsecondary: &quot;#F7B801&quot;,\n};\n \nexport const breakpoints = {\n\tmobile: &quot;@media (max-width: 420px)&quot;,\n\ttablet: &quot;@media (max-width: 768px)&quot;,\n\tdesktop: &quot;@media (min-width: 769px)&quot;,\n};\nYou can then use these values in your styled components.\nimport { styled } from &#x27;next-yak&#x27;;\nimport { colors, breakpoints } from &#x27;./constants.yak&#x27;;\n \nconst Button = styled.button`\n\tbackground: ${colors.primary};\n\t${breakpoints.mobile} {\n\t\tfont-size: 1rem;\n\t}\n\t${breakpoints.tablet} {\n\t\tfont-size: 1.5rem;\n\t}\n\t${breakpoints.desktop} {\n\t\tfont-size: 2rem;\n\t}\n`;\nIt looks and feels like a mixin from styled-components but it&#x27;s actually a static value that gets injected during build time.\nThis is the reason why you can&#x27;t use dynamic values in yak files, as they have to be known during build time whereas\nmixin values can be dynamic.\nSo this doesn&#x27;t work:\nconstants.yak.tsexport const colors = {\n\tprimary: &quot;#BF4F74&quot;,\n\tsecondary: &quot;#F7B801&quot;,\n\tdynamic: (props: { $primary: boolean }) =&gt; props.$primary ? &quot;#BF4F74&quot; : &quot;white&quot;, \n};\n \nexport const breakpoints = (media: Record&lt;string, string&gt;) =&gt; { \n\treturn media;\n};\n","title":"Add yak files","titles":["Migration from styled-components","Migration"]},"49":{"href":"/migration-from-styled-components#replace-styled-components-with-next-yak","html":"\n<p>Replace all your styled-components with next-yak. You can use the same API as you would with styled-components.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-diff\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span class=\"diff remove\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled, { css, keyframes } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span class=\"diff add\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled, css, keyframes } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: #BF4F74;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;white&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;#BF4F74&quot;};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Input</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.input.</span><span style=\"color:#DCBDFB\">attrs</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\ttype: </span><span style=\"color:#96D0FF\">&quot;text&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\tsize: props.size </span><span style=\"color:#F47067\">||</span><span style=\"color:#96D0FF\"> &quot;1em&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}))</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: palevioletred;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfont-size: 1em;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tborder: 2px solid palevioletred;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tborder-radius: 3px;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Wrapper</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">Button</span><span style=\"color:#96D0FF\">} {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\tcolor: red;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> mixin</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: green;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> MyComp</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground-color: yellow;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">mixin</span><span style=\"color:#96D0FF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> rotate</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> keyframes</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfrom {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\ttransform: rotate(0deg);</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tto {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\ttransform: rotate(360deg);</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Rotate</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tdisplay: inline-block;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tanimation: ${</span><span style=\"color:#ADBAC7\">rotate</span><span style=\"color:#96D0FF\">} 2s linear infinite;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tpadding: 2rem 1rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tfont-size: 2rem;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<p>Replace some mixins with constant yak files.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-diff\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span class=\"diff remove\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled, { css } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span class=\"diff remove\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { colors } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;./colors-mixin&quot;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span class=\"diff add\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { css, styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span class=\"diff add\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { colors } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;./colors.yak&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tbackground: ${</span><span style=\"color:#ADBAC7\">colors</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">primary</span><span style=\"color:#96D0FF\">};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: ${</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;white&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#ADBAC7\"> colors</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">primary</span><span style=\"color:#96D0FF\">};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<p>Wrap the imported component in a local component when you want to reference it.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-diff\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span class=\"diff remove\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span class=\"diff add\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { Button } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;./button&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> LocalButton</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> styled</span><span style=\"color:#ADBAC7\">(Button)</span><span style=\"color:#96D0FF\">``</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Wrapper</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span class=\"diff remove\" data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">Button</span><span style=\"color:#96D0FF\">} {</span></span>\n<span class=\"diff add\" data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">LocalButton</span><span style=\"color:#96D0FF\">} {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\tcolor: red;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<p>Or add a static class to referenced components outside of the current file.</p>\n<div class=\"code-group\"><div data-title=\"my-component.tsx\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-diff\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span class=\"diff remove\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> styled </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;styled-components&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span class=\"diff add\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#6CB6FF\"> Button</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">button</span><span style=\"color:#96D0FF\">` </span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\tcolor: blue; </span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">; </span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#DCBDFB\"> MyComponent</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> () </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">\treturn</span><span style=\"color:#ADBAC7\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\t\t&lt;</span><span style=\"color:#8DDB8C\">Button</span></span>\n<span class=\"diff add\" data-line=\"\"><span style=\"color:#6CB6FF\">\t\t\tclassName</span><span style=\"color:#F47067\">=</span><span style=\"color:#96D0FF\">&quot;myButton&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\t\t&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\t\t\tClick me</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">\t\t&lt;/</span><span style=\"color:#8DDB8C\">Button</span><span style=\"color:#ADBAC7\">&gt;);</span></span></code></pre></figure></div><div data-title=\"wrapper.tsx\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-diff\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span class=\"diff remove\" data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { Button } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;./my-component&#x27;</span><span style=\"color:#ADBAC7\">; </span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Wrapper</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span class=\"diff remove\" data-line=\"\"><span style=\"color:#96D0FF\">\t${</span><span style=\"color:#ADBAC7\">Button</span><span style=\"color:#96D0FF\">} {</span></span>\n<span class=\"diff add\" data-line=\"\"><span style=\"color:#96D0FF\">\t.myButton {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t\tcolor: red;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">\t}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure></div></div>\n","isPage":false,"text":"\nReplace all your styled-components with next-yak. You can use the same API as you would with styled-components.\nimport styled, { css, keyframes } from &#x27;styled-components&#x27;; \nimport { styled, css, keyframes } from &#x27;next-yak&#x27;; \n \nconst Button = styled.button`\n\tbackground: #BF4F74;\n\tcolor: ${props =&gt; props.$primary ? &quot;white&quot; : &quot;#BF4F74&quot;};\n`;\n \nconst Input = styled.input.attrs(props =&gt; ({\n\ttype: &quot;text&quot;,\n\tsize: props.size || &quot;1em&quot;\n}))`\n\tcolor: palevioletred;\n\tfont-size: 1em;\n\tborder: 2px solid palevioletred;\n\tborder-radius: 3px;\n`;\n \nconst Wrapper = styled.div`\n\t${Button} {\n\t\tcolor: red;\n\t}\n`;\n \nconst mixin = css`\n\tcolor: green;\n`;\n \nconst MyComp = styled.div`\n\tbackground-color: yellow;\n\t${mixin}\n`;\n \nconst rotate = keyframes`\n\tfrom {\n\t\ttransform: rotate(0deg);\n\t}\n\tto {\n\t\ttransform: rotate(360deg);\n\t}\n`;\n \nconst Rotate = styled.div`\n\tdisplay: inline-block;\n\tanimation: ${rotate} 2s linear infinite;\n\tpadding: 2rem 1rem;\n\tfont-size: 2rem;\n`;\nReplace some mixins with constant yak files.\nimport styled, { css } from &#x27;styled-components&#x27;; \nimport { colors } from &quot;./colors-mixin&quot;; \nimport { css, styled } from &#x27;next-yak&#x27;; \nimport { colors } from &#x27;./colors.yak&#x27;; \n \nconst Button = styled.button`\n\tbackground: ${colors.primary};\n\tcolor: ${props =&gt; props.$primary ? &quot;white&quot; : colors.primary};\n`;\nWrap the imported component in a local component when you want to reference it.\nimport styled from &#x27;styled-components&#x27;; \nimport { styled } from &#x27;next-yak&#x27;; \nimport { Button } from &#x27;./button&#x27;;\n \nconst LocalButton = styled(Button)``;\n \nconst Wrapper = styled.div`\n\t${Button} {\n\t${LocalButton} {\n\t\tcolor: red;\n\t}\n`;\nOr add a static class to referenced components outside of the current file.\nimport styled from &#x27;styled-components&#x27;; \nimport { styled } from &#x27;next-yak&#x27;; \n \nexport const Button = styled.button` \n\tcolor: blue; \n`; \n \nexport const MyComponent = () =&gt; {\n\treturn (\n\t\t&lt;Button\n\t\t\tclassName=&quot;myButton&quot;\n\t\t&gt;\n\t\t\tClick me\n\t\t&lt;/Button&gt;);import { styled } from &#x27;next-yak&#x27;;\nimport { Button } from &#x27;./my-component&#x27;; \n \nconst Wrapper = styled.div`\n\t${Button} {\n\t.myButton {\n\t\tcolor: red;\n\t}\n`;\n","title":"Replace styled-components with next-yak","titles":["Migration from styled-components","Migration"]},"50":{"href":"/migration-from-styled-components#missing-features","html":"\n<p>Currently <code>.withConfig</code> and the <code>as</code> prop are not supported. We might add support for these features in the future.</p>\n","isPage":false,"text":"\nCurrently .withConfig and the as prop are not supported. We might add support for these features in the future.\n","title":"Missing features","titles":["Migration from styled-components"]},"51":{"href":"/migration-from-styled-components#conclusion","html":"\n<p>next-yak is a drop-in replacement for styled-components that works with Server Components and Client Components. It\nprovides a familiar API and adds the ability to use static values in your styled components. This is especially useful\nwhen you want to use the same values across your application and don&#x27;t want to pass them down the component tree.</p>\n<p>If you have any questions or feedback, feel free to reach out to us on <a href=\"https://github.com/jantimon/next-yak\">GitHub</a></p>","isPage":false,"text":"\nnext-yak is a drop-in replacement for styled-components that works with Server Components and Client Components. It\nprovides a familiar API and adds the ability to use static values in your styled components. This is especially useful\nwhen you want to use the same values across your application and don&#x27;t want to pass them down the component tree.\nIf you have any questions or feedback, feel free to reach out to us on GitHub","title":"Conclusion","titles":["Migration from styled-components"]},"52":{"href":"/roadmap#roadmap","html":"</header>\n<p>You can find the current roadmap of next-yak here. If you have any questions or suggestions, feel free to open an issue.</p>\n","isPage":true,"text":"\nYou can find the current roadmap of next-yak here. If you have any questions or suggestions, feel free to open an issue.\n","title":"Roadmap","titles":[]},"53":{"href":"/roadmap#production-ready-10","html":"\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Static CSS extraction</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Support <code>keyframes</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Dynamic Properties</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Dynamic Property Values</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Reference other components\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Only in the same file</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Theming</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Build time constants</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Support <code>forwardRef</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Support <code>.attrs</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\" checked=\"\"/> Sourcemaps</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> Efficient parsing</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> Efficient runtime</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> Good error messages</li>\n</ul>","isPage":false,"text":"\n\n Static CSS extraction\n Support keyframes\n Dynamic Properties\n Dynamic Property Values\n Reference other components\n\n Only in the same file\n\n\n Theming\n Build time constants\n Support forwardRef\n Support .attrs\n Sourcemaps\n Efficient parsing\n Efficient runtime\n Good error messages\n","title":"Production Ready 1.0","titles":["Roadmap"]},"54":{"href":"/why-next-yak#motivation","html":"</header>\n<p>Why should you choose next-yak instead of all the other options you have?</p>\n<p>Most of the existing CSS-in-JS libraries are either slow or have a complex api. This project tries to find a middle ground between speed and api complexity.</p>\n<p>The goal of this project is to create a CSS-in-JS library that has the following properties:</p>\n<ul>\n<li>fast\n<ul>\n<li>no runtime</li>\n<li>can be statically extracted</li>\n<li>can be optimized by postcss</li>\n<li>no processing during hydration</li>\n<li>can make use of 103 early hints</li>\n</ul>\n</li>\n<li>api\n<ul>\n<li>ui colocation (mixing css and jsx)</li>\n<li>familiar styled.div api</li>\n<li>composable styled(Component)</li>\n<li>allows conditional styles</li>\n<li>allow to use props in styles</li>\n<li>allow to use a context based theme in styles</li>\n<li>typescript support</li>\n</ul>\n</li>\n</ul>\n<p>Optimizations are performed by postcss, allowing you to utilize its full potential and its plugins.\nThis also ensures consistency in optimizations across CSS files and CSS-in-JS.</p>\n","isPage":true,"text":"\nWhy should you choose next-yak instead of all the other options you have?\nMost of the existing CSS-in-JS libraries are either slow or have a complex api. This project tries to find a middle ground between speed and api complexity.\nThe goal of this project is to create a CSS-in-JS library that has the following properties:\n\nfast\n\nno runtime\ncan be statically extracted\ncan be optimized by postcss\nno processing during hydration\ncan make use of 103 early hints\n\n\napi\n\nui colocation (mixing css and jsx)\nfamiliar styled.div api\ncomposable styled(Component)\nallows conditional styles\nallow to use props in styles\nallow to use a context based theme in styles\ntypescript support\n\n\n\nOptimizations are performed by postcss, allowing you to utilize its full potential and its plugins.\nThis also ensures consistency in optimizations across CSS files and CSS-in-JS.\n","title":"Motivation","titles":[]},"55":{"href":"/why-next-yak#our-journey","html":"\n<p>Our journey with next-yak began in our company&#x27;s large Next.js project, where approximately 120 engineers work. We extensively used styled-components for flexibility and colocation of styles and code. Despite a few performance issues during server-side rendering, this setup served us well.</p>\n<p>However, with the React ecosystem&#x27;s constant evolution and increasing focus on performance, the introduction of React Server Components (RSC) by the React team, quickly adopted by Next.js with the app router, posed a new challenge. Third-party packages had to rethink their approach to accommodate RSC&#x27;s new possibilities.</p>\n<p>While runtime CSS-in-JS libraries offer great flexibility, they often struggle to work well with Server Components. Several static extraction-based CSS-in-JS libraries were developed to address this issue, but none made the transition from styled-components easy for us, as it would require rewriting over 5000 styled components.</p>\n<p>We envisioned a solution that would require minimal changes from developers familiar with styled-components, while offering the benefits of a static CSS-in-JS framework compatible with Next.js and Server Components. This vision led to the creation of next-yak:</p>\n<ul>\n<li>\n<p><strong>Static Analysis</strong>: next-yak employs static analysis to parse and analyze your styles at build time, generating CSS-Modules files well-integrated with Next.js. It also replaces the defined styles in your files with an invocation of its runtime.</p>\n</li>\n<li>\n<p><strong>Runtime</strong>: To retain some dynamic behavior, the runtime uses the generated class names and modifies classes based on the provided props.</p>\n</li>\n</ul>\n","isPage":false,"text":"\nOur journey with next-yak began in our company&#x27;s large Next.js project, where approximately 120 engineers work. We extensively used styled-components for flexibility and colocation of styles and code. Despite a few performance issues during server-side rendering, this setup served us well.\nHowever, with the React ecosystem&#x27;s constant evolution and increasing focus on performance, the introduction of React Server Components (RSC) by the React team, quickly adopted by Next.js with the app router, posed a new challenge. Third-party packages had to rethink their approach to accommodate RSC&#x27;s new possibilities.\nWhile runtime CSS-in-JS libraries offer great flexibility, they often struggle to work well with Server Components. Several static extraction-based CSS-in-JS libraries were developed to address this issue, but none made the transition from styled-components easy for us, as it would require rewriting over 5000 styled components.\nWe envisioned a solution that would require minimal changes from developers familiar with styled-components, while offering the benefits of a static CSS-in-JS framework compatible with Next.js and Server Components. This vision led to the creation of next-yak:\n\n\nStatic Analysis: next-yak employs static analysis to parse and analyze your styles at build time, generating CSS-Modules files well-integrated with Next.js. It also replaces the defined styles in your files with an invocation of its runtime.\n\n\nRuntime: To retain some dynamic behavior, the runtime uses the generated class names and modifies classes based on the provided props.\n\n\n","title":"Our Journey","titles":["Motivation"]},"56":{"href":"/why-next-yak#when-should-you-use-next-yak","html":"\n","isPage":false,"text":"\n","title":"When should you use next-yak","titles":["Motivation"]},"57":{"href":"/why-next-yak#if-youre-familiar-with-styled-components","html":"\n<p>See related documentation: <a href=\"/migration-from-styled-components\">Migration from styled-components</a></p>\n<p>If you&#x27;re familiar with styled-components, next-yak enables you to use the same syntax in the new era of streaming and Server Components.\nAdditionally it&#x27;s really fast and has a small footprint.</p>\n<div class=\"code-group\"><div data-title=\"javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled, css } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> MyParagraph</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">p</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: ${</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#96D0FF\">) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;teal&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;orange&quot;};</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  ${</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#6CB6FF\">props</span><span style=\"color:#96D0FF\">) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> props</span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#DCBDFB\"> css</span><span style=\"color:#96D0FF\">`padding: 16px;`}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  background-color: #f0f0f0;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#DCBDFB\"> MyComponent</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> () </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  return</span><span style=\"color:#ADBAC7\"> &lt;</span><span style=\"color:#8DDB8C\">MyParagraph</span><span style=\"color:#ADBAC7\">&gt;I work like styled-components&lt;/</span><span style=\"color:#8DDB8C\">MyParagraph</span><span style=\"color:#ADBAC7\">&gt;;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div><div data-title=\"typescript\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"twoslash lsp\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">css</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">)</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">StaticCSSProp</span><span> </span><span style=\"color:#ADBAC7\">(+</span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">overload</span><span style=\"color:#ADBAC7\">)</span></span><div class=\"twoslash-popup-jsdoc\"><p>css() runtime factory of css``</p>\n<p>/!\\ next-yak transpiles css<code> and styled</code></p>\n<p>This changes the typings of the css<code> and styled</code> functions. During development the user of next-yak wants to work with the typings BEFORE compilation.</p>\n<p>Therefore this is only an internal function only and it must be cast to any before exported to the user.</p></div></div></div><span class=\"twoslash-target\">css</span></span></span><span style=\"color:#ADBAC7\"> }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyParagraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyParagraph</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">p</span><span style=\"color:#ADBAC7\">: StyledLiteral</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.DetailedHTMLProps</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">, HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">p</span></span></span><span style=\"color:#ADBAC7\">&lt;{</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">primary</span></span></span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span> </span><span style=\"color:#ADBAC7\">}&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">color: ${</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\">)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">primary</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;teal&quot;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">:</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;orange&quot;};</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">${</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\">)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\">.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$primary</span><span style=\"color:#F47067\">?:</span><span> </span><span style=\"color:#ADBAC7\">boolean</span><span> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">primary</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">css</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">)</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">StaticCSSProp</span><span> </span><span style=\"color:#ADBAC7\">(+</span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">overload</span><span style=\"color:#ADBAC7\">)</span></span><div class=\"twoslash-popup-jsdoc\"><p>css() runtime factory of css``</p>\n<p>/!\\ next-yak transpiles css<code> and styled</code></p>\n<p>This changes the typings of the css<code> and styled</code> functions. During development the user of next-yak wants to work with the typings BEFORE compilation.</p>\n<p>Therefore this is only an internal function only and it must be cast to any before exported to the user.</p></div></div></div><span class=\"twoslash-target\">css</span></span></span><span style=\"color:#96D0FF\">`padding: 16px;`}</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">background-color: #f0f0f0;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">MyComponent</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Element</span></span></div></div><span class=\"twoslash-target\">MyComponent</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">return</span><span> </span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#8DDB8C\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyParagraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyParagraph</span></span></span><span style=\"color:#ADBAC7\">&gt;I work like styled-components&lt;/</span><span style=\"color:#8DDB8C\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyParagraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyParagraph</span></span></span><span style=\"color:#ADBAC7\">&gt;;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div></div>\n<p>And if you use TypeScript, next-yak is fully typed to help you</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"twoslash lsp\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">css</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">)</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">StaticCSSProp</span><span> </span><span style=\"color:#ADBAC7\">(+</span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">overload</span><span style=\"color:#ADBAC7\">)</span></span><div class=\"twoslash-popup-jsdoc\"><p>css() runtime factory of css``</p>\n<p>/!\\ next-yak transpiles css<code> and styled</code></p>\n<p>This changes the typings of the css<code> and styled</code> functions. During development the user of next-yak wants to work with the typings BEFORE compilation.</p>\n<p>Therefore this is only an internal function only and it must be cast to any before exported to the user.</p></div></div></div><span class=\"twoslash-target\">css</span></span></span><span style=\"color:#ADBAC7\"> }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyParagraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$secondary</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyParagraph</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">p</span><span style=\"color:#ADBAC7\">: StyledLiteral</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.DetailedHTMLProps</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">, HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">p</span></span></span><span style=\"color:#ADBAC7\">&lt;{</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$primary</span><span style=\"color:#ADBAC7\">: boolean</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$primary</span><span style=\"color:#ADBAC7\">: boolean</span></span></div></div><span class=\"twoslash-target\">primary</span></span></span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\">;</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$secondary</span><span style=\"color:#ADBAC7\">: boolean</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$secondary</span><span style=\"color:#ADBAC7\">: boolean</span></span></div></div><span class=\"twoslash-target\">secondary</span></span></span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\">; }&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">${</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#ADBAC7\">: boolean;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$secondary</span><span style=\"color:#ADBAC7\">: boolean;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    </span><span style=\"color:#F47067\">return</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: React.ClassAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#ADBAC7\">: boolean;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$secondary</span><span style=\"color:#ADBAC7\">: boolean;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#ADBAC7\"><span>$<span class=\"twoslash-completion-cursor\"><div class=\"twoslash-completion-list\"><div class=\"twoslash-completion-list-item\"><span><span class=\"twoslash-completions-matched\">$</span><span class=\"twoslash-completions-unmatched\">primary</span></span></div><div class=\"twoslash-completion-list-item\"><span><span class=\"twoslash-completions-matched\">$</span><span class=\"twoslash-completions-unmatched\">secondary</span></span></div></div></span></span></span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">}</span><span style=\"color:#96D0FF\">)</span><span style=\"color:#96D0FF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">any</span></span></div></div><span class=\"twoslash-target\">MyComponent</span></span></span><span style=\"color:#ADBAC7\"> = () =&gt; {</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">return &lt;</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyParagraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$primary</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$secondary</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">boolean</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyParagraph</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#ADBAC7\"><span>$<span class=\"twoslash-completion-cursor\"><div class=\"twoslash-completion-list\"><div class=\"twoslash-completion-list-item\"><span><span class=\"twoslash-completions-matched\">$</span><span class=\"twoslash-completions-unmatched\">primary</span></span></div><div class=\"twoslash-completion-list-item\"><span><span class=\"twoslash-completions-matched\">$</span><span class=\"twoslash-completions-unmatched\">secondary</span></span></div></div></span></span></span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">};</span></span></code></pre></figure>\n","isPage":false,"text":"\nSee related documentation: Migration from styled-components\nIf you&#x27;re familiar with styled-components, next-yak enables you to use the same syntax in the new era of streaming and Server Components.\nAdditionally it&#x27;s really fast and has a small footprint.\nimport { styled, css } from &#x27;next-yak&#x27;;\n \nconst MyParagraph = styled.p`\n  color: ${(props) =&gt; props.$primary ? &quot;teal&quot; : &quot;orange&quot;};\n  ${(props) =&gt; props.$primary &amp;&amp; css`padding: 16px;`}\n  background-color: #f0f0f0;\n`;\n \nexport const MyComponent = () =&gt; {\n  return &lt;MyParagraph&gt;I work like styled-components&lt;/MyParagraph&gt;;\n}import { const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled, function css(styles: TemplateStringsArray): StaticCSSProp (+1 overload)css() runtime factory of css``\n/!\\ next-yak transpiles css and styled\nThis changes the typings of the css and styled functions. During development the user of next-yak wants to work with the typings BEFORE compilation.\nTherefore this is only an internal function only and it must be cast to any before exported to the user.css } from &#x27;next-yak&#x27;;\n \nconst const MyParagraph: React.FunctionComponent&lt;{\n  $primary?: boolean | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyParagraph = const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled.p: StyledLiteral&lt;React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLParagraphElement&gt;, HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}p&lt;{ $primary?: boolean | undefined$$primary?: boolean | undefinedprimary?: boolean }&gt;`\n  color: ${(props: React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt; &amp; {\n  $primary?: boolean | undefined;\n} &amp; {\n  ...;\n}props) =&gt; props: React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt; &amp; {\n  $primary?: boolean | undefined;\n} &amp; {\n  ...;\n}props.$primary?: boolean | undefined$$primary?: boolean | undefinedprimary ? &quot;teal&quot; : &quot;orange&quot;};\n  ${(props: React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt; &amp; {\n  $primary?: boolean | undefined;\n} &amp; {\n  ...;\n}props) =&gt; props: React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt; &amp; {\n  $primary?: boolean | undefined;\n} &amp; {\n  ...;\n}props.$primary?: boolean | undefined$$primary?: boolean | undefinedprimary &amp;&amp; function css(styles: TemplateStringsArray): StaticCSSProp (+1 overload)css() runtime factory of css``\n/!\\ next-yak transpiles css and styled\nThis changes the typings of the css and styled functions. During development the user of next-yak wants to work with the typings BEFORE compilation.\nTherefore this is only an internal function only and it must be cast to any before exported to the user.css`padding: 16px;`}\n  background-color: #f0f0f0;\n`;\n \nexport const const MyComponent: () =&gt; React.JSX.ElementMyComponent = () =&gt; {\n  return &lt;const MyParagraph: React.FunctionComponent&lt;{\n  $primary?: boolean | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyParagraph&gt;I work like styled-components&lt;/const MyParagraph: React.FunctionComponent&lt;{\n  $primary?: boolean | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyParagraph&gt;;\n}\nAnd if you use TypeScript, next-yak is fully typed to help you\nimport { const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled, function css(styles: TemplateStringsArray): StaticCSSProp (+1 overload)css() runtime factory of css``\n/!\\ next-yak transpiles css and styled\nThis changes the typings of the css and styled functions. During development the user of next-yak wants to work with the typings BEFORE compilation.\nTherefore this is only an internal function only and it must be cast to any before exported to the user.css } from &#x27;next-yak&#x27;;\n \nconst const MyParagraph: React.FunctionComponent&lt;{\n  $primary: boolean;\n  $secondary: boolean;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyParagraph = const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled.p: StyledLiteral&lt;React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLParagraphElement&gt;, HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}p&lt;{ $primary: boolean$$primary: booleanprimary: boolean; $secondary: boolean$$secondary: booleansecondary: boolean; }&gt;`\n  ${(props: React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt; &amp; {\n  $primary: boolean;\n  $secondary: boolean;\n} &amp; {\n  ...;\n}props =&gt; {\n    return props: React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt; &amp; {\n  $primary: boolean;\n  $secondary: boolean;\n} &amp; {\n  ...;\n}props.$$primary$secondary\n  })}\n`;\n \nexport anyMyComponent = () =&gt; {\n  return &lt;const MyParagraph: React.FunctionComponent&lt;{\n  $primary: boolean;\n  $secondary: boolean;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyParagraph $$primary$secondary\n};\n","title":"If you&#x27;re familiar with styled-components","titles":["Motivation","When should you use next-yak"]},"58":{"href":"/why-next-yak#in-general","html":"\n<p>Consider using next-yak if you value:</p>\n","isPage":false,"text":"\nConsider using next-yak if you value:\n","title":"In General","titles":["Motivation","When should you use next-yak"]},"59":{"href":"/why-next-yak#colocation","html":"\n<p>Having your styles and code together in one place.</p>\n<div class=\"code-group\"><div data-title=\"javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> MyParagraph</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">p</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  color: ${</span><span style=\"color:#96D0FF\">({</span><span style=\"color:#6CB6FF\">$variant</span><span style=\"color:#96D0FF\">}) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> $variant</span><span style=\"color:#F47067\"> ===</span><span style=\"color:#96D0FF\"> &#x27;primary&#x27;</span><span style=\"color:#F47067\"> ?</span><span style=\"color:#96D0FF\"> &quot;red&quot;</span><span style=\"color:#F47067\"> :</span><span style=\"color:#96D0FF\"> &quot;blue&quot;}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> MyOtherComponent</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">p</span><span style=\"color:#96D0FF\">``</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> const</span><span style=\"color:#DCBDFB\"> MyComponent</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  if</span><span style=\"color:#ADBAC7\">(props.$variant) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    return</span><span style=\"color:#ADBAC7\"> (&lt;</span><span style=\"color:#8DDB8C\">MyParagraph</span><span style=\"color:#6CB6FF\"> $variant</span><span style=\"color:#F47067\">={</span><span style=\"color:#ADBAC7\">props.$variant</span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&gt;</span><span style=\"color:#F47067\">{</span><span style=\"color:#ADBAC7\">props.children</span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&lt;/</span><span style=\"color:#8DDB8C\">MyParagraph</span><span style=\"color:#ADBAC7\">&gt;);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">  return</span><span style=\"color:#ADBAC7\"> (&lt;</span><span style=\"color:#8DDB8C\">MyOtherComponent</span><span style=\"color:#ADBAC7\">&gt;</span><span style=\"color:#F47067\">{</span><span style=\"color:#ADBAC7\">props.children</span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&lt;/</span><span style=\"color:#8DDB8C\">MyOtherComponent</span><span style=\"color:#ADBAC7\">&gt;);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div><div data-title=\"typescript\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"twoslash lsp\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">FC</span></span></div></div><span class=\"twoslash-target\">FC</span></span></span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">ReactNode</span></span></div></div><span class=\"twoslash-target\">ReactNode</span></span></span><span style=\"color:#ADBAC7\"> }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;react&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\"> }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyParagraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyParagraph</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">p</span><span style=\"color:#ADBAC7\">: StyledLiteral</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.DetailedHTMLProps</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">, HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">p</span></span></span><span style=\"color:#ADBAC7\">&lt;{</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;primary&#x27;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;secondary&#x27;</span><span> </span><span style=\"color:#ADBAC7\">}&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">color: ${</span><span style=\"color:#96D0FF\">({</span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#96D0FF\">})</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">===</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&#x27;primary&#x27;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;red&quot;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">:</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;blue&quot;}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyOtherComponent</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyOtherComponent</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">p</span><span style=\"color:#ADBAC7\">: StyledLiteral</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.DetailedHTMLProps</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">, HTMLParagraphElement</span><span style=\"color:#F47067\">&gt;&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">p</span></span></span><span style=\"color:#96D0FF\">``</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyComponent</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">FC</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">children</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">ReactNode</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;</span></span></div></div><span class=\"twoslash-target\">MyComponent</span></span></span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">FC</span></span></div></div><span class=\"twoslash-target\">FC</span></span></span><span style=\"color:#ADBAC7\">&lt;{</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;primary&#x27;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;secondary&#x27;</span><span style=\"color:#ADBAC7\">;</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">children</span><span style=\"color:#ADBAC7\">: ReactNode</span></span></div></div><span class=\"twoslash-target\">children</span></span></span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">ReactNode</span></span></div></div><span class=\"twoslash-target\">ReactNode</span></span></span><span> </span><span style=\"color:#ADBAC7\">}&gt;</span><span> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: any</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#ADBAC7\">)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">if</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: any</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">any</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">any</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    </span><span style=\"color:#F47067\">return</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#8DDB8C\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyParagraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyParagraph</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#F47067\">={</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: any</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">any</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">any</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&gt;</span><span style=\"color:#F47067\">{</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: any</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">any</span></span></div></div><span class=\"twoslash-target\">children</span></span></span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&lt;/</span><span style=\"color:#8DDB8C\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyParagraph</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyParagraph</span></span></span><span style=\"color:#ADBAC7\">&gt;);</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">return</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#8DDB8C\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyOtherComponent</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyOtherComponent</span></span></span><span style=\"color:#ADBAC7\">&gt;</span><span style=\"color:#F47067\">{</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">props</span><span style=\"color:#ADBAC7\">: any</span></span></div></div><span class=\"twoslash-target\">props</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">any</span></span></div></div><span class=\"twoslash-target\">children</span></span></span><span style=\"color:#F47067\">}</span><span style=\"color:#ADBAC7\">&lt;/</span><span style=\"color:#8DDB8C\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">MyOtherComponent</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLParagraphElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">MyOtherComponent</span></span></span><span style=\"color:#ADBAC7\">&gt;);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></div></div>\n","isPage":false,"text":"\nHaving your styles and code together in one place.\nimport { styled } from &#x27;next-yak&#x27;;\n \nconst MyParagraph = styled.p`\n  color: ${({$variant}) =&gt; $variant === &#x27;primary&#x27; ? &quot;red&quot; : &quot;blue&quot;}\n`;\n \nconst MyOtherComponent = styled.p``;\n \nexport const MyComponent = (props) =&gt; {\n  if(props.$variant) {\n    return (&lt;MyParagraph $variant={props.$variant}&gt;{props.children}&lt;/MyParagraph&gt;);\n  }\n \n  return (&lt;MyOtherComponent&gt;{props.children}&lt;/MyOtherComponent&gt;);\n}import { import FCFC, import ReactNodeReactNode } from &#x27;react&#x27;;\nimport { const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled } from &#x27;next-yak&#x27;;\n \nconst const MyParagraph: React.FunctionComponent&lt;{\n  $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyParagraph = const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled.p: StyledLiteral&lt;React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLParagraphElement&gt;, HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}p&lt;{ $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant?: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant?: &#x27;primary&#x27; | &#x27;secondary&#x27; }&gt;`\n  color: ${({$variant: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant}) =&gt; $variant: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant === &#x27;primary&#x27; ? &quot;red&quot; : &quot;blue&quot;}\n`;\n \nconst const MyOtherComponent: React.FunctionComponent&lt;React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyOtherComponent = const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled.p: StyledLiteral&lt;React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLParagraphElement&gt;, HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}p``;\n \nexport const const MyComponent: FC&lt;{\n  $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined;\n  children: ReactNode;\n}&gt;MyComponent: import FCFC&lt;{ $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant?: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant?: &#x27;primary&#x27; | &#x27;secondary&#x27;; children: ReactNodechildren: import ReactNodeReactNode }&gt; = (props: anyprops) =&gt; {\n  if(props: anyprops.any$anyvariant) {\n    return (&lt;const MyParagraph: React.FunctionComponent&lt;{\n  $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyParagraph $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant?: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant={props: anyprops.any$anyvariant}&gt;{props: anyprops.anychildren}&lt;/const MyParagraph: React.FunctionComponent&lt;{\n  $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined;\n} &amp; React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyParagraph&gt;);\n  }\n \n  return (&lt;const MyOtherComponent: React.FunctionComponent&lt;React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyOtherComponent&gt;{props: anyprops.anychildren}&lt;/const MyOtherComponent: React.FunctionComponent&lt;React.ClassAttributes&lt;HTMLParagraphElement&gt; &amp; React.HTMLAttributes&lt;HTMLParagraphElement&gt;&gt; &amp; {\n  ...;\n}MyOtherComponent&gt;);\n}\n","title":"Colocation","titles":["Motivation","When should you use next-yak","In General"]},"60":{"href":"/why-next-yak#familiarity","html":"\n<p>Writing real CSS with the latest features without a complicated setup.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Header</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  &amp; &gt; *:has(:checked) {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    background-color: lab(87.6 125 104);</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n","isPage":false,"text":"\nWriting real CSS with the latest features without a complicated setup.\nimport { styled } from &#x27;next-yak&#x27;;\n \nconst Header = styled.div`\n  &amp; &gt; *:has(:checked) {\n    background-color: lab(87.6 125 104);\n  }\n`;\n","title":"Familiarity","titles":["Motivation","When should you use next-yak","In General"]},"61":{"href":"/why-next-yak#compatibility","html":"\n<p>Working with utility-first CSS frameworks like Tailwind.</p>\n<div class=\"code-group\"><div data-title=\"javascript\"><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled, atoms } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Header</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">nav</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  ${</span><span style=\"color:#96D0FF\">({</span><span style=\"color:#6CB6FF\">$variant</span><span style=\"color:#96D0FF\">}) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> $variant</span><span style=\"color:#F47067\"> ===</span><span style=\"color:#96D0FF\"> &quot;primary&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    ?</span><span style=\"color:#DCBDFB\"> atoms</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#96D0FF\">&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;</span><span style=\"color:#96D0FF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    :</span><span style=\"color:#DCBDFB\"> atoms</span><span style=\"color:#96D0FF\">(</span><span style=\"color:#96D0FF\">&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;</span><span style=\"color:#96D0FF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span></code></pre></figure></div><div data-title=\"typescript\"><figure data-rehype-pretty-code-figure=\"\"><pre class=\"twoslash lsp\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"tsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span> </span><span style=\"color:#ADBAC7\">{ </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">atoms</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">atoms</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">className</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>Allows to use atomic CSS classes in a styled or css block</p></div></div></div><span class=\"twoslash-target\">atoms</span></span></span><span style=\"color:#ADBAC7\"> }</span><span> </span><span style=\"color:#F47067\">from</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">Header</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">ClassAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLElement</span><span style=\"color:#ADBAC7\">&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">HTMLAttributes</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">HTMLElement</span><span style=\"color:#ADBAC7\">&gt;&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">Header</span></span></span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">styled</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;(</span><span style=\"color:#F69D50\">Component</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">keyof</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">JSX</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">IntrinsicElements</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">(&lt;</span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{}&gt;(</span><span style=\"color:#F69D50\">styles</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TemplateStringsArray</span><span style=\"color:#ADBAC7\">,</span><span> </span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">values</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">CSSInterpolation</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">TCSSProps</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">theme</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">YakTheme</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}&gt;[])</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">React</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FunctionComponent</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})</span><span> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>The <code>styled</code> method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.</p></div></div></div><span class=\"twoslash-target\">styled</span></span></span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">nav</span><span style=\"color:#ADBAC7\">: StyledLiteral</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.DetailedHTMLProps</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">React.HTMLAttributes</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">HTMLElement</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">, HTMLElement</span><span style=\"color:#F47067\">&gt;&gt;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">&amp;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">attrs</span><span style=\"color:#ADBAC7\">: &lt;</span><span style=\"color:#F69D50\">TAttrsIn_77</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">object</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">=</span><span> </span><span style=\"color:#ADBAC7\">{},</span><span> </span><span style=\"color:#F69D50\">TAttrsOut_77</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">extends</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">AttrsMerged</span><span style=\"color:#ADBAC7\">&lt;...&gt;</span><span> </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">AttrsMerged</span><span style=\"color:#ADBAC7\">&lt;...&gt;&gt;(</span><span style=\"color:#F69D50\">attrs</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F69D50\">Attrs</span><span style=\"color:#ADBAC7\">&lt;...&gt;)</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">StyledLiteral</span><span style=\"color:#F47067\">&lt;...&gt;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></div></div><span class=\"twoslash-target\">nav</span></span></span><span style=\"color:#ADBAC7\">&lt;{</span><span> </span><span style=\"color:#F69D50\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#ADBAC7\">$variant</span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#F47067\">?:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;primary&#x27;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&#x27;secondary&#x27;</span><span> </span><span style=\"color:#ADBAC7\">}&gt;</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span>  </span><span style=\"color:#96D0FF\">${</span><span style=\"color:#96D0FF\">({</span><span style=\"color:#6CB6FF\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#96D0FF\">})</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#ADBAC7\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">$</span></span><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F69D50\">$variant</span><span style=\"color:#ADBAC7\">:</span><span> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#96D0FF\">&quot;secondary&quot;</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#F47067\">|</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">undefined</span></span></div></div><span class=\"twoslash-target\">variant</span></span></span><span style=\"color:#96D0FF\"> </span><span style=\"color:#F47067\">===</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#96D0FF\">&quot;primary&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    </span><span style=\"color:#F47067\">?</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">atoms</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">atoms</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">[])</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">className</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>Allows to use atomic CSS classes in a styled or css block</p></div></div></div><span class=\"twoslash-target\">atoms</span></span></span><span style=\"color:#96D0FF\">(</span><span style=\"color:#96D0FF\">&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;</span><span style=\"color:#96D0FF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    </span><span style=\"color:#F47067\">:</span><span style=\"color:#96D0FF\"> </span><span style=\"color:#DCBDFB\"><span class=\"twoslash-hover\"><div class=\"twoslash-popup-info-hover\"><div class=\"twoslash-popup-arrow\"></div><div class=\"twoslash-popup-scroll-container\"><span data-line=\"\"><span style=\"color:#F47067\">function</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#DCBDFB\">atoms</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">...</span><span style=\"color:#F69D50\">atoms</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">[])</span><span style=\"color:#F47067\">:</span><span> </span><span style=\"color:#ADBAC7\">()</span><span> </span><span style=\"color:#F47067\">=&gt;</span><span> </span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  </span><span style=\"color:#F69D50\">className</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> </span><span style=\"color:#6CB6FF\">string</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span><div class=\"twoslash-popup-jsdoc\"><p>Allows to use atomic CSS classes in a styled or css block</p></div></div></div><span class=\"twoslash-target\">atoms</span></span></span><span style=\"color:#96D0FF\">(</span><span style=\"color:#96D0FF\">&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;</span><span style=\"color:#96D0FF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  </span><span style=\"color:#96D0FF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span></span></code></pre></figure></div></div>\n","isPage":false,"text":"\nWorking with utility-first CSS frameworks like Tailwind.\nimport { styled, atoms } from &#x27;next-yak&#x27;;\n \nconst Header = styled.nav`\n  ${({$variant}) =&gt; $variant === &quot;primary&quot;\n    ? atoms(&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;)\n    : atoms(&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;)\n  }\n`import { const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled, const atoms: (...atoms: string[]) =&gt; () =&gt; {\n  className: string;\n}Allows to use atomic CSS classes in a styled or css blockatoms } from &#x27;next-yak&#x27;;\n \nconst const Header: React.FunctionComponent&lt;{\n  $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined;\n} &amp; React.ClassAttributes&lt;HTMLElement&gt; &amp; React.HTMLAttributes&lt;HTMLElement&gt;&gt; &amp; {\n  ...;\n}Header = const styled: (&lt;T&gt;(Component: keyof JSX.IntrinsicElements | React.FunctionComponent&lt;T&gt;) =&gt; (&lt;TCSSProps extends object = {}&gt;(styles: TemplateStringsArray, ...values: CSSInterpolation&lt;T &amp; TCSSProps &amp; {\n  theme: YakTheme;\n}&gt;[]) =&gt; React.FunctionComponent&lt;...&gt; &amp; {\n  ...;\n}) &amp; {\n  ...;\n}) &amp; {\n  ...;\n}The styled method works perfectly on all of your own or any third-party component, as long as they attach the passed className prop to a DOM element.styled.nav: StyledLiteral&lt;React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLElement&gt;, HTMLElement&gt;&gt; &amp; {\n  attrs: &lt;TAttrsIn_77 extends object = {}, TAttrsOut_77 extends AttrsMerged&lt;...&gt; = AttrsMerged&lt;...&gt;&gt;(attrs: Attrs&lt;...&gt;) =&gt; StyledLiteral&lt;...&gt;;\n}nav&lt;{ $variant?: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant?: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant?: &#x27;primary&#x27; | &#x27;secondary&#x27; }&gt;`\n  ${({$variant: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant}) =&gt; $variant: &quot;primary&quot; | &quot;secondary&quot; | undefined$$variant: &quot;primary&quot; | &quot;secondary&quot; | undefinedvariant === &quot;primary&quot;\n    ? function atoms(...atoms: string[]): () =&gt; {\n  className: string;\n}Allows to use atomic CSS classes in a styled or css blockatoms(&quot;mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8&quot;)\n    : function atoms(...atoms: string[]): () =&gt; {\n  className: string;\n}Allows to use atomic CSS classes in a styled or css blockatoms(&quot;bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow&quot;)\n  }\n`\n","title":"Compatibility","titles":["Motivation","When should you use next-yak","In General"]},"62":{"href":"/why-next-yak#composability","html":"\n<p>Building complex components from simpler ones.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\"><code data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { styled } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &#x27;next-yak&#x27;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Input</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">input</span><span style=\"color:#96D0FF\">``</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> Label</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">label</span><span style=\"color:#96D0FF\">``</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> FormElement</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> styled.</span><span style=\"color:#DCBDFB\">div</span><span style=\"color:#96D0FF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  :has(${</span><span style=\"color:#ADBAC7\">Input</span><span style=\"color:#96D0FF\">}:checked) {</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">    color: red;</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">`</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>","isPage":false,"text":"\nBuilding complex components from simpler ones.\nimport { styled } from &#x27;next-yak&#x27;;\n \nconst Input = styled.input``;\nconst Label = styled.label``;\nconst FormElement = styled.div`\n  :has(${Input}:checked) {\n    color: red;\n  }\n`;","title":"Composability","titles":["Motivation","When should you use next-yak","In General"]}},"dirtCount":0,"index":[["5000",{"2":{"55":1}}],["5rem",{"2":{"48":1}}],["5em",{"2":{"41":2}}],["🦬18fi82j1",{"2":{"34":1}}],["🦬18fi82j0",{"2":{"34":1}}],["quickly",{"2":{"55":1}}],["questions",{"2":{"51":1,"52":1}}],["query",{"2":{"29":2}}],["quot",{"2":{"12":16,"13":52,"14":2,"15":2,"16":64,"17":16,"19":6,"23":4,"29":2,"30":36,"33":2,"34":10,"36":42,"39":8,"40":6,"41":8,"43":8,"48":18,"49":14,"57":8,"59":64,"61":40}}],["3px",{"2":{"43":2,"49":1}}],["360deg",{"2":{"42":2,"49":1}}],["3",{"2":{"26":1}}],["333",{"2":{"24":1}}],["39",{"2":{"16":2}}],["769px",{"2":{"48":1}}],["768px",{"2":{"48":1}}],["7016",{"2":{"17":3}}],["77",{"2":{"13":2,"61":2}}],["7xl",{"2":{"13":4,"61":2}}],["420px",{"2":{"48":1}}],["48",{"2":{"17":1}}],["400",{"2":{"13":4,"61":2}}],["4",{"2":{"13":4,"61":2}}],["87",{"2":{"60":1}}],["85",{"2":{"17":1}}],["800",{"2":{"13":4,"61":2}}],["8",{"2":{"13":4,"61":2}}],["6",{"2":{"13":4,"60":1,"61":2}}],["||",{"2":{"43":2,"49":1}}],["|",{"2":{"12":19,"13":17,"16":12,"57":17,"59":33,"61":17}}],["kind",{"2":{"39":1}}],["keep",{"2":{"37":1}}],["keyframes`",{"2":{"14":2,"42":2,"49":1}}],["keyframes",{"0":{"42":1},"2":{"14":5,"42":4,"47":2,"49":2,"53":1}}],["keyof",{"2":{"12":2,"13":2,"16":2,"57":4,"59":3,"61":2}}],["know",{"2":{"25":1,"37":1,"39":1}}],["known",{"0":{"6":1},"2":{"40":1,"48":1}}],["myothercomponent",{"2":{"59":9}}],["myparagraph",{"2":{"57":13,"59":9}}],["my",{"2":{"49":1}}],["mybutton",{"2":{"49":2}}],["mycomponent",{"2":{"49":1,"57":2,"59":3}}],["mycomp",{"2":{"15":6,"45":2,"49":1}}],["modifies",{"2":{"55":1}}],["modules",{"2":{"17":2,"29":1,"31":1,"36":1,"55":1}}],["module",{"2":{"17":5,"23":1,"29":9,"30":5,"36":2}}],["most",{"2":{"54":1}}],["motivation",{"0":{"54":1},"1":{"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1}}],["mobile",{"2":{"48":1}}],["md",{"2":{"36":3}}],["mjs",{"2":{"23":1}}],["messages",{"2":{"53":1}}],["me",{"2":{"49":1}}],["media",{"2":{"48":5}}],["merged",{"2":{"35":1}}],["merging",{"2":{"26":1,"35":1}}],["means",{"2":{"29":1}}],["meant",{"2":{"18":1}}],["method",{"2":{"12":2,"13":2,"16":2,"57":4,"59":3,"61":2}}],["multiple",{"2":{"15":1}}],["must",{"2":{"12":3,"57":3}}],["made",{"2":{"55":1}}],["main",{"2":{"36":3,"41":1}}],["matching",{"2":{"29":1}}],["matchresource",{"2":{"29":1}}],["manager",{"2":{"22":1}}],["manner",{"2":{"17":1}}],["master",{"2":{"17":1}}],["marked",{"2":{"17":1}}],["may",{"2":{"16":1}}],["make",{"2":{"15":1,"54":1}}],["max",{"2":{"13":4,"48":2,"61":2}}],["mx",{"2":{"13":4,"61":2}}],["middle",{"2":{"54":1}}],["missing",{"0":{"50":1}}],["migration",{"0":{"37":1,"46":1},"1":{"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":2,"48":2,"49":2,"50":1,"51":1},"2":{"57":1}}],["might",{"2":{"36":1,"50":1}}],["min",{"2":{"48":1}}],["minimum",{"2":{"37":1}}],["minimal",{"2":{"9":1,"55":1}}],["minds",{"2":{"25":1}}],["mixing",{"2":{"54":1}}],["mixin",{"2":{"15":11,"45":4,"48":2,"49":3}}],["mixins",{"0":{"15":1,"45":1},"2":{"10":1,"15":1,"45":2,"49":1}}],["mix",{"0":{"4":1}}],["+1",{"2":{"12":3,"57":3}}],["$$primary$secondary",{"2":{"57":2}}],["$$variant",{"2":{"16":2}}],["$secondary",{"2":{"57":5}}],["$color",{"2":{"16":10}}],["$green",{"2":{"15":3}}],["$variant=",{"2":{"59":1}}],["$variant",{"2":{"13":10,"16":10,"59":13,"61":6}}],["$primary",{"2":{"12":20,"30":6,"34":3,"39":4,"40":4,"48":2,"49":2,"57":17}}],["$",{"2":{"12":6,"13":3,"14":2,"15":5,"16":6,"17":2,"30":2,"34":2,"39":2,"41":1,"42":2,"48":1,"49":4,"57":5,"59":2,"61":2,"62":1}}],["led",{"2":{"55":1}}],["label``",{"2":{"62":1}}],["label",{"2":{"62":1}}],["lab",{"2":{"60":1}}],["latest",{"2":{"60":1}}],["large",{"2":{"55":1}}],["lastly",{"2":{"29":1}}],["looks",{"2":{"48":1}}],["looking",{"2":{"29":1}}],["lot",{"2":{"35":1}}],["loader",{"0":{"28":1,"31":1},"1":{"29":1,"30":1,"32":1,"33":1,"34":1},"2":{"27":2,"28":2,"29":3,"31":3,"33":1,"34":1}}],["loaders",{"2":{"27":1,"29":2}}],["localbutton",{"2":{"49":2}}],["local",{"2":{"18":1,"49":1}}],["long",{"2":{"12":2,"13":2,"16":2,"57":4,"59":3,"61":2}}],["lg",{"2":{"13":4,"61":2}}],["lt",{"2":{"11":2,"12":49,"13":22,"16":30,"17":3,"18":2,"19":2,"24":2,"36":6,"39":2,"40":2,"41":4,"48":1,"49":2,"57":60,"59":50,"61":22}}],["linear",{"2":{"42":2,"49":1}}],["line",{"2":{"19":1}}],["like",{"2":{"13":1,"27":1,"36":1,"48":1,"57":2,"61":1}}],["lies",{"2":{"11":1}}],["literals",{"0":{"30":1},"2":{"27":1,"28":2,"30":1}}],["literal",{"2":{"5":1,"15":1,"16":2,"40":3,"44":1}}],["library",{"2":{"4":1,"54":1}}],["libraries",{"0":{"4":1},"2":{"4":1,"54":1,"55":2}}],["2px",{"2":{"43":2,"49":1}}],["2s",{"2":{"42":2,"49":1}}],["2307",{"2":{"17":3}}],["2",{"2":{"13":4,"17":1,"61":2}}],["29",{"2":{"11":6}}],["253",{"2":{"11":3}}],["2rem",{"2":{"11":3,"12":4,"16":4,"30":2,"33":2,"34":2,"42":4,"48":1,"49":2}}],["utilize",{"2":{"54":1}}],["utility",{"0":{"13":1},"2":{"10":1,"13":1,"15":1,"61":1}}],["ui",{"2":{"54":1}}],["up",{"2":{"48":1}}],["uddac18fi82j1",{"2":{"30":1}}],["uddac18fi82j0",{"2":{"30":1}}],["ud83e",{"2":{"30":2}}],["understand",{"2":{"25":1}}],["under",{"2":{"25":1}}],["undefinedvariant=",{"2":{"59":1}}],["undefinedvariant",{"2":{"13":3,"59":4,"61":3}}],["undefined$$variant",{"2":{"13":3,"59":5,"61":3}}],["undefined$$primary",{"2":{"12":4,"57":3}}],["undefinedprimary",{"2":{"12":4,"57":3}}],["undefined",{"2":{"12":9,"13":1,"57":7,"59":4,"61":1}}],["us",{"2":{"51":1,"55":2}}],["usages",{"2":{"27":1}}],["usage",{"2":{"17":1}}],["using",{"0":{"24":1},"2":{"12":1,"20":1,"22":1,"58":1}}],["usetheme",{"2":{"36":3}}],["usecontext",{"2":{"36":2}}],["uses",{"2":{"26":1,"27":1,"29":1,"55":1}}],["user",{"2":{"12":6,"36":2,"57":6}}],["useful",{"2":{"12":1,"51":1}}],["used",{"2":{"6":1,"14":1,"16":1,"29":2,"34":1,"40":1,"48":1,"55":1}}],["use",{"0":{"3":1,"7":1,"56":1},"1":{"57":1,"58":1,"59":1,"60":1,"61":1,"62":1},"2":{"4":2,"12":1,"13":4,"14":1,"15":1,"16":1,"18":1,"19":1,"24":2,"25":1,"29":1,"36":6,"39":3,"40":2,"41":3,"42":1,"48":2,"49":1,"51":2,"54":3,"57":2,"61":3}}],["rsc",{"2":{"55":2}}],["radius",{"2":{"43":2,"49":1}}],["runs",{"2":{"31":1}}],["runner",{"2":{"17":1}}],["runtime",{"0":{"35":1},"2":{"9":1,"12":4,"26":3,"28":1,"30":3,"35":2,"36":3,"53":1,"54":1,"55":4,"57":3}}],["r",{"2":{"17":2}}],["router",{"2":{"55":1}}],["rounded",{"2":{"13":4,"61":2}}],["roadmap",{"0":{"52":1},"1":{"53":1},"2":{"52":1}}],["rotate",{"2":{"42":10,"49":5}}],["root",{"2":{"17":2,"36":1}}],["rgba",{"2":{"11":3}}],["related",{"2":{"57":1}}],["release",{"2":{"2":1}}],["rewriting",{"2":{"55":1}}],["retain",{"2":{"55":1}}],["rethink",{"2":{"55":1}}],["returntype",{"2":{"17":2,"36":1}}],["returns",{"2":{"12":2,"30":1,"35":1,"36":2}}],["return",{"2":{"11":1,"12":3,"17":5,"18":1,"19":1,"24":1,"30":1,"36":3,"57":4,"59":4}}],["rendering",{"2":{"55":1}}],["replaces",{"2":{"55":1}}],["replacement",{"2":{"51":1}}],["replace",{"0":{"49":1},"2":{"49":2}}],["record",{"2":{"48":1}}],["recognizes",{"2":{"29":1}}],["reuse",{"2":{"45":1}}],["regular",{"2":{"36":1}}],["resolve",{"2":{"36":1}}],["resolveyakcontext",{"2":{"36":1}}],["resolves",{"2":{"36":1}}],["result",{"2":{"36":1}}],["responsible",{"2":{"26":2,"27":2,"35":1}}],["remove",{"0":{"32":1},"2":{"32":1}}],["require",{"2":{"23":1,"36":2,"55":2}}],["requirements",{"2":{"18":1}}],["request",{"2":{"8":1,"17":1}}],["red",{"2":{"18":1,"19":1,"30":3,"33":2,"34":1,"41":1,"44":2,"49":3,"59":2,"62":1}}],["re",{"0":{"57":1},"2":{"17":1,"24":1,"37":1,"57":1}}],["reach",{"2":{"51":1}}],["reactnodechildren",{"2":{"59":1}}],["reactnodereactnode",{"2":{"59":2}}],["reactnode",{"2":{"36":4,"59":1}}],["react",{"2":{"12":30,"13":9,"16":17,"17":7,"36":12,"55":3,"57":40,"59":29,"61":9}}],["reason",{"2":{"48":1}}],["readme",{"2":{"36":3}}],["ready",{"0":{"2":1,"53":1},"2":{"17":1,"24":1}}],["really",{"2":{"57":1}}],["real",{"2":{"27":1,"31":1,"60":1}}],["referenced",{"2":{"12":1,"15":1,"30":1,"33":1,"40":1,"44":1,"49":1}}],["references",{"0":{"6":1,"44":1},"2":{"30":1}}],["reference",{"0":{"5":1},"2":{"5":1,"13":1,"31":1,"44":2,"49":1,"53":1}}],["hints",{"2":{"54":1}}],["hightcontrast",{"2":{"17":2}}],["highcontrast",{"2":{"17":8,"36":2}}],["hydration",{"2":{"54":1}}],["https",{"2":{"17":1,"36":3}}],["htmldivelement",{"2":{"16":12}}],["htmlelement",{"2":{"13":4,"61":4}}],["htmlattributes",{"2":{"12":10,"13":2,"16":6,"57":13,"59":8,"61":2}}],["htmlparagraphelement",{"2":{"12":20,"57":26,"59":16}}],["hood",{"2":{"25":1}}],["however",{"2":{"55":1}}],["how",{"0":{"25":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1},"2":{"25":1}}],["homepage",{"2":{"24":2}}],["home",{"2":{"17":1}}],["holds",{"2":{"15":1}}],["hover",{"2":{"13":4,"30":2,"33":2,"34":2,"61":2}}],["h1",{"2":{"11":1}}],["h1`",{"2":{"11":2}}],["help",{"2":{"57":1}}],["hello",{"2":{"11":1,"12":4,"18":1,"19":1,"24":1}}],["headers",{"2":{"17":3,"36":2}}],["header",{"2":{"13":6,"60":1,"61":3}}],["headline",{"2":{"11":7}}],["heart",{"2":{"11":1}}],["here",{"2":{"8":1,"17":2,"24":1,"52":1}}],["having",{"2":{"59":1}}],["have",{"2":{"16":1,"18":1,"19":1,"40":1,"41":1,"48":1,"51":1,"52":1,"54":2}}],["had",{"2":{"55":1}}],["has",{"2":{"17":1,"26":1,"43":1,"54":1,"57":1,"60":1,"62":1}}],["hashighcontrast",{"2":{"17":4,"36":2}}],["hassle",{"2":{"17":1}}],["happy",{"2":{"8":1}}],["hard",{"2":{"2":1,"6":1}}],["plugins",{"2":{"54":1}}],["place",{"2":{"17":1,"59":1}}],["performance",{"2":{"55":2}}],["performed",{"2":{"54":1}}],["perfectly",{"2":{"12":2,"13":2,"16":2,"57":4,"59":3,"61":2}}],["picked",{"2":{"48":1}}],["puzzle",{"2":{"36":2}}],["pull",{"2":{"8":1,"17":1}}],["pnpm",{"2":{"17":1}}],["possibilities",{"2":{"55":1}}],["posed",{"2":{"55":1}}],["postcss",{"2":{"54":2}}],["point",{"2":{"36":1}}],["points",{"2":{"29":1,"36":1}}],["poorly",{"2":{"29":1}}],["power",{"2":{"20":1}}],["potential",{"2":{"16":1,"54":1}}],["popularized",{"2":{"12":1}}],["py",{"2":{"13":4,"61":2}}],["px",{"2":{"13":8,"61":4}}],["p",{"2":{"12":3,"13":4,"57":4,"59":3,"61":2}}],["predefine",{"2":{"45":1}}],["preserved",{"2":{"30":1}}],["present",{"2":{"16":1}}],["primary",{"2":{"12":4,"13":12,"16":14,"48":1,"49":2,"59":18,"61":10}}],["processing",{"2":{"54":1}}],["project",{"2":{"24":1,"48":1,"54":2,"55":1}}],["provided",{"2":{"55":1}}],["provides",{"2":{"51":1}}],["provider",{"2":{"36":3}}],["provide",{"2":{"17":2}}],["property",{"2":{"16":3,"30":4,"31":1,"34":2,"40":1,"53":1}}],["properties",{"2":{"12":1,"28":1,"34":1,"40":1,"53":1,"54":1}}],["propsprimary",{"2":{"12":4,"30":2,"34":2}}],["props",{"2":{"12":21,"15":7,"16":20,"17":5,"19":1,"26":1,"30":11,"34":6,"35":2,"39":4,"40":4,"41":2,"43":4,"48":2,"49":6,"54":1,"55":1,"57":16,"59":10}}],["prop",{"0":{"18":1,"41":1},"1":{"19":1},"2":{"10":1,"12":2,"13":2,"16":2,"18":1,"41":3,"50":1,"57":4,"59":3,"61":2}}],["production",{"0":{"2":1,"53":1}}],["p``",{"2":{"59":2}}],["p`",{"2":{"12":2,"57":1,"59":1}}],["palevioletred",{"2":{"43":4,"49":2}}],["papayawhip",{"2":{"41":2}}],["padding",{"2":{"24":1,"41":1}}],["pages",{"2":{"24":1}}],["page",{"2":{"18":1,"29":8,"30":6}}],["packages",{"2":{"36":3,"55":1}}],["package",{"0":{"22":1},"2":{"17":1,"22":1}}],["packed",{"2":{"9":1}}],["pass",{"2":{"17":1,"51":1}}],["passed",{"2":{"12":2,"13":2,"15":1,"16":2,"30":1,"57":4,"59":3,"61":2}}],["parse",{"2":{"55":1}}],["parsing",{"2":{"53":1}}],["parameter",{"2":{"29":2}}],["paragraph",{"2":{"12":19}}],["part",{"0":{"27":1,"35":1},"1":{"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1},"2":{"26":5,"35":1,"36":2,"40":1}}],["party",{"2":{"12":2,"13":2,"16":2,"55":1,"57":4,"59":3,"61":2}}],["parts",{"2":{"12":1,"26":1,"28":1,"30":3,"39":1}}],["journey",{"0":{"55":1},"2":{"55":1}}],["jantimon",{"2":{"36":3}}],["justify",{"2":{"13":4,"61":2}}],["just",{"2":{"8":1,"13":1,"16":2,"19":2,"41":1,"44":1,"45":1}}],["json",{"2":{"19":1,"41":1}}],["jsximportsource",{"2":{"19":2,"41":1}}],["jsx",{"2":{"12":3,"13":2,"16":2,"54":1,"57":5,"59":3,"61":2}}],["js",{"0":{"3":1,"4":1},"2":{"4":1,"9":1,"17":1,"20":3,"23":3,"24":1,"29":3,"32":1,"36":3,"54":3,"55":7}}],["drop",{"2":{"51":1}}],["drive",{"2":{"12":1}}],["dist",{"2":{"36":4}}],["display",{"2":{"16":4,"17":2}}],["different",{"2":{"30":1,"36":2}}],["differently",{"2":{"18":1}}],["difference",{"2":{"17":1,"40":1,"41":1}}],["directory",{"2":{"17":1,"36":1}}],["directly",{"2":{"12":2,"24":1,"30":1}}],["div",{"2":{"15":1,"16":3,"18":2,"19":2,"41":2,"54":1}}],["div`",{"2":{"15":3,"16":2,"24":1,"42":2,"44":2,"45":2,"49":5,"60":1,"62":1}}],["documentation",{"2":{"57":1}}],["documented",{"2":{"29":1}}],["down",{"2":{"51":1}}],["done",{"2":{"24":1,"35":1}}],["don",{"2":{"18":1,"29":1,"34":1,"51":1}}],["dom",{"2":{"12":2,"13":2,"16":2,"57":4,"59":3,"61":2}}],["does",{"0":{"6":1,"25":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1}}],["doesn",{"2":{"5":1,"48":1}}],["during",{"2":{"11":1,"12":4,"15":1,"16":1,"30":1,"44":1,"48":3,"54":1,"55":1,"57":3}}],["developers",{"2":{"55":1}}],["developed",{"2":{"55":1}}],["development",{"2":{"12":3,"57":3}}],["despite",{"2":{"55":1}}],["desktop",{"2":{"48":1}}],["defined",{"2":{"55":1}}],["define",{"2":{"41":1,"42":1}}],["definitelytyped",{"2":{"17":2}}],["default",{"2":{"23":1,"24":1,"36":2,"47":1}}],["dependency",{"2":{"22":1}}],["declaration",{"2":{"15":1,"17":1}}],["declarations",{"2":{"14":1,"15":2,"17":1}}],["declare",{"2":{"15":1,"17":2,"36":1}}],["decided",{"2":{"6":1}}],["detailedhtmlprops",{"2":{"12":1,"13":1,"16":1,"57":2,"59":2,"61":1}}],["detect",{"2":{"6":1}}],["determine",{"2":{"6":1,"36":1}}],["dynamic",{"0":{"12":1,"34":1},"2":{"6":1,"10":1,"12":2,"15":1,"16":1,"28":1,"30":4,"31":2,"34":2,"39":1,"40":2,"41":1,"48":2,"53":2,"55":1}}],["vision",{"2":{"55":1}}],["virtual",{"2":{"29":1}}],["via",{"2":{"16":1}}],["very",{"2":{"6":1,"12":1,"35":1}}],["version",{"2":{"2":1,"36":2}}],["var2",{"2":{"16":2}}],["variant",{"2":{"16":2}}],["variable",{"2":{"6":1,"12":1,"15":1,"16":2,"30":1,"34":1}}],["variables",{"0":{"6":1,"16":1},"2":{"6":1,"10":1,"16":1,"30":1,"31":1}}],["var",{"2":{"12":1,"14":1,"15":1,"16":2,"34":2}}],["var1",{"2":{"12":2,"16":2}}],["value=",{"2":{"36":1}}],["value",{"2":{"6":2,"12":1,"16":1,"17":1,"28":1,"30":3,"34":1,"36":1,"48":1,"58":1}}],["values",{"0":{"6":1},"2":{"12":2,"13":2,"16":3,"17":1,"31":1,"34":1,"36":1,"41":1,"48":4,"51":2,"53":1,"57":4,"59":3,"61":2}}],["goal",{"2":{"54":1}}],["good",{"2":{"53":1}}],["go",{"2":{"17":1}}],["general",{"0":{"58":1},"1":{"59":1,"60":1,"61":1,"62":1}}],["generating",{"2":{"55":1}}],["generates",{"2":{"31":1}}],["generated",{"2":{"29":2,"30":1,"33":1,"34":1,"44":1,"55":1}}],["generate",{"0":{"6":1},"2":{"6":1}}],["gets",{"2":{"40":1,"48":1}}],["getyakthemecontext",{"2":{"17":6,"36":5}}],["get",{"2":{"16":1,"17":1,"36":1,"41":1}}],["great",{"2":{"55":1}}],["green",{"2":{"15":4,"45":2,"49":1}}],["ground",{"2":{"54":1}}],["grows",{"2":{"17":1}}],["gray",{"2":{"13":12,"61":6}}],["gt",{"2":{"11":3,"12":64,"13":35,"15":3,"16":43,"17":9,"18":3,"19":3,"24":2,"30":6,"34":3,"36":11,"39":4,"40":4,"41":5,"43":2,"48":3,"49":6,"57":76,"59":60,"60":1,"61":33}}],["g",{"0":{"13":1},"2":{"10":1}}],["give",{"2":{"3":1}}],["github",{"2":{"3":1,"17":1,"36":3,"51":1}}],["\treturn",{"2":{"48":1,"49":1}}],["\tdynamic",{"2":{"48":1}}],["\tdesktop",{"2":{"48":1}}],["\tdisplay",{"2":{"42":2,"49":1}}],["\tmobile",{"2":{"48":1}}],["\tsecondary",{"2":{"48":2}}],["\tsize",{"2":{"43":2,"49":1}}],["\tborder",{"2":{"43":4,"49":2}}],["\tbackground",{"2":{"5":2,"39":6,"40":2,"45":2,"48":1,"49":3}}],["\ttablet",{"2":{"48":1}}],["\ttype",{"2":{"43":2,"49":1}}],["\tto",{"2":{"42":2,"49":1}}],["\tprimary",{"2":{"48":2}}],["\tprops",{"2":{"30":1}}],["\tpadding",{"2":{"42":2,"49":1}}],["\tanimation",{"2":{"42":2,"49":1}}],["\tfrom",{"2":{"42":2,"49":1}}],["\tfont",{"2":{"30":2,"34":4,"42":2,"43":2,"49":2}}],["\twebpackconfig",{"2":{"36":1}}],["\t\t\tclick",{"2":{"49":1}}],["\t\t\tclassname=",{"2":{"49":1}}],["\t\tfont",{"2":{"48":3}}],["\t\ttransform",{"2":{"42":4,"49":2}}],["\t\t",{"2":{"36":4,"49":3}}],["\t\tbackground",{"2":{"34":2}}],["\t\tcolor",{"2":{"5":1,"30":1,"34":2,"44":2,"49":3}}],["\tcolor",{"2":{"30":1,"34":2,"39":2,"43":2,"44":2,"45":2,"49":5}}],["\t",{"2":{"5":1,"30":3,"34":7,"36":4,"41":2,"42":4,"44":2,"48":3,"49":6}}],["\t$",{"2":{"5":1,"30":1,"34":1,"40":2,"44":2,"45":2,"48":3,"49":5}}],["``",{"2":{"49":1}}],["`const",{"2":{"13":1,"14":1,"16":1}}],["`import",{"2":{"13":1,"16":1,"61":1}}],["`",{"2":{"5":2,"11":2,"12":10,"13":2,"14":3,"15":6,"16":2,"17":6,"24":1,"30":4,"33":1,"34":3,"39":8,"40":4,"41":4,"42":4,"43":4,"44":4,"45":4,"48":1,"49":12,"57":7,"59":3,"60":1,"61":2,"62":1}}],["===",{"2":{"13":4,"16":4,"17":2,"36":1,"59":2,"61":2}}],["=",{"2":{"5":2,"11":5,"12":23,"13":21,"14":6,"15":11,"16":21,"17":13,"18":2,"19":2,"23":4,"24":1,"29":2,"30":12,"33":1,"34":4,"36":15,"39":8,"40":4,"41":1,"42":4,"43":4,"44":4,"45":4,"48":7,"49":17,"57":27,"59":19,"60":1,"61":17,"62":3}}],["x27",{"0":{"57":1},"2":{"5":3,"6":1,"11":4,"12":12,"13":10,"14":6,"15":20,"16":10,"17":21,"18":6,"19":4,"20":1,"24":4,"25":1,"29":2,"34":1,"35":1,"36":5,"37":1,"39":8,"40":5,"41":5,"42":4,"43":4,"44":4,"45":4,"47":4,"48":7,"49":24,"51":1,"55":3,"57":8,"59":18,"60":2,"61":8,"62":2}}],["era",{"2":{"57":1}}],["error",{"2":{"17":1,"53":1}}],["errors",{"2":{"6":1,"17":4}}],["employs",{"2":{"55":1}}],["emotion",{"2":{"4":1}}],["evolution",{"2":{"55":1}}],["everywhere",{"2":{"48":1}}],["everytime",{"2":{"40":1}}],["every",{"2":{"8":1,"17":1,"36":1}}],["ecosystem",{"2":{"55":1}}],["either",{"2":{"54":1}}],["especially",{"2":{"51":1}}],["early",{"2":{"54":1}}],["each",{"2":{"31":1}}],["ease",{"2":{"14":3}}],["easy",{"2":{"12":1,"55":1}}],["efficient",{"2":{"20":1,"53":2}}],["envisioned",{"2":{"55":1}}],["engineers",{"2":{"55":1}}],["ensures",{"2":{"54":1}}],["ensuring",{"2":{"16":1}}],["ends",{"2":{"29":1}}],["enables",{"2":{"43":1,"57":1}}],["enable",{"0":{"23":1}}],["encapsulates",{"2":{"11":1}}],["elementmycomponent",{"2":{"57":1}}],["elements",{"2":{"18":2,"39":1}}],["elementcomponent",{"2":{"12":1}}],["element",{"2":{"12":3,"13":2,"16":2,"18":1,"30":1,"57":4,"59":3,"61":2}}],["e",{"0":{"13":1},"2":{"10":1}}],["existing",{"2":{"54":1}}],["exist",{"2":{"29":1}}],["extensively",{"2":{"55":1}}],["extends",{"2":{"12":2,"13":4,"16":4,"17":4,"36":1,"57":4,"59":3,"61":4}}],["extracting",{"2":{"26":1}}],["extraction",{"2":{"11":1,"20":1,"53":1,"55":1}}],["extracted",{"2":{"11":1,"48":1,"54":1}}],["expressive",{"2":{"20":1}}],["exposes",{"2":{"17":1}}],["exports",{"2":{"23":1,"36":2}}],["export",{"2":{"17":4,"23":1,"24":1,"36":8,"48":2,"49":2,"57":3,"59":2}}],["exported",{"2":{"12":3,"57":3}}],["expected",{"2":{"17":2}}],["experimental",{"2":{"2":1}}],["example",{"2":{"24":1,"30":2}}],["examples",{"0":{"0":1}}],["exactly",{"2":{"36":1,"42":1}}],["exact",{"2":{"12":1}}],["creation",{"2":{"55":1}}],["createcontext",{"2":{"36":2}}],["create",{"2":{"12":2,"14":2,"44":1,"45":1,"48":1,"54":1}}],["checked",{"2":{"60":1,"62":1}}],["checking",{"2":{"41":1}}],["challenge",{"2":{"55":1}}],["change",{"0":{"47":1},"2":{"47":2}}],["changed",{"2":{"12":1,"31":1,"36":1,"44":1}}],["changes",{"2":{"12":3,"36":1,"37":1,"55":1,"57":3}}],["choose",{"2":{"54":1}}],["children",{"2":{"36":6,"59":4}}],["cjs",{"2":{"36":2}}],["certain",{"2":{"18":1,"35":1}}],["center",{"2":{"13":4,"61":2}}],["curious",{"2":{"25":1}}],["currently",{"2":{"50":1}}],["current",{"2":{"5":1,"29":3,"36":2,"49":1,"52":1}}],["cut",{"2":{"17":1}}],["client",{"2":{"17":1,"36":6,"51":1}}],["classattributes",{"2":{"12":9,"13":1,"16":5,"57":11,"59":6,"61":1}}],["classname",{"2":{"12":2,"13":5,"16":2,"57":4,"59":3,"61":5}}],["class",{"2":{"11":1,"12":1,"15":2,"30":2,"31":2,"33":1,"34":1,"40":2,"44":1,"49":1,"55":1}}],["classes",{"2":{"4":1,"13":4,"30":1,"33":1,"55":1,"61":3}}],["calls",{"2":{"28":2,"30":1}}],["cache",{"2":{"17":2,"36":7}}],["cachecache",{"2":{"17":2}}],["cast",{"2":{"12":3,"57":3}}],["cannot",{"2":{"17":1}}],["can",{"0":{"3":1,"4":1,"5":1,"7":1,"8":1},"2":{"4":2,"5":1,"11":1,"12":1,"14":2,"15":3,"16":1,"17":1,"24":1,"36":1,"39":2,"40":1,"41":2,"42":1,"44":1,"45":1,"48":4,"49":1,"52":1,"54":3}}],["colocation",{"0":{"59":1},"2":{"54":1,"55":1}}],["colors",{"2":{"41":1,"48":4,"49":6}}],["color",{"2":{"11":3,"12":8,"15":8,"16":4,"17":4,"18":1,"19":1,"24":2,"30":3,"33":4,"40":2,"41":2,"45":2,"49":1,"57":4,"59":2,"60":1,"62":1}}],["code",{"2":{"26":1,"27":1,"28":1,"35":2,"36":1,"40":1,"55":1,"59":1}}],["correct",{"2":{"19":2}}],["corresponding",{"2":{"17":1}}],["could",{"2":{"17":1}}],["course",{"2":{"7":1,"8":1}}],["cookies",{"2":{"17":2,"36":3}}],["cookiestore",{"2":{"17":4,"36":2}}],["cookiescookies",{"2":{"17":2}}],["conclusion",{"0":{"51":1}}],["conditional",{"2":{"54":1}}],["condition",{"2":{"34":1}}],["configure",{"2":{"36":1}}],["configuration",{"2":{"20":1,"24":1}}],["config",{"2":{"23":4,"36":1}}],["converted",{"2":{"15":1}}],["contains",{"2":{"29":1}}],["contextpath",{"2":{"36":1}}],["context",{"0":{"36":1},"2":{"17":3,"26":1,"36":25,"54":1}}],["contents",{"0":{"10":1}}],["contribution",{"2":{"8":1}}],["contribute",{"0":{"8":1}}],["consistency",{"2":{"54":1}}],["consider",{"2":{"17":1,"58":1}}],["considers",{"2":{"5":1}}],["constant",{"2":{"49":1,"55":1}}],["constants",{"2":{"48":3,"53":1}}],["const",{"2":{"5":2,"11":3,"12":13,"13":6,"14":4,"15":7,"16":5,"17":10,"18":1,"19":1,"23":3,"24":1,"30":4,"33":1,"34":1,"36":8,"39":6,"40":2,"42":4,"43":2,"44":4,"45":4,"48":5,"49":13,"57":15,"59":16,"60":1,"61":6,"62":3}}],["comments",{"2":{"35":1}}],["com",{"2":{"17":1,"36":3}}],["complicated",{"2":{"60":1}}],["complexity",{"2":{"54":1}}],["complex",{"2":{"54":1,"62":1}}],["compatibility",{"0":{"61":1}}],["compatible",{"0":{"13":1},"2":{"10":1,"13":1,"55":1}}],["company",{"2":{"55":1}}],["composability",{"0":{"62":1}}],["composable",{"2":{"54":1}}],["component",{"0":{"5":2},"2":{"11":2,"12":6,"13":4,"16":5,"17":1,"18":2,"19":1,"33":1,"36":2,"44":2,"49":3,"51":1,"54":1,"57":8,"59":6,"61":4}}],["components",{"0":{"37":1,"44":1,"49":1,"57":1},"1":{"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1},"2":{"4":2,"5":1,"11":1,"12":1,"17":5,"20":1,"24":1,"36":7,"37":1,"39":3,"40":2,"41":1,"42":2,"43":3,"44":1,"45":3,"47":2,"48":2,"49":7,"51":4,"53":1,"55":7,"57":5,"62":1}}],["compile",{"0":{"27":1},"1":{"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1},"2":{"26":2}}],["compileroptions",{"2":{"19":1,"41":1}}],["compiler",{"2":{"17":1}}],["compilation",{"2":{"12":3,"57":3}}],["combines",{"2":{"20":1}}],["combine",{"0":{"4":1}}],["css=",{"2":{"18":1,"19":1,"41":4}}],["cssinterpolation",{"2":{"12":2,"13":2,"16":2,"57":4,"59":3,"61":2}}],["css`padding",{"2":{"41":1,"57":2}}],["css`color",{"2":{"40":2}}],["css`background",{"2":{"30":2,"34":2}}],["css``",{"2":{"12":3,"16":1,"57":3}}],["css`",{"2":{"12":6,"15":3,"17":4,"41":1,"45":2,"49":1}}],["css",{"0":{"4":1,"6":1,"11":1,"13":1,"16":1,"18":1,"40":1,"41":1},"1":{"19":1,"41":1},"2":{"4":2,"6":2,"9":1,"10":4,"11":1,"12":20,"13":7,"14":1,"15":7,"16":3,"17":2,"18":2,"19":2,"20":3,"27":2,"28":1,"29":10,"30":14,"31":3,"32":1,"33":1,"34":2,"40":5,"41":6,"45":3,"47":2,"49":4,"53":1,"54":5,"55":4,"57":15,"60":1,"61":7}}],["over",{"2":{"55":1}}],["overload",{"2":{"12":3,"57":3}}],["optimizations",{"2":{"54":2}}],["optimized",{"2":{"54":1}}],["options",{"2":{"54":1}}],["optional",{"2":{"26":1}}],["open",{"2":{"52":1}}],["opacity",{"2":{"14":6}}],["own",{"2":{"12":3,"13":2,"16":2,"36":1,"57":4,"59":3,"61":2}}],["object",{"2":{"12":2,"13":3,"16":3,"28":1,"57":4,"59":3,"61":3}}],["once",{"2":{"17":1}}],["on",{"2":{"6":1,"12":4,"13":2,"16":2,"17":1,"18":1,"30":2,"33":1,"34":1,"43":1,"51":1,"55":2,"57":4,"59":3,"61":2}}],["ones",{"2":{"62":1}}],["one",{"2":{"5":1,"36":1,"59":1}}],["only",{"2":{"5":1,"12":6,"53":1,"57":6}}],["often",{"2":{"55":1}}],["offering",{"2":{"55":1}}],["offer",{"2":{"55":1}}],["of",{"0":{"10":1},"2":{"5":1,"7":1,"8":1,"11":2,"12":12,"13":2,"15":1,"16":5,"17":1,"18":1,"19":1,"20":2,"27":1,"28":1,"29":3,"30":1,"32":1,"34":2,"35":1,"36":6,"39":1,"40":2,"44":1,"47":1,"49":1,"52":1,"54":4,"55":5,"57":14,"59":3,"61":2}}],["output",{"2":{"32":1}}],["outputimport",{"2":{"29":1}}],["outputconst",{"2":{"11":1,"12":1,"13":1,"14":1,"15":1,"16":1}}],["out",{"2":{"14":3,"18":1,"51":1}}],["outside",{"2":{"5":1,"40":2,"49":1}}],["our",{"0":{"55":1},"2":{"3":1,"55":2}}],["orange",{"2":{"57":2}}],["order",{"2":{"14":1,"25":1,"29":1,"31":1,"44":1}}],["or",{"2":{"4":1,"6":1,"8":1,"12":2,"13":5,"15":1,"16":2,"17":1,"19":1,"23":1,"30":1,"36":1,"39":1,"49":1,"51":1,"52":1,"54":1,"57":4,"59":3,"61":5}}],["other",{"0":{"3":1,"4":1,"44":1},"2":{"4":2,"12":1,"15":1,"53":1,"54":1}}],["yet",{"2":{"29":1,"30":1}}],["yellow",{"2":{"15":4,"45":2,"49":1}}],["yes",{"2":{"4":1,"5":1,"7":1,"8":1}}],["you",{"0":{"56":1,"57":1},"1":{"57":1,"58":1,"59":1,"60":1,"61":1,"62":1},"2":{"4":2,"5":1,"11":2,"12":1,"14":2,"15":2,"16":3,"17":3,"18":3,"24":2,"36":2,"37":2,"39":4,"40":4,"41":4,"42":1,"44":1,"45":3,"48":3,"49":3,"51":2,"52":2,"54":3,"57":4,"58":1}}],["your",{"2":{"3":1,"4":1,"11":2,"12":2,"13":2,"14":1,"15":1,"16":2,"17":3,"18":1,"19":2,"22":1,"23":3,"24":2,"26":1,"27":1,"36":2,"41":1,"42":2,"43":1,"48":2,"49":1,"51":2,"55":2,"57":4,"59":4,"61":2}}],["yakoptions",{"2":{"36":1}}],["yakcontext",{"2":{"36":7}}],["yakyarn",{"2":{"22":1}}],["yakpnpm",{"2":{"22":1}}],["yakvar1",{"2":{"14":2,"15":2}}],["yakthemeclientprovider",{"2":{"36":3}}],["yakthemeprovider",{"2":{"36":3}}],["yaktheme",{"2":{"12":2,"13":2,"16":6,"17":2,"36":5,"57":4,"59":3,"61":2}}],["yak",{"0":{"2":1,"3":1,"4":1,"6":1,"7":1,"8":1,"20":1,"23":1,"24":1,"48":1,"49":1,"56":1},"1":{"21":1,"22":1,"23":1,"24":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1},"2":{"2":1,"4":1,"5":2,"7":1,"9":1,"11":2,"12":9,"13":3,"14":1,"15":2,"16":2,"17":9,"18":1,"19":3,"20":1,"22":2,"23":3,"24":4,"25":1,"26":1,"27":1,"28":1,"29":6,"30":9,"33":1,"34":1,"36":18,"39":2,"40":3,"41":2,"42":1,"43":2,"44":1,"45":1,"47":2,"48":8,"49":8,"51":1,"52":1,"54":1,"55":3,"57":11,"58":1,"59":2,"60":1,"61":2,"62":1}}],["speed",{"2":{"54":1}}],["specificity",{"2":{"34":1}}],["specify",{"2":{"14":1}}],["specialized",{"2":{"18":1}}],["slow",{"2":{"54":1}}],["suggestions",{"2":{"52":1}}],["subtracted",{"2":{"40":1}}],["supported",{"2":{"50":1}}],["support",{"2":{"3":1,"18":1,"50":1,"53":3,"54":1}}],["ssr",{"2":{"36":1}}],["small",{"2":{"35":1,"57":1}}],["syntax",{"2":{"20":1,"57":1}}],["some",{"2":{"49":1,"55":1}}],["something",{"2":{"26":1}}],["sometimes",{"2":{"16":2}}],["solid",{"2":{"43":2,"49":1}}],["solution",{"2":{"20":1,"55":1}}],["so",{"2":{"29":1,"36":1,"40":1,"48":1}}],["sourcemaps",{"2":{"53":1}}],["source",{"2":{"28":1}}],["should",{"0":{"56":1},"1":{"57":1,"58":1,"59":1,"60":1,"61":1,"62":1},"2":{"29":2,"40":1,"54":1}}],["shorthand",{"2":{"18":1}}],["shortcut",{"2":{"17":1}}],["share",{"2":{"16":1}}],["shadow",{"2":{"13":4,"61":2}}],["several",{"2":{"55":1}}],["served",{"2":{"55":1}}],["server",{"2":{"17":1,"36":12,"51":1,"55":4,"57":1}}],["selector",{"2":{"31":1,"34":1,"44":1}}],["selectors",{"2":{"18":1,"34":1}}],["second",{"0":{"31":1},"1":{"32":1,"33":1,"34":1},"2":{"27":1,"28":1,"29":3,"30":1,"31":1,"36":1}}],["secondary",{"2":{"13":8,"16":10,"59":16,"61":8}}],["seamlessly",{"2":{"20":1}}],["sending",{"2":{"17":1}}],["semibold",{"2":{"13":4,"61":2}}],["setup",{"2":{"55":1,"60":1}}],["set",{"2":{"12":1,"16":1,"30":1}}],["setting",{"2":{"12":1}}],["see",{"2":{"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"35":1,"36":3,"57":1}}],["says",{"2":{"29":1}}],["sample",{"2":{"17":1}}],["same",{"2":{"12":1,"14":1,"16":1,"17":1,"36":1,"39":1,"42":1,"43":1,"45":1,"49":1,"51":1,"53":1,"57":1}}],["safe",{"2":{"6":1,"7":1}}],["similar",{"2":{"40":1,"41":1}}],["similiar",{"2":{"18":1}}],["simpler",{"2":{"62":1}}],["simple",{"2":{"18":1,"24":1,"35":1}}],["size",{"2":{"11":3,"12":4,"16":4,"30":2,"33":2,"34":2,"42":2,"43":4,"48":3,"49":3}}],["side",{"2":{"6":1,"55":1}}],["s",{"2":{"6":1,"18":1,"20":1,"24":1,"25":1,"29":1,"35":1,"36":1,"48":1,"55":3,"57":1}}],["store",{"2":{"48":1}}],["streaming",{"2":{"57":1}}],["struggle",{"2":{"55":1}}],["strange",{"2":{"29":1}}],["stringcolor",{"2":{"16":2}}],["string$$color",{"2":{"16":2}}],["string",{"2":{"13":6,"16":7,"29":1,"48":2,"61":6}}],["strings",{"2":{"12":1,"16":1}}],["step",{"2":{"29":1,"30":1,"32":1}}],["styling",{"2":{"18":1}}],["styleyak",{"2":{"29":1,"30":6}}],["style",{"0":{"29":1},"2":{"12":1,"14":1,"15":1,"16":2,"28":1,"30":1,"31":1}}],["styles",{"0":{"12":1,"33":1,"34":1},"2":{"10":1,"11":3,"12":6,"13":2,"15":1,"16":2,"18":4,"26":2,"27":1,"28":1,"29":3,"31":1,"33":1,"34":1,"35":3,"45":1,"54":3,"55":3,"57":7,"59":4,"61":2}}],["styleddiv",{"2":{"24":3}}],["styledliteral",{"2":{"12":1,"13":2,"16":2,"57":2,"59":2,"61":2}}],["styled",{"0":{"37":1,"39":1,"49":1,"57":1},"1":{"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1},"2":{"4":1,"5":3,"11":5,"12":17,"13":13,"14":4,"15":7,"16":10,"17":4,"20":1,"24":2,"27":1,"30":8,"33":2,"34":2,"35":1,"37":1,"39":14,"40":7,"41":1,"42":6,"43":6,"44":7,"45":6,"47":5,"48":4,"49":25,"51":2,"54":2,"55":4,"57":24,"59":12,"60":2,"61":11,"62":4}}],["statements",{"2":{"32":1}}],["statement",{"2":{"29":2}}],["statically",{"2":{"54":1}}],["staticcssprop",{"2":{"12":3,"57":3}}],["static",{"0":{"6":1,"11":1,"33":1},"2":{"6":2,"9":1,"10":1,"11":1,"12":1,"30":1,"31":1,"33":1,"39":1,"48":2,"49":1,"51":1,"53":1,"55":4}}],["start",{"0":{"24":1}}],["stable",{"2":{"2":1}}],["still",{"2":{"2":1}}],["breakpoints",{"2":{"48":6}}],["bread",{"2":{"12":1}}],["browser",{"2":{"36":1}}],["blob",{"2":{"36":3}}],["block",{"2":{"17":2,"42":2,"49":1}}],["blockatoms",{"2":{"13":3,"61":3}}],["black",{"2":{"30":1,"34":2}}],["blue",{"2":{"15":3,"30":5,"33":2,"34":2,"44":2,"49":1,"59":2}}],["bg",{"2":{"13":8,"61":4}}],["basecontext",{"2":{"36":2}}],["based",{"2":{"12":1,"30":1,"33":1,"34":1,"54":1,"55":2}}],["basics",{"0":{"26":1}}],["background",{"2":{"12":4,"15":4,"24":1,"30":1,"41":2,"57":2,"60":1}}],["both",{"2":{"17":1}}],["box",{"2":{"16":7,"18":1}}],["border",{"2":{"13":8,"61":4}}],["booleansecondary",{"2":{"57":1}}],["boolean$$secondary",{"2":{"57":1}}],["boolean$$primary",{"2":{"57":1}}],["booleanprimary",{"2":{"57":1}}],["boolean",{"2":{"12":18,"39":2,"40":2,"48":1,"57":24}}],["bold",{"2":{"11":3,"12":4,"30":2,"33":2,"34":2}}],["behavior",{"2":{"55":1}}],["behaviour",{"2":{"43":1}}],["benefits",{"2":{"55":1}}],["began",{"2":{"55":1}}],["being",{"2":{"17":1}}],["becomes",{"2":{"17":1}}],["between",{"2":{"13":4,"54":1,"61":2}}],["before",{"2":{"12":6,"57":6}}],["be",{"2":{"6":1,"12":4,"14":1,"15":1,"29":3,"36":1,"48":3,"54":2,"57":3}}],["built",{"2":{"20":1}}],["building",{"2":{"62":1}}],["build",{"0":{"6":1},"2":{"11":1,"15":1,"16":1,"20":1,"44":1,"48":3,"53":1,"55":1}}],["butter",{"2":{"12":1}}],["button`",{"2":{"5":1,"14":2,"17":2,"30":2,"33":1,"34":1,"39":2,"44":2,"48":1,"49":3}}],["button",{"2":{"5":2,"14":1,"17":2,"30":8,"33":2,"34":2,"39":6,"40":4,"41":2,"44":4,"48":1,"49":12}}],["but",{"2":{"2":1,"6":1,"12":1,"17":1,"29":1,"36":1,"40":1,"48":1,"55":1}}],["bf4f74`",{"2":{"40":1}}],["bf4f74",{"2":{"5":2,"12":8,"39":8,"40":3,"48":3,"49":2}}],["by",{"2":{"3":1,"15":1,"29":2,"36":1,"48":1,"54":2,"55":2}}],["npm",{"2":{"22":1}}],["named",{"2":{"47":1}}],["names",{"2":{"15":1,"16":1,"30":1,"33":1,"34":1,"55":1}}],["name",{"2":{"15":1,"16":2,"18":1,"30":1,"31":1,"33":1,"40":1,"44":1}}],["nav`",{"2":{"5":1,"13":2,"39":2,"61":1}}],["nav",{"2":{"5":1,"13":3,"39":2,"61":2}}],["nested",{"2":{"34":1}}],["needed",{"2":{"40":1}}],["need",{"2":{"29":1,"32":1,"37":1}}],["necessary",{"2":{"25":1}}],["new",{"2":{"12":1,"55":2,"57":1}}],["nextconfig",{"2":{"23":4}}],["next",{"0":{"2":1,"3":2,"4":1,"6":1,"7":1,"8":1,"20":1,"23":1,"24":1,"49":1,"56":1},"1":{"21":1,"22":1,"23":1,"24":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1},"2":{"2":1,"4":1,"5":2,"7":1,"9":1,"11":2,"12":9,"13":3,"14":1,"15":2,"16":2,"17":10,"18":1,"19":3,"20":3,"22":4,"23":7,"24":5,"25":1,"26":1,"27":1,"28":1,"29":3,"30":6,"33":1,"34":1,"36":11,"39":2,"40":3,"41":2,"42":1,"43":2,"44":1,"45":1,"47":2,"48":2,"49":6,"51":1,"52":1,"54":1,"55":7,"57":11,"58":1,"59":2,"60":1,"61":2,"62":1}}],["normal",{"2":{"29":1,"32":1,"36":1}}],["normally",{"2":{"11":1}}],["node",{"2":{"17":2}}],["no",{"2":{"16":1,"54":2}}],["none",{"2":{"55":1}}],["non",{"2":{"12":2}}],["now",{"2":{"3":1,"24":2}}],["noticed",{"2":{"16":1}}],["not",{"2":{"3":1,"12":2,"17":3,"25":1,"30":2,"34":1,"36":1,"50":1}}],["two",{"2":{"27":1,"30":1,"36":1}}],["tries",{"2":{"54":1}}],["tried",{"2":{"37":1}}],["tree",{"2":{"17":1,"51":1}}],["true",{"2":{"17":2,"36":1}}],["transition",{"2":{"55":1}}],["translates",{"2":{"31":1}}],["transformation",{"2":{"29":1,"32":1}}],["transforms",{"2":{"28":2,"31":1,"40":1}}],["transform",{"0":{"30":1,"33":1,"34":1},"2":{"27":1}}],["transforming",{"2":{"26":1,"27":2}}],["transformed",{"2":{"11":1,"12":1,"13":1,"14":1,"15":1,"16":2,"30":3,"33":1,"34":2}}],["transpiles",{"2":{"12":3,"57":3}}],["tracker",{"2":{"3":1}}],["tsexport",{"2":{"48":2}}],["tsconfig",{"2":{"19":1,"41":1}}],["tsximport",{"2":{"24":1}}],["tsx",{"2":{"17":1,"36":4}}],["tsimport",{"2":{"17":1,"36":1}}],["ts",{"2":{"17":1,"36":4,"48":1}}],["teal",{"2":{"57":2}}],["team",{"2":{"55":1}}],["tells",{"2":{"29":1}}],["text",{"2":{"13":4,"41":1,"43":2,"49":1,"61":2}}],["templates",{"2":{"12":1}}],["templatestringsarray",{"2":{"12":5,"13":2,"16":2,"57":7,"59":3,"61":2}}],["template",{"0":{"30":1},"2":{"5":1,"27":1,"28":2,"30":1,"40":1,"44":1}}],["tcssprops",{"2":{"12":4,"13":4,"16":4,"57":8,"59":6,"61":4}}],["typings",{"2":{"12":6,"57":6}}],["typed",{"2":{"36":1,"57":1}}],["types",{"2":{"17":1,"19":2,"30":1,"35":1,"36":1}}],["typescript",{"0":{"7":1,"19":1},"2":{"36":1,"41":1,"54":1,"57":1}}],["typeof",{"2":{"17":2,"36":1}}],["typereturntype",{"2":{"17":1}}],["type",{"2":{"7":1,"17":4,"30":2,"41":1}}],["takes",{"2":{"28":1,"31":1,"35":1}}],["tailored",{"2":{"20":1}}],["tailwind",{"0":{"13":1},"2":{"10":1,"13":1,"61":1}}],["target",{"2":{"18":1}}],["tag",{"2":{"17":1,"39":1,"41":1}}],["tagged",{"0":{"30":1},"2":{"5":1,"27":1,"28":2,"30":1,"40":1,"44":1}}],["tattrsout",{"2":{"13":1,"16":1,"61":1}}],["tattrsin",{"2":{"13":1,"16":1,"61":1}}],["tablet",{"2":{"48":1}}],["table",{"0":{"10":1}}],["time",{"0":{"6":1,"27":1},"1":{"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1},"2":{"5":1,"11":1,"15":1,"16":1,"20":1,"26":2,"44":1,"48":3,"53":1,"55":1}}],["t",{"2":{"5":1,"12":6,"13":6,"16":6,"17":2,"18":1,"29":1,"34":1,"40":1,"41":1,"48":2,"51":1,"57":12,"59":9,"61":6}}],["thrown",{"2":{"17":1}}],["things",{"2":{"35":1}}],["think",{"2":{"18":1,"40":1}}],["third",{"2":{"12":2,"13":2,"16":2,"55":1,"57":4,"59":3,"61":2}}],["this",{"2":{"5":1,"12":6,"14":1,"17":2,"19":1,"25":1,"29":4,"35":1,"36":3,"48":2,"51":1,"54":3,"55":3,"57":6}}],["then",{"2":{"48":1}}],["their",{"2":{"12":1,"36":1,"55":1}}],["they",{"2":{"12":2,"13":2,"16":2,"48":1,"55":1,"57":4,"59":3,"61":2}}],["them",{"2":{"12":1,"30":1,"36":1,"45":1,"51":1}}],["theme=",{"2":{"36":1}}],["themeprovider",{"2":{"17":1}}],["theme",{"2":{"12":2,"13":2,"16":6,"17":3,"36":10,"41":1,"54":1,"57":4,"59":3,"61":2}}],["theming",{"0":{"17":1},"2":{"10":1,"17":1,"53":1}}],["therefore",{"2":{"12":3,"57":3}}],["there",{"2":{"11":1,"12":4,"18":1,"19":1,"30":1}}],["these",{"2":{"11":2,"13":1,"16":1,"17":1,"29":1,"48":1,"50":1}}],["the",{"0":{"6":1,"22":1,"26":1,"27":1,"28":1,"31":1,"35":1},"1":{"28":1,"29":2,"30":2,"31":1,"32":2,"33":2,"34":2},"2":{"5":2,"6":1,"11":2,"12":28,"13":5,"14":4,"15":5,"16":10,"17":6,"18":2,"19":5,"20":1,"24":1,"25":2,"26":5,"27":5,"28":9,"29":15,"30":18,"31":6,"32":4,"33":4,"34":8,"35":5,"36":33,"37":1,"39":2,"40":5,"41":7,"42":2,"43":1,"44":4,"45":1,"47":2,"48":1,"49":3,"50":2,"51":3,"52":1,"53":1,"54":4,"55":11,"57":25,"59":6,"60":1,"61":4}}],["that",{"0":{"6":1},"2":{"4":1,"6":1,"11":1,"16":3,"17":1,"18":1,"20":1,"26":1,"29":8,"30":1,"34":1,"35":1,"36":6,"40":3,"41":2,"44":1,"48":2,"51":1,"54":1,"55":1}}],["than",{"0":{"3":1},"2":{"18":1}}],["thought",{"2":{"3":1}}],["together",{"2":{"59":1}}],["top",{"2":{"19":1}}],["to",{"0":{"8":1,"44":1},"2":{"2":1,"3":1,"4":1,"6":3,"12":14,"13":6,"14":2,"15":2,"16":3,"17":7,"18":5,"19":3,"23":1,"24":1,"25":3,"27":1,"28":1,"29":5,"30":1,"31":2,"32":2,"35":1,"36":9,"37":3,"40":2,"41":5,"44":2,"45":1,"47":2,"48":2,"49":2,"51":5,"52":1,"54":5,"55":7,"57":15,"59":3,"61":5}}],["fc",{"2":{"59":1}}],["fcfc",{"2":{"59":2}}],["f7b801",{"2":{"48":2}}],["f0f0f0",{"2":{"24":1,"57":2}}],["flexibility",{"2":{"55":2}}],["flex",{"2":{"13":4,"16":4,"61":2}}],["fast",{"2":{"54":1,"57":1}}],["favorite",{"2":{"22":1}}],["fadeinbutton",{"2":{"14":5}}],["fadein",{"2":{"14":8}}],["factory",{"2":{"12":3,"57":3}}],["familiarity",{"0":{"60":1}}],["familiar",{"0":{"38":1,"57":1},"1":{"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1},"2":{"12":1,"37":1,"51":1,"54":1,"55":1,"57":1}}],["faq",{"0":{"1":1},"1":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1}}],["full",{"2":{"54":1}}],["fully",{"2":{"7":1,"13":1,"57":1}}],["future",{"2":{"50":1}}],["functioncomponent",{"2":{"12":9,"13":5,"16":5,"57":13,"59":12,"61":5}}],["functions",{"2":{"12":4,"30":1,"57":3}}],["function",{"2":{"12":8,"13":3,"15":1,"17":5,"24":1,"28":2,"30":2,"35":2,"36":5,"57":6,"61":2}}],["functionality",{"2":{"12":1}}],["footprint",{"2":{"57":1}}],["focus",{"2":{"55":1}}],["following",{"2":{"19":1,"30":2,"36":2,"41":1,"54":1}}],["font",{"2":{"11":6,"12":8,"13":4,"16":4,"30":2,"33":4,"61":2}}],["formelement",{"2":{"62":1}}],["forwardref",{"2":{"53":1}}],["for",{"2":{"3":2,"5":1,"14":1,"17":3,"18":4,"20":1,"25":1,"26":2,"27":2,"29":1,"31":1,"34":1,"35":1,"36":7,"39":1,"41":1,"42":1,"50":1,"51":1,"55":2}}],["find",{"2":{"17":2,"52":1,"54":1}}],["first",{"0":{"13":1,"28":1},"1":{"29":1,"30":1},"2":{"10":1,"13":1,"27":1,"28":1,"29":1,"30":1,"31":2,"32":1,"33":1,"34":1,"36":1,"61":1}}],["files",{"0":{"48":1},"2":{"29":1,"48":2,"49":1,"54":1,"55":2}}],["file",{"2":{"5":2,"14":1,"17":3,"19":1,"29":5,"30":1,"32":2,"36":7,"48":1,"49":1,"53":1}}],["few",{"2":{"55":1}}],["feedback",{"2":{"51":1}}],["feels",{"2":{"48":1}}],["feel",{"2":{"3":1,"51":1,"52":1}}],["feature",{"2":{"29":1}}],["featured",{"2":{"9":1}}],["features",{"0":{"9":1,"50":1},"1":{"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1},"2":{"50":1,"60":1}}],["from",{"0":{"37":1},"1":{"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1},"2":{"5":1,"11":1,"12":2,"13":3,"14":1,"15":2,"16":2,"17":6,"18":1,"19":1,"23":1,"24":1,"28":1,"29":1,"30":7,"33":1,"34":1,"36":9,"39":4,"40":2,"41":1,"42":2,"43":2,"44":2,"45":2,"47":4,"48":3,"49":13,"55":2,"57":4,"59":3,"60":1,"61":2,"62":2}}],["framework",{"2":{"3":1,"9":1,"55":1}}],["frameworks",{"0":{"3":1,"13":1},"2":{"10":1,"13":2,"61":1}}],["free",{"2":{"3":1,"17":1,"51":1,"52":1}}],["ignore",{"2":{"36":1}}],["implementation",{"2":{"36":1}}],["implicitly",{"2":{"17":1}}],["imports",{"0":{"32":1}}],["imported",{"2":{"28":1,"36":1,"49":1}}],["important",{"2":{"17":1}}],["import",{"0":{"29":1,"47":1},"2":{"5":1,"11":1,"12":2,"13":1,"14":1,"15":2,"16":1,"17":9,"18":1,"19":1,"23":1,"29":3,"30":6,"31":1,"32":1,"33":1,"34":1,"36":9,"39":4,"40":2,"41":1,"42":2,"43":2,"44":2,"45":2,"47":6,"48":2,"49":13,"57":3,"59":7,"60":1,"61":1,"62":1}}],["if",{"0":{"57":1},"2":{"6":2,"16":1,"17":1,"29":1,"36":1,"37":1,"41":1,"51":1,"52":1,"57":2,"58":1,"59":2}}],["its",{"2":{"17":1,"54":2,"55":1}}],["itself",{"2":{"12":2,"30":3}}],["items",{"2":{"13":4,"61":2}}],["it",{"0":{"25":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1},"2":{"3":1,"4":1,"5":1,"6":1,"12":3,"15":2,"17":1,"18":3,"19":1,"25":3,"28":2,"29":3,"31":5,"35":1,"36":2,"39":1,"40":2,"42":1,"44":1,"48":3,"49":1,"51":1,"55":2,"57":4}}],["invocation",{"2":{"55":1}}],["injected",{"2":{"48":1}}],["infinite",{"2":{"42":2,"49":1}}],["infer",{"2":{"17":1}}],["individual",{"2":{"36":1}}],["indicate",{"2":{"35":1}}],["index",{"2":{"17":2,"24":1,"36":10}}],["input``",{"2":{"62":1}}],["input",{"2":{"29":1,"32":1,"43":4,"49":2,"62":2}}],["instead",{"2":{"54":1}}],["instrument",{"2":{"29":1}}],["install",{"0":{"22":1},"2":{"22":1}}],["installation",{"0":{"21":1},"1":{"22":1,"23":1,"24":1},"2":{"24":1}}],["inside",{"2":{"15":1,"31":1}}],["inline",{"2":{"18":2,"29":1,"42":2,"49":1}}],["increasing",{"2":{"55":1}}],["increasingly",{"2":{"17":1}}],["includes",{"2":{"44":1}}],["included",{"2":{"17":1}}],["introduction",{"2":{"55":1}}],["intrinsicelements",{"2":{"12":2,"13":2,"16":2,"57":4,"59":3,"61":2}}],["integrated",{"2":{"55":1}}],["integrates",{"2":{"17":1}}],["interface",{"2":{"17":2,"36":2}}],["interference",{"2":{"16":1}}],["internal",{"2":{"12":3,"36":1,"57":3}}],["into",{"2":{"16":1,"26":1,"27":1,"28":2,"30":3,"31":2,"33":1,"34":2,"40":1}}],["in",{"0":{"4":1,"5":1,"58":1},"1":{"59":1,"60":1,"61":1,"62":1},"2":{"3":1,"4":1,"5":1,"9":1,"13":3,"14":2,"17":5,"20":2,"24":2,"25":1,"28":1,"29":2,"30":2,"31":3,"33":1,"34":1,"35":1,"36":3,"39":1,"40":2,"41":1,"42":2,"43":1,"44":2,"48":3,"49":1,"50":1,"51":2,"53":1,"54":6,"55":5,"57":1,"59":1,"61":3}}],["i",{"0":{"3":1,"4":1,"5":1,"7":1,"8":1},"2":{"22":2,"57":2}}],["isn",{"2":{"40":1}}],["issues",{"2":{"55":1}}],["issue",{"2":{"3":1,"8":1,"52":1,"55":1}}],["is",{"0":{"2":1},"2":{"2":1,"6":3,"7":1,"9":1,"11":1,"12":7,"13":1,"15":1,"16":2,"17":1,"18":1,"20":1,"25":1,"26":2,"27":2,"29":7,"30":5,"32":2,"34":1,"35":3,"36":8,"40":2,"41":1,"42":1,"44":1,"48":1,"51":2,"54":1,"57":4}}],["0deg",{"2":{"42":2,"49":1}}],["009688",{"2":{"17":2}}],["000",{"2":{"17":2}}],["0",{"0":{"53":1},"2":{"2":1,"12":2,"14":6,"15":2,"17":1,"30":1,"34":1,"41":2}}],["125",{"2":{"60":1}}],["120",{"2":{"55":1}}],["104",{"2":{"60":1}}],["103",{"2":{"54":1}}],["100",{"2":{"13":4,"14":3,"61":2}}],["1em",{"2":{"41":2,"43":4,"49":2}}],["16px",{"2":{"24":1,"57":2}}],["18",{"2":{"17":1}}],["1rem",{"2":{"16":4,"42":2,"48":1,"49":1}}],["1s",{"2":{"14":3}}],["1",{"0":{"53":1},"2":{"2":1,"11":3,"12":2,"14":3,"30":1,"34":1,"48":1}}],["adopted",{"2":{"55":1}}],["address",{"2":{"55":1}}],["added",{"2":{"40":1}}],["additionally",{"2":{"57":1}}],["additional",{"2":{"40":1}}],["adding",{"2":{"3":1,"18":1}}],["add",{"0":{"29":1,"48":1},"2":{"6":1,"17":1,"19":2,"22":1,"23":1,"29":2,"41":1,"49":1,"50":1}}],["adds",{"2":{"4":1,"28":1,"31":1,"51":1}}],["ability",{"2":{"51":1}}],["able",{"2":{"36":1}}],["about",{"2":{"8":1,"18":1}}],["after",{"2":{"31":1}}],["amend",{"2":{"17":1}}],["amp",{"2":{"12":40,"13":14,"16":26,"30":2,"33":2,"34":4,"36":1,"57":59,"59":32,"60":1,"61":14}}],["accommodate",{"2":{"55":1}}],["access",{"2":{"17":1}}],["across",{"2":{"45":1,"51":1,"54":1}}],["actual",{"2":{"35":1,"44":1}}],["actually",{"2":{"17":1,"48":1}}],["argument",{"2":{"28":1}}],["arguments",{"2":{"28":1}}],["args",{"2":{"17":2}}],["are",{"0":{"6":2},"2":{"2":1,"8":1,"11":1,"15":2,"30":4,"33":2,"34":2,"35":1,"48":2,"50":1,"54":2}}],["auto",{"2":{"13":4,"61":2}}],["automatic",{"0":{"16":1},"2":{"10":1}}],["app",{"2":{"55":1}}],["approximately",{"2":{"55":1}}],["approach",{"2":{"12":1,"55":1}}],["apply",{"2":{"30":1}}],["application",{"2":{"17":1,"36":1,"51":1}}],["api",{"0":{"38":1},"1":{"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1},"2":{"12":1,"14":1,"36":2,"42":1,"49":1,"51":1,"54":4}}],["alias",{"2":{"36":2}}],["alter",{"2":{"34":1}}],["also",{"2":{"15":1,"28":1,"31":1,"41":1,"43":1,"54":1,"55":1}}],["allowing",{"2":{"54":1}}],["allow",{"2":{"45":1,"54":2}}],["allowumdglobalaccess",{"2":{"17":1}}],["allows",{"2":{"13":3,"18":2,"36":1,"54":1,"61":3}}],["all",{"2":{"12":2,"13":2,"16":2,"17":2,"19":1,"32":1,"39":1,"49":1,"54":1,"57":4,"59":3,"61":2}}],["already",{"2":{"12":1,"16":1,"37":1}}],["always",{"0":{"6":1},"2":{"6":1}}],["attrsmerged",{"2":{"13":2,"16":2,"61":2}}],["attrs",{"0":{"43":1},"2":{"13":3,"16":3,"43":3,"49":1,"53":1,"61":3}}],["attach",{"2":{"12":2,"13":2,"16":2,"57":4,"59":3,"61":2}}],["atomic",{"2":{"13":3,"61":3}}],["atoms",{"2":{"13":14,"61":9}}],["at",{"0":{"6":1},"2":{"5":1,"11":1,"30":1,"55":1}}],["assigned",{"2":{"11":1}}],["aspect",{"2":{"9":1}}],["as",{"2":{"5":1,"11":1,"12":4,"13":4,"16":4,"17":3,"28":3,"29":3,"30":2,"32":1,"36":2,"39":1,"40":2,"42":1,"43":1,"45":1,"48":1,"49":1,"50":1,"55":1,"57":8,"59":6,"61":4}}],["ask",{"2":{"3":1}}],["analyze",{"2":{"55":1}}],["analysis",{"2":{"55":2}}],["animation",{"2":{"14":5}}],["animations",{"0":{"14":1},"2":{"10":1,"14":1,"42":1}}],["an",{"2":{"8":1,"12":4,"17":2,"18":1,"40":1,"52":1,"55":1,"57":3}}],["another",{"0":{"5":1},"2":{"44":1}}],["anychildren",{"2":{"59":2}}],["anycookiestore",{"2":{"17":2}}],["any$anyvariant",{"2":{"59":2}}],["anyprops",{"2":{"59":5}}],["anymycomponent",{"2":{"57":1}}],["anyobtain",{"2":{"17":1}}],["anyhighcontrast",{"2":{"17":1}}],["anyhashighcontrast",{"2":{"17":2}}],["anyvalue",{"2":{"17":1}}],["anyget",{"2":{"17":1}}],["any",{"2":{"4":1,"12":5,"13":2,"16":2,"17":6,"51":1,"52":1,"57":7,"59":3,"61":2}}],["and",{"2":{"3":1,"6":1,"11":1,"12":10,"14":1,"15":2,"16":2,"17":3,"19":1,"24":1,"25":1,"26":2,"27":2,"28":2,"29":2,"30":3,"31":3,"32":1,"33":1,"34":1,"35":4,"36":3,"41":1,"42":1,"43":1,"45":1,"47":1,"48":2,"50":1,"51":3,"54":4,"55":6,"57":12,"59":1}}],["a",{"0":{"5":1},"2":{"2":1,"3":1,"5":1,"6":3,"8":1,"9":2,"11":1,"12":3,"13":5,"15":2,"16":3,"17":9,"18":3,"20":1,"24":1,"29":5,"30":2,"31":1,"32":1,"34":1,"35":2,"36":5,"37":1,"40":2,"44":1,"47":2,"48":3,"49":2,"51":2,"54":4,"55":4,"57":5,"59":3,"60":1,"61":5}}],["writing",{"2":{"60":1}}],["write",{"2":{"8":1,"11":1,"18":1}}],["wrapper",{"2":{"44":2,"49":3}}],["wrapped",{"2":{"18":1}}],["wrap",{"2":{"17":1,"49":1}}],["w",{"2":{"13":4,"61":2}}],["was",{"2":{"29":1}}],["want",{"2":{"14":1,"16":1,"25":1,"40":2,"49":1,"51":2}}],["wants",{"2":{"12":3,"57":3}}],["way",{"2":{"12":1,"29":1,"39":1,"45":1}}],["would",{"2":{"11":1,"39":1,"45":1,"49":1,"55":2}}],["works",{"2":{"12":2,"13":2,"16":2,"17":1,"25":1,"29":1,"36":3,"40":1,"41":1,"51":1,"57":4,"59":3,"61":2}}],["work",{"0":{"25":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1},"2":{"5":1,"12":3,"17":1,"48":1,"55":2,"57":5}}],["working",{"2":{"2":1,"61":1}}],["what",{"2":{"36":1}}],["who",{"2":{"25":1}}],["whereas",{"2":{"48":1}}],["where",{"2":{"12":2,"15":1,"18":1,"34":3,"36":1,"40":1,"55":1}}],["when",{"0":{"6":1,"56":1},"1":{"57":1,"58":1,"59":1,"60":1,"61":1,"62":1},"2":{"12":1,"30":1,"40":1,"49":1,"51":1}}],["while",{"2":{"55":2}}],["which",{"2":{"12":3,"15":1,"18":1,"36":1}}],["white`",{"2":{"40":1}}],["white",{"2":{"5":1,"12":8,"13":4,"30":3,"34":3,"39":2,"40":1,"48":1,"49":2,"61":2}}],["why",{"0":{"6":1},"2":{"35":1,"48":1,"54":1}}],["width",{"2":{"48":3}}],["will",{"2":{"3":1,"12":1,"19":1,"29":1,"48":1}}],["withconfig",{"2":{"50":1}}],["withyak",{"2":{"23":6,"36":3}}],["within",{"2":{"14":1}}],["without",{"2":{"12":1,"17":1,"60":1}}],["with",{"0":{"3":1,"4":1,"7":1,"13":1,"49":1,"57":1},"2":{"4":2,"9":1,"10":1,"11":1,"12":4,"13":1,"16":1,"17":1,"19":1,"20":1,"24":1,"28":2,"29":2,"36":3,"37":1,"40":1,"45":1,"49":3,"51":1,"55":8,"57":4,"60":1,"61":1}}],["well",{"2":{"55":3}}],["webpackconfig",{"2":{"36":1}}],["webpack",{"2":{"27":1,"29":2,"36":1}}],["were",{"2":{"17":2,"55":1}}],["weight",{"2":{"11":3,"12":4,"30":2,"33":2,"34":2}}],["we",{"2":{"2":1,"3":1,"6":2,"8":1,"16":1,"17":2,"18":1,"29":1,"32":1,"36":3,"37":1,"50":1,"55":2}}]],"serializationVersion":2}
