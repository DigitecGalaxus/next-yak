var g=(...n)=>{let e=[],t=[],p={};for(let r=0;r<n.length;r++){let o=n[r];if(typeof o=="string")e.push(o);else if(typeof o=="function")t.push(o);else if(typeof o=="object"&&"style"in o)for(let i in o.style){let a=o.style[i];typeof a=="function"?t.push(s=>({style:{[i]:String(m(s,a))}})):p[i]=a}}if(t.length===0){let r=e.join(" ");return()=>({className:r,style:p})}let l=(r,o,i,a)=>{let s=o(r);if(typeof s=="function")l(r,s,i,a);else if(typeof s=="object"&&s&&("className"in s&&s.className&&i.push(s.className),"style"in s&&s.style))for(let c in s.style){let f=s.style[c];a[c]=f}};return r=>{let o=[...e],i={...p};for(let a=0;a<t.length;a++)l(r,t[a],o,i);return{className:o.join(" "),style:i}}},m=(n,e)=>{let t=e(n);if(typeof t=="function")return m(n,t);if(process.env.NODE_ENV==="development"&&typeof t!="string"&&typeof t!="number"&&!(t instanceof String))throw new Error(`Dynamic CSS functions must return a string or number but returned ${JSON.stringify(t)}`);return t},y=g;import u from"react";import{useTheme as T}from"next-yak/context";function S(n){return(e,...t)=>{let p=(l,r)=>{let o={...l,theme:T()},i=y(e,...t)(o),s={...typeof n=="string"?P(l):l,style:{...l.style||{},...i.style},className:(l.className?l.className+" ":"")+i.className};return typeof n!="string"&&"yak"in n?n.yak(s,r):u.createElement(n,{ref:r,...s})};return Object.assign(u.forwardRef(p),{yak:p})}}var d=new Proxy(S,{get(n,e){if(typeof e!="string")throw new Error("Only string tags are supported");return n(e)}});function P(n){let e={};for(let t in n)t.startsWith("$")||(e[t]=n[t]);return e}var k=(...n)=>{let e=n.join(" ");return()=>({className:e})};var C=(n,...e)=>n;import{useTheme as O,YakThemeProvider as B}from"next-yak/context";export{B as YakThemeProvider,k as atoms,y as css,C as keyframes,d as styled,O as useTheme};
//# sourceMappingURL=index.js.map