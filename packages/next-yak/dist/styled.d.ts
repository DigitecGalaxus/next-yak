import { FunctionComponent } from "react";
import { CSSInterpolation } from "./cssLiteral";
import React from "react";
export declare const styled: ((Component: string | FunctionComponent<any>) => <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element) & {
    a: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    abbr: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    address: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    area: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    article: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    aside: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    audio: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    b: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    base: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    bdi: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    bdo: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    big: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    blockquote: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    body: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    br: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    button: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    canvas: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    caption: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    center: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    cite: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    code: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    col: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    colgroup: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    data: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    datalist: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    dd: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    del: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    details: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    dfn: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    dialog: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    div: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    dl: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    dt: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    em: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    embed: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    fieldset: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    figcaption: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    figure: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    footer: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    form: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    h1: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    h2: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    h3: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    h4: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    h5: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    h6: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    head: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    header: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    hgroup: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    hr: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    html: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    i: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    iframe: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    img: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    input: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    ins: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    kbd: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    keygen: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    label: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    legend: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    li: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    link: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    main: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    map: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    mark: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    menu: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    menuitem: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    meta: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    meter: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    nav: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    noindex: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    noscript: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    object: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    ol: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    optgroup: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    option: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    output: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    p: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    param: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    picture: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    pre: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    progress: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    q: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    rp: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    rt: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    ruby: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    s: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    samp: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    search: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    slot: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    script: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    section: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    select: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    small: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    source: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    span: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    strong: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    style: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    sub: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    summary: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    sup: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    table: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    template: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    tbody: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    td: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    textarea: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    tfoot: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    th: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    thead: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    time: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    title: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    tr: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    track: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    u: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    ul: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    var: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    video: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    wbr: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    webview: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    svg: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    animate: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    animateMotion: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    animateTransform: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    circle: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    clipPath: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    defs: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    desc: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    ellipse: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feBlend: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feColorMatrix: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feComponentTransfer: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feComposite: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feConvolveMatrix: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feDiffuseLighting: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feDisplacementMap: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feDistantLight: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feDropShadow: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feFlood: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feFuncA: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feFuncB: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feFuncG: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feFuncR: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feGaussianBlur: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feImage: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feMerge: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feMergeNode: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feMorphology: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feOffset: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    fePointLight: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feSpecularLighting: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feSpotLight: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feTile: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    feTurbulence: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    filter: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    foreignObject: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    g: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    image: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    line: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    linearGradient: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    marker: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    mask: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    metadata: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    mpath: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    path: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    pattern: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    polygon: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    polyline: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    radialGradient: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    rect: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    stop: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    switch: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    symbol: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    text: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    textPath: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    tspan: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    use: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
    view: <TProps extends Record<string, unknown>>(styles: TemplateStringsArray, ...values: CSSInterpolation<TProps>[]) => (props: TProps) => React.JSX.Element;
};
//# sourceMappingURL=styled.d.ts.map