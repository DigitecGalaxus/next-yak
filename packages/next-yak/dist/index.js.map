{"version":3,"sources":["../runtime/cssLiteral.tsx","../runtime/styled.tsx","../runtime/atoms.tsx","../runtime/keyframes.tsx","../runtime/index.ts"],"sourcesContent":["import type { YakTheme } from \"./index.d.ts\";\n\ntype ComponentStyles<TProps = {}> = (props: TProps) => {\n  className: string;\n  style?: {\n    [key: string]: string;\n  };\n};\n\nexport type CSSInterpolation<TProps = {}> =\n  | string\n  | number\n  | undefined\n  | null\n  | false\n  | ComponentStyles<TProps>\n  | ((props: TProps) => CSSInterpolation<TProps>);\n\ntype CSSStyles<TProps = {}> = {\n  style: { [key: string]: string | ((props: TProps) => string) };\n};\n\ntype CSSFunction = <TProps = {}>(\n  styles: TemplateStringsArray,\n  ...values: CSSInterpolation<TProps & { theme: YakTheme }>[]\n) => ComponentStyles<TProps>;\n\nconst internalImplementation = (\n  ...args: Array<string | CSSFunction | CSSStyles<any>>\n): ComponentStyles<any> => {\n  type PropsToClassNameFn = (props: unknown) => {\n    className?: string;\n    style?: Record<string, string>;\n  };\n  const classNames: string[] = [];\n  const dynamicCssFunctions: PropsToClassNameFn[] = [];\n  const style: Record<string, string> = {};\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    if (typeof arg === \"string\") {\n      classNames.push(arg);\n    } else if (typeof arg === \"function\") {\n      dynamicCssFunctions.push(arg as unknown as PropsToClassNameFn);\n    } else if (typeof arg === \"object\" && \"style\" in arg) {\n      for (const key in arg.style) {\n        const value = arg.style[key];\n        if (typeof value === \"function\") {\n          dynamicCssFunctions.push((props: unknown) => ({\n            style: { [key]: String(recursivePropExecution(props, value)) },\n          }));\n        } else {\n          style[key] = value;\n        }\n      }\n    }\n  }\n\n  // Non Dynamic CSS\n  if (dynamicCssFunctions.length === 0) {\n    const className = classNames.join(\" \");\n    return () => ({ className, style });\n  }\n\n  // Dynamic CSS with runtime logic\n  const unwrapProps = (\n    props: unknown,\n    fn: PropsToClassNameFn,\n    classNames: string[],\n    style: Record<string, string>\n  ) => {\n    const result = fn(props);\n    if (typeof result === \"function\") {\n      unwrapProps(props, result, classNames, style);\n    } else if (typeof result === \"object\" && result) {\n      if (\"className\" in result && result.className) {\n        classNames.push(result.className);\n      }\n      if (\"style\" in result && result.style) {\n        for (const key in result.style) {\n          const value = result.style[key];\n          style[key] = value;\n        }\n      }\n    }\n  };\n\n  return (props: unknown) => {\n    const allClassNames: string[] = [...classNames];\n    const allStyles: Record<string, string> = { ...style };\n    for (let i = 0; i < dynamicCssFunctions.length; i++) {\n      unwrapProps(props, dynamicCssFunctions[i], allClassNames, allStyles);\n    }\n    return {\n      className: allClassNames.join(\" \"),\n      style: allStyles,\n    };\n  };\n};\n\nconst recursivePropExecution = (\n  props: unknown,\n  fn: (props: unknown) => any\n): string | number => {\n  const result = fn(props);\n  if (typeof result === \"function\") {\n    return recursivePropExecution(props, result);\n  }\n  if (process.env.NODE_ENV === \"development\") {\n    if (\n      typeof result !== \"string\" &&\n      typeof result !== \"number\" &&\n      !(result instanceof String)\n    ) {\n      throw new Error(\n        `Dynamic CSS functions must return a string or number but returned ${JSON.stringify(\n          result\n        )}`\n      );\n    }\n  }\n  return result;\n};\n\nexport const css = internalImplementation as any as CSSFunction;\n","import { ForwardRefRenderFunction, FunctionComponent } from \"react\";\nimport { CSSInterpolation, css } from \"./cssLiteral.js\";\nimport React from \"react\";\n\n// the following export is not relative as \"next-yak/context\"\n// links to one file for react server components and\n// to another file for classic react components\nimport { useTheme } from \"next-yak/context\";\nimport type { YakTheme } from \"./context/index.d.ts\";\n\n/**\n * Hack to hide .yak from the type definition and to deal with ExoticComponents\n */\nconst yakForwardRef: <TProps>(\n  component: ForwardRefRenderFunction<any, TProps>\n) => FunctionComponent<TProps> = (component) =>\n  Object.assign(React.forwardRef(component), { component }) as any;\n\n/**\n * All valid html tags\n */\ntype HtmlTags = keyof JSX.IntrinsicElements;\n\n/**\n * Return type of the provided props merged with the initial props\n * where the specified props are optional\n */\ntype AttrsMerged<TBaseProps, TIn extends object = {}> = Substitute<\n  TBaseProps & { theme: YakTheme },\n  TIn\n>;\n\n/**\n * The attrs function allows to add additional props to a styled component.\n * The props can be specified as an object or as a function that receives the\n * current props as argument.\n */\ntype Attrs<\n  TBaseProps,\n  TIn extends object = {},\n  TOut extends AttrsMerged<TBaseProps, TIn> = AttrsMerged<TBaseProps, TIn>\n> =\n  | Partial<TOut>\n  | ((p: Substitute<TBaseProps & { theme: YakTheme }, TIn>) => Partial<TOut>);\n\n//\n// The `styled()` and `styled.` API\n//\n// The API design is inspired by styled-components:\n// https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/constructors/styled.tsx\n// https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/models/StyledComponent.ts\n//\n\nconst StyledFactory = <T,>(Component: HtmlTags | FunctionComponent<T>) =>\n  Object.assign(yakStyled(Component), {\n    attrs: <\n      TAttrsIn extends object = {},\n      TAttrsOut extends AttrsMerged<T, TAttrsIn> = AttrsMerged<T, TAttrsIn>\n    >(\n      attrs: Attrs<T, TAttrsIn, TAttrsOut>\n    ) => yakStyled<T, TAttrsIn, TAttrsOut>(Component, attrs),\n  });\n\nconst yakStyled = <\n  T,\n  TAttrsIn extends object = {},\n  TAttrsOut extends AttrsMerged<T, TAttrsIn> = AttrsMerged<T, TAttrsIn>\n>(\n  Component: FunctionComponent<T> | HtmlTags,\n  attrs?: Attrs<T, TAttrsIn, TAttrsOut>\n) => {\n  return <TCSSProps extends Record<string, unknown> = {}>(\n    styles: TemplateStringsArray,\n    ...values: Array<CSSInterpolation<T & TCSSProps & { theme: YakTheme }>>\n  ) => {\n    const yak = (props: Substitute<TCSSProps & T, TAttrsIn>, ref: unknown) => {\n      let combinedProps = { ...props, theme: useTheme() };\n      if (attrs) {\n        const newProps =\n          typeof attrs === \"function\" ? (attrs as Function)(props) : attrs;\n        combinedProps = combineProps(props, newProps);\n      }\n\n      const runtimeStyles = css(styles, ...values)(combinedProps as any);\n\n      const filteredProps =\n        typeof Component === \"string\"\n          ? removePrefixedProperties(combinedProps)\n          : combinedProps;\n\n      const mergedProps = {\n        ...filteredProps,\n        style: {\n          ...((combinedProps as { style?: Record<string, unknown> }).style ||\n            {}),\n          ...runtimeStyles.style,\n        },\n        className: mergeClassNames(\n          (combinedProps as { className?: string }).className,\n          runtimeStyles.className as string\n        ),\n      };\n\n      // if the styled(Component) syntax is used and the component is a yak component\n      // we can call the yak function directly to avoid an unnecessary wrapper with an additional\n      // forwardRef call\n      if (typeof Component !== \"string\" && \"yak\" in Component) {\n        return (\n          Component as typeof Component & {\n            yak: FunctionComponent<typeof mergedProps>;\n          }\n        ).yak(mergedProps, ref);\n      }\n\n      // @ts-expect-error too complex\n      return <Component ref={ref as any} {...(mergedProps as any)} />;\n    };\n    return yakForwardRef(yak);\n  };\n};\n\n/**\n * Type for the proxy object returned by `styled` that allows to\n * access all html tags as properties.\n */\ntype StyledLiteral<T> = <TCSSProps extends Record<string, unknown> = {}>(\n  styles: TemplateStringsArray,\n  ...values: Array<CSSInterpolation<T & TCSSProps & { theme: YakTheme }>>\n) => FunctionComponent<TCSSProps & T>;\n\n/**\n * The `styled` method works perfectly on all of your own or any third-party component,\n * as long as they attach the passed className prop to a DOM element.\n *\n * @usage\n *\n * ```tsx\n * const StyledLink = styled(Link)`\n *  color: #BF4F74;\n *  font-weight: bold;\n * `;\n * ```\n */\nexport const styled = new Proxy(\n  StyledFactory as typeof StyledFactory & {\n    [Tag in HtmlTags]: StyledLiteral<JSX.IntrinsicElements[Tag]> & {\n      attrs: <\n        TAttrsIn extends object = {},\n        TAttrsOut extends AttrsMerged<\n          JSX.IntrinsicElements[Tag],\n          TAttrsIn\n        > = AttrsMerged<JSX.IntrinsicElements[Tag], TAttrsIn>\n      >(\n        attrs: Attrs<JSX.IntrinsicElements[Tag], TAttrsIn, TAttrsOut>\n      ) => StyledLiteral<Substitute<JSX.IntrinsicElements[Tag], TAttrsIn>>;\n    };\n  },\n  {\n    get(target, TagName: keyof JSX.IntrinsicElements) {\n      return target(TagName);\n    },\n  }\n);\n\n// Remove all entries that start with a $ sign\nfunction removePrefixedProperties<T extends Record<string, unknown>>(obj: T) {\n  const result = {} as T;\n  for (const key in obj) {\n    if (!key.startsWith(\"$\") && key !== \"theme\") {\n      result[key] = obj[key];\n    }\n  }\n  return result;\n}\n\nconst mergeClassNames = (a?: string, b?: string) => {\n  if (!a) return b;\n  if (!b) return a;\n  return a + \" \" + b;\n};\n\nconst removeUndefined = <T,>(obj: T) => {\n  const result = {} as T;\n  for (const key in obj) {\n    if (obj[key] !== undefined) {\n      result[key] = obj[key];\n    }\n  }\n  return result;\n};\n\nconst combineProps = <\n  T extends {\n    className?: string;\n    style?: React.CSSProperties;\n  }\n>(\n  props: T,\n  newProps: T\n) => {\n  let combinedProps = {} as T;\n  if (\"$__attrs\" in props) {\n    // allow overriding props when attrs was used previously\n    combinedProps = {\n      ...removeUndefined(newProps),\n      ...props,\n    };\n  } else {\n    combinedProps = {\n      ...props,\n      ...removeUndefined(newProps),\n    };\n  }\n\n  return {\n    ...combinedProps,\n    className: mergeClassNames(\n      props.className as string,\n      newProps.className as string\n    ),\n    style: { ...(props.style || {}), ...(newProps.style || {}) },\n    $__attrs: true,\n  };\n};\n\n// util type to remove properties from an object\ntype FastOmit<T extends object, U extends string | number | symbol> = {\n  [K in keyof T as K extends U ? never : K]: T[K];\n};\n\n// util type to merge two objects\n// if a property is present in both objects the property from B is used\nexport type Substitute<A extends object, B extends object> = FastOmit<\n  A,\n  keyof B\n> &\n  B;\n","/**\n * Allows to use atomic CSS classes in a styled or css block\n * \n * @usage\n * \n * ```tsx\n * import { styled, atoms } from \"next-yak\";\n * \n * const Button = styled.button<{ $primary?: boolean }>`\n *  ${atoms(\"text-teal-600\", \"text-base\", \"rounded-md\")}\n *  ${props => props.$primary && atoms(\"shadow-md\")}\n * `;\n * ```\n */\nexport const atoms = (...atoms: string[]) => {\n    const className = atoms.join(\" \");\n    return () => ({ className });\n};","/**\n * Allows to use CSS keyframe animations in a styled or css block\n * \n * @usage\n * \n * ```tsx\n * import { styled, keyframes } from \"next-yak\";\n * \n * const rotate = keyframes`\n *  from {\n *   transform: rotate(0deg);\n *  }\n *  to {\n *   transform: rotate(360deg);\n *  }\n * `;\n * \n * const Spinner = styled.div`\n *   animation: ${rotate} 1s linear infinite;\n * `;\n * ```\n */\nexport const keyframes = (styles: TemplateStringsArray, \n    ...dynamic: never[]\n    ): string => {\n    // during compilation all args of keyframe are compiled\n    // to a string which references the animation name  \n    return styles as any as string;\n};","export { css } from \"./cssLiteral.js\";\nexport { styled } from \"./styled.js\";\nexport { atoms } from \"./atoms.js\";\nexport { keyframes } from \"./keyframes.js\";\n\n// the following export is not relative as \"next-yak/context\"\n// links to one file for react server components and\n// to another file for classic react components\nexport { useTheme, YakThemeProvider} from \"next-yak/context\"\n\nexport type { YakTheme } from \"./context/index.d.ts\";"],"mappings":"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","names":["internalImplementation","args","classNames","dynamicCssFunctions","style","i","arg","key","value","props","recursivePropExecution","className","unwrapProps","fn","result","allClassNames","allStyles","css","React","useTheme","yakForwardRef","component","StyledFactory","Component","yakStyled","attrs","styles","values","props","ref","combinedProps","newProps","combineProps","runtimeStyles","css","mergedProps","removePrefixedProperties","mergeClassNames","styled","target","TagName","obj","result","key","a","b","removeUndefined","atoms","className","keyframes","styles","dynamic","useTheme","YakThemeProvider"]}