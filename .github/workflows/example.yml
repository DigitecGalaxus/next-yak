name: Build and Deploy packages/example

env:
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

on:
  push:
    branches:
      - main
    paths:
      - "packages/example/**"
      - "packages/yak-swc/**"
      - "packages/next-yak/**"
      - ".github/workflows/example.yml"
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull Request Number"
        required: true
        type: string

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Define whether this is a production deployment
    env:
      IS_PRODUCTION: ${{ github.event_name == 'push' }}
      PR_NUMBER: ${{ github.event.inputs.pr_number }}

    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}

      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        name: Install pnpm
        with:
          version: 10.15.0
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@3235b876344d2a9aa001b8d1453c930bba69e610 # v3
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install node_modules
        run: pnpm install

      - name: Build Linter
        run: pnpm --filter eslint-plugin-yak build

      - name: Lint Example
        run: pnpm --filter next-yak-example lint

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1

      - name: Enable caching
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2
        with:
          workspaces: packages/yak-swc

      - name: Build with SWC
        run: pnpm run build:swc

      - name: Install Vercel CLI
        run: npm install -g vercel@35

      - name: Link Vercel project
        run: vercel link --yes --token ${{ secrets.VERCEL_TOKEN }}

      # Preview deployment (for workflow_dispatch)
      - name: Pull Vercel environment information (Preview)
        if: env.IS_PRODUCTION == 'false'
        run: vercel pull --yes --environment=preview --token ${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts (Preview)
        if: env.IS_PRODUCTION == 'false'
        run: vercel build --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Preview)
        id: deploy-preview
        if: env.IS_PRODUCTION == 'false'
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Preview deployment URL: $DEPLOYMENT_URL"

      # Production deployment (for main branch pushes)
      - name: Pull Vercel environment information (Production)
        if: env.IS_PRODUCTION == 'true'
        run: vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts (Production)
        if: env.IS_PRODUCTION == 'true'
        run: vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Production)
        if: env.IS_PRODUCTION == 'true'
        run: vercel deploy --prebuilt --prod --token ${{ secrets.VERCEL_TOKEN }}
